Class("ProtoObject", {    classMethods: {        initializedInstance: function () {            return nil;        }    },    instanceMethods: {        tryNamedPrimitive_with_with_with_with_with_with_: function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        },        instVarsInclude_: function (anObject) {            primitiveDeclaration();            number(1).to_do_(this._class().instSize(), block(function (i) {                return (this.instVarAt_(i))._equals_equals(anObject).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            number(1).to_do_(this.basicSize(), block(function (i) {                return (this.basicAt_(i))._equals_equals(anObject).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            return _false;        },        scaledIdentityHash: function () {            return this.identityHash()._times(number(262144));        },        doOnlyOnce_: function (aBlock) {            (Smalltalk.at_ifAbsent_(string("OneShotArmed"), block(function () {                return _true;            }))).ifTrue_(block(function () {                Smalltalk.at_put_(string("OneShotArmed"), _false);                return aBlock.value();            }));            return this;        },        tryNamedPrimitive_with_with_with_: function (arg1, arg2, arg3, arg4) {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        },        ifNotNil_ifNil_: function (ifNotNilBlock, nilBlock) {            return ifNotNilBlock.cull_(this);        },        privRemoteReturnTo_: function (contextTag) {            contextTag.return_(this);            return this;        },        privStoreIn_instVar_: function (object, index) {            object.privSetInstVar_put_(index, this);            return this;        },        doesNotUnderstand_: function (aMessage) {            return (function () {                var cascadeReceiver$ = MessageNotUnderstood._new();                cascadeReceiver$.message_(aMessage);                cascadeReceiver$.receiver_(this);                return cascadeReceiver$.signal();            }).apply(this);        },        initialize: function () {            return this;        },        tryNamedPrimitive_with_with_with_with_with_with_with_: function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        },        rearmOneShot: function () {            Smalltalk.at_put_(string("OneShotArmed"), _true);            return this;        },        ifNil_: function (nilBlock) {            return this;        },        ifNil_ifNotNil_: function (nilBlock, ifNotNilBlock) {            return ifNotNilBlock.cull_(this);        },        ifNotNil_: function (ifNotNilBlock) {            return ifNotNilBlock.cull_(this);        },        privSetInstVar_put_: function (index, value) {            primitiveDeclaration();            return this.basicAt_put_(index._minus(this._class().instSize()), value);        },        _tilde_tilde: function (anObject) {            this._equals_equals(anObject).ifTrue_ifFalse_(block(function () {                nonLocalReturn(_false);            }), block(function () {                nonLocalReturn(_true);            }));            return this;        },        privSetInHolder_: function (valueHolder) {            valueHolder.value_(this);            return this;        },        tryNamedPrimitive_: function (arg1) {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        },        isInMemory: function () {            return _true;        },        tryNamedPrimitive_with_with_with_with_with_: function (arg1, arg2, arg3, arg4, arg5, arg6) {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        },        tryNamedPrimitive: function () {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        },        rehash: function () {            return this;        },        tryNamedPrimitive_with_with_: function (arg1, arg2, arg3) {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        },        _equals_equals: function (anObject) {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        nextObject: function () {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        flag_: function (aSymbol) {            return this;        },        nextInstance: function () {            primitiveDeclaration();            return nil;        },        withArgs_executeMethod_: function (argArray, compiledMethod) {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        isNil: function () {            return _false;        },        privGetInstVar_: function (index) {            primitiveDeclaration();            return this.basicAt_(index._minus(this._class().instSize()));        },        pointsTo_: function (anObject) {            return (this.instVarsInclude_(anObject)).or_(block(function () {                return this._class()._equals_equals(anObject);            }));        },        identityHash: function () {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        tryNamedPrimitive_with_: function (arg1, arg2) {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        },        become_: function (otherObject) {            (_Array.with_(this)).elementsExchangeIdentityWith_((_Array.with_(otherObject)));            return this;        },        cannotInterpret_: function (aMessage) {            (this._class().lookupSelector_(aMessage.selector()))._equals_equals(nil).ifFalse_(block(function () {                nonLocalReturn(aMessage.sentTo_(this));            }));            Error.signal_(string("MethodDictionary fault"));            return aMessage.sentTo_(this);        },        tryNamedPrimitive_with_with_with_with_: function (arg1, arg2, arg3, arg4, arg5) {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        },        tryPrimitive_withArgs_: function (primIndex, argumentArray) {            primitiveDeclaration();            return ContextPart.primitiveFailToken();        }    }});Class("_Object", {    superclass: ProtoObject,    classVariables: [ "$DependentsFields" ],    classMethods: {        instanceOfUniqueClass: function () {            return this.instanceOfUniqueClassWithInstVarString_andClassInstVarString_(string(""), string(""));        },        readFrom_: function (textStringOrStream) {            var object;            (Compiler.couldEvaluate_(textStringOrStream)).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("expected String, Stream, or Text")));            }));            object = Compiler.evaluate_(textStringOrStream);            (object.isKindOf_(this)).ifFalse_(block(function () {                return this.error_(this.name()._comma(string(" expected")));            }));            return object;        },        categoryForUniclasses: function () {            return string("UserObjects");        },        isUniClass: function () {            return _false;        },        howToModifyPrimitives: function () {            this.error_(string("comment only"));            return this;        },        newUniqueClassInstVars_classInstVars_: function (instVarString, classInstVarString) {            var aName; var aClass;            this.isSystemDefined().ifFalse_(block(function () {                nonLocalReturn(this.$superclass.newUniqueClassInstVars_classInstVars_(instVarString, classInstVarString));            }));            aName = this.chooseUniqueClassName();            aClass = this.subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aName, instVarString, string(""), string(""), this.categoryForUniclasses());            classInstVarString.size()._greater(number(0)).ifTrue_(block(function () {                return aClass._class().instanceVariableNames_(classInstVarString);            }));            return aClass;        },        whatIsAPrimitive: function () {            this.error_(string("comment only"));            return this;        },        createFrom_size_version_: function (aSmartRefStream, varsOnDisk, instVarList) {            return this.isVariable().ifFalse_ifTrue_(block(function () {                return this.basicNew();            }), block(function () {                return this.basicNew_((varsOnDisk._minus((instVarList.size()._minus(number(1))))));            }));        },        instanceOfUniqueClassWithInstVarString_andClassInstVarString_: function (instVarString, classInstVarString) {            return (this.newUniqueClassInstVars_classInstVars_(instVarString, classInstVarString)).initialInstance();        },        services: function () {            return array([]);        },        initialize: function () {            DependentsFields.ifNil_(block(function () {                return this.initializeDependentsFields();            }));            return this;        },        newFrom_: function (aSimilarObject) {            return (this.isVariable().ifTrue_ifFalse_(block(function () {                return this.basicNew_(aSimilarObject.basicSize());            }), block(function () {                return this.basicNew();            }))).copySameFrom_(aSimilarObject);        },        initializedInstance: function () {            return this._new();        },        fileReaderServicesForDirectory_: function (aFileDirectory) {            return array([]);        },        flushDependents: function () {            DependentsFields.keysAndValuesDo_(block(function (key, dep) {                return key.ifNotNil_(block(function () {                    return key.removeDependent_(nil);                }));            }));            DependentsFields.finalizeValues();            return this;        },        fileReaderServicesForFile_suffix_: function (fullName, suffix) {            return array([]);        },        flushEvents: function () {            EventManager.flushEvents();            return this;        },        initializeDependentsFields: function () {            DependentsFields = WeakIdentityKeyDictionary._new();            return this;        },        newUserInstance: function () {            return this.instanceOfUniqueClass();        },        windowColorSpecification: function () {            return WindowColorSpec.classSymbol_wording_brightColor_pastelColor_helpMessage_(this.name(), string("Default"), string("white"), string("white"), string("Other windows without color preferences."));        },        chooseUniqueClassName: function () {            var i; var className;            i = number(1);            block(function () {                className = (this.name()._comma(i.printString())).asSymbol();                return Smalltalk.includesKey_(className);            }).whileTrue_(block(function () {                return i = i._plus(number(1));            }));            return className;        },        readCarefullyFrom_: function (textStringOrStream) {            var object;            (Compiler.couldEvaluate_(textStringOrStream)).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("expected String, Stream, or Text")));            }));            object = Compiler.evaluate_for_notifying_logged_(textStringOrStream, nil, string("error:"), _false);            (object.isKindOf_(this)).ifFalse_(block(function () {                return this.error_(this.name()._comma(string(" expected")));            }));            return object;        },        lastMetacelloVersionLoad: function () {            return nil._minus_greater(string("default"));        },        releaseExternalSettings: function () {            return this;        },        metacelloVersion_loads_: function (versionString, anArrayOrString) {            return this;        },        initialInstance: function () {            return this._new();        },        reInitializeDependentsFields: function () {            var oldFields;            oldFields = DependentsFields;            DependentsFields = WeakIdentityKeyDictionary._new();            oldFields.keysAndValuesDo_(block(function (obj, deps) {                return deps.do_(block(function (d) {                    return obj.addDependent_(d);                }));            }));            return this;        }    },    instanceMethods: {        checkHaltCountExpired: function () {            var counter;            counter = Smalltalk.at_ifAbsent_(string("HaltCount"), block(function () {                return number(0);            }));            return counter._equals(number(0));        },        haveFullProtocolBrowsedShowingSelector_: function (aSelector) {            var aBrowser;            aBrowser = (Smalltalk.at_ifAbsent_(string("InstanceBrowser"), block(function () {                nonLocalReturn(nil);            })))._new().useVocabulary_(Vocabulary.fullVocabulary());            aBrowser.openOnObject_inWorld_showingSelector_(this, ActiveWorld, aSelector);            return this;        },        serializeToSmalltalk: function () {            return this.storeString();        },        adaptedToWorld_: function (aWorld) {            return this;        },        metacelloIntegerLessThanSelf_: function (anInteger) {            return this.error_(string("Invalid Metacello verson component - should be String or Integer."));        },        defaultBackgroundColor: function () {            return Preferences.windowColorFor_(this._class().name());        },        becomeForward_copyHash_: function (otherObject, copyHash) {            (_Array.with_(this)).elementsForwardIdentityTo_copyHash_((_Array.with_(otherObject)), copyHash);            return this;        },        haltIf_: function (condition) {            var cntxt;            condition.isSymbol().ifTrue_(block(function () {                cntxt = THIS_CONTEXT;                block(function () {                    return cntxt.sender().isNil();                }).whileFalse_(block(function () {                    cntxt = cntxt.sender();                    return (cntxt.selector()._equals(condition)).ifTrue_(block(function () {                        return Halt.signal();                    }));                }));                nonLocalReturn(this);            }));            (condition.isBlock().ifTrue_ifFalse_(block(function () {                return condition.valueWithPossibleArgument_(this);            }), block(function () {                return condition;            }))).ifTrue_(block(function () {                return Halt.signal();            }));            return this;        },        halt_onCount_: function (aString, _int) {            this.haltOnceEnabled().ifTrue_(block(function () {                return this.hasHaltCount().ifTrue_ifFalse_(block(function () {                    return this.decrementAndCheckHaltCount().ifTrue_(block(function () {                        return this.doExpiredHaltCount_(aString);                    }));                }), block(function () {                    return _int._equals(number(1)).ifTrue_ifFalse_(block(function () {                        return this.doExpiredHaltCount_(aString);                    }), block(function () {                        return this.setHaltCountTo_(_int._minus(number(1)));                    }));                }));            }));            return this;        },        readDataFrom_size_: function (aDataStream, varsOnDisk) {            var cntInstVars; var cntIndexedVars;            cntInstVars = this._class().instSize();            this._class().isVariable().ifTrue_ifFalse_(block(function () {                cntIndexedVars = varsOnDisk._minus(cntInstVars);                return cntIndexedVars._less(number(0)).ifTrue_(block(function () {                    return this.error_(string("Class has changed too much.  Define a convertxxx method"));                }));            }), block(function () {                cntIndexedVars = number(0);                return cntInstVars = varsOnDisk;            }));            aDataStream.beginReference_(this);            number(1).to_do_(cntInstVars, block(function (i) {                return this.instVarAt_put_(i, aDataStream.next());            }));            number(1).to_do_(cntIndexedVars, block(function (i) {                return this.basicAt_put_(i, aDataStream.next());            }));            return this;        },        ifNotNilDo_ifNil_: function (aBlock, nilBlock) {            return aBlock.value_(this);        },        okToClose: function () {            return this.okToChange();        },        finalize: function () {            return this;        },        comeFullyUpOnReload_: function (smartRefStream) {            return this;        },        dpsTrace_: function (reportObject) {            Transcript.myDependents().isNil().ifTrue_(block(function () {                nonLocalReturn(this);            }));            this.dpsTrace_levels_withContext_(reportObject, number(1), THIS_CONTEXT);            return this;        },        rememberCommand_: function (aCommand) {            Preferences.useUndo().ifFalse_(block(function () {                nonLocalReturn(this);            }));            return this.commandHistory().rememberCommand_(aCommand);        },        haltIfNil: function () {            return this;        },        offerViewerMenuFor_event_: function (aViewer, evt) {            var aMenu;            aMenu = MenuMorph._new().defaultTarget_(this);            aMenu.addStayUpItem();            aMenu.title_(string("**CAUTION -- UNDER CONSTRUCTION!**\rMany things may not work!\r")._comma(this.nameForViewer()));            (aViewer.affordsUniclass().and_(block(function () {                return this.belongsToUniClass().not();            }))).ifTrue_(block(function () {                aMenu.add_action_(string("give me a Uniclass"), string("assureUniClass"));                return aMenu.addLine();            }));            aMenu.add_target_action_(string("choose vocabulary..."), aViewer, string("chooseVocabulary"));            aMenu.add_target_action_(string("choose limit class..."), aViewer, string("chooseLimitClass"));            aMenu.add_target_action_(string("add search pane"), aViewer, string("addSearchPane"));            aMenu.balloonTextForLastItem_(string("Specify which class should be the most generic one to have its methods shown in this Viewer"));            aMenu.addLine();            this.belongsToUniClass().ifTrue_(block(function () {                aMenu.add_target_selector_argument_(string("add a new instance variable"), this, string("addInstanceVariableIn:"), aViewer);                aMenu.add_target_selector_argument_(string("add a new script"), aViewer, string("newPermanentScriptIn:"), aViewer);                aMenu.addLine();                aMenu.add_target_selector_argument_(string("make my class be first-class"), this, string("makeFirstClassClassIn:"), aViewer);                aMenu.add_target_action_(string("move my changes up to my superclass"), this, string("promoteChangesToSuperclass"));                return aMenu.addLine();            }));            aMenu.add_target_selector_(string("tear off a tile"), this, string("launchTileToRefer"));            aMenu.addLine();            aMenu.add_target_selector_(string("inspect me"), this, string("inspect"));            aMenu.add_target_action_(string("inspect my class"), this._class(), string("inspect"));            aMenu.addLine();            aMenu.add_action_(string("browse vocabulary"), string("haveFullProtocolBrowsed"));            aMenu.add_target_action_(string("inspect this Viewer"), aViewer, string("inspect"));            aMenu.popUpEvent_in_(evt, aViewer.currentWorld());            return this;        },        basicAddInstanceVarNamed_withValue_: function (aName, aValue) {            this._class().addInstVarName_(aName.asString());            this.instVarAt_put_(this._class().instSize(), aValue);            return this;        },        greaseString: function () {            return this.asString();        },        errorNotIndexable: function () {            this.error_((string("Instances of {1} are not indexable").translated().format_(array([this._class().name()]))));            return this;        },        isCollection: function () {            return _false;        },        outboundPointersDo_: function (aBlock) {            aBlock.value_(this._class());            number(1).to_do_(this._class().instSize(), block(function (i) {                return aBlock.value_((this.instVarAt_(i)));            }));            number(1).to_do_(this.basicSize(), block(function (i) {                return aBlock.value_((this.basicAt_(i)));            }));            return this;        },        isComancheModule: function () {            return _false;        },        isUPackageCategory: function () {            return _false;        },        mustBeBoolean: function () {            return this.mustBeBooleanIn_(THIS_CONTEXT.sender());        },        perform_with_: function (aSymbol, anObject) {            primitiveDeclaration();            return this.perform_withArguments_(aSymbol, (_Array.with_(anObject)));        },        hasModelYellowButtonMenuItems: function () {            return Preferences.cmdGesturesEnabled();        },        metacelloStringLessThanSelf_: function (anInteger) {            return this.error_(string("Invalid Metacello verson component - should be String or Integer."));        },        hasUserDefinedSlots: function () {            return _false;        },        veryDeepFixupWith_: function (deepCopier) {            return this;        },        canHaveUnacceptedEdits: function () {            return _false;        },        notifyWithLabel_: function (aString) {            ToolSet.debugContext_label_contents_(THIS_CONTEXT, aString, aString);            return this;        },        mustBeBooleanIn_: function (context) {            var proceedValue;            context.skipBackBeforeJump();            proceedValue = (function () {                var cascadeReceiver$ = NonBooleanReceiver._new();                cascadeReceiver$.object_(this);                return cascadeReceiver$.signal_(string("proceed for truth."));            }).apply(this);            return proceedValue._tilde_tilde(_false);        },        isSLResult: function () {            return _false;        },        actAsExecutor: function () {            this.breakDependents();            return this;        },        printString: function () {            return this.printStringLimitedTo_(number(50000));        },        elementSeparator: function () {            return nil;        },        asSetElement: function () {            return this;        },        haltOnceEnabled: function () {            return Smalltalk.at_ifAbsent_(string("HaltOnce"), block(function () {                return _false;            }));        },        actionsWithReceiver_forEvent_: function (anObject, anEventSelector) {            return (this.actionSequenceForEvent_(anEventSelector)).select_(block(function (anAction) {                return anAction.receiver()._equals_equals(anObject);            }));        },        dragPassengerFor_inMorph_: function (item, dragSource) {            return item;        },        initialTypeForSlotNamed_: function (aName) {            return string("Object");        },        exploreWithLabel_: function (label) {            return ObjectExplorer._new().openExplorerFor_withLabel_(this, label);        },        toFinalizeSend_to_with_: function (aSelector, aFinalizer, aResourceHandle) {            this._equals_equals(aFinalizer).ifTrue_(block(function () {                return this.error_(string("I cannot finalize myself"));            }));            this._equals_equals(aResourceHandle).ifTrue_(block(function () {                return this.error_(string("I cannot finalize myself"));            }));            return this.finalizationRegistry().add_executor_(this, (ObjectFinalizer.receiver_selector_argument_(aFinalizer, aSelector, aResourceHandle)));        },        basicAt_: function (index) {            primitiveDeclaration();            index.isInteger().ifTrue_(block(function () {                return this.errorSubscriptBounds_(index);            }));            index.isNumber().ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.basicAt_(index.asInteger()));            }), block(function () {                return this.errorNonIntegerIndex();            }));            return this;        },        triggerEvent_with_ifNotHandled_: function (anEventSelector, anObject, anExceptionBlock) {            return this.triggerEvent_withArguments_ifNotHandled_(anEventSelector, (_Array.with_(anObject)), anExceptionBlock);        },        yourself: function () {            return this;        },        inspectorClass: function () {            return Inspector;        },        methodInterfacesInPresentationOrderFrom_forCategory_: function (interfaceList, aCategory) {            var masterOrder; var ordered; var unordered;            masterOrder = Vocabulary.eToyVocabulary().masterOrderingOfPhraseSymbols();            ordered = SortedCollection.sortBlock_(block(function (a, b) {                return a.key()._less(b.key());            }));            unordered = SortedCollection.sortBlock_(block(function (a, b) {                return a.wording()._less(b.wording());            }));            interfaceList.do_(block(function (_interface) {                var index;                index = masterOrder.indexOf_(_interface.elementSymbol());                return index.isZero().ifTrue_ifFalse_(block(function () {                    return unordered.add_(_interface);                }), block(function () {                    return ordered.add_(index._minus_greater(_interface));                }));            }));            return _Array.streamContents_(block(function (stream) {                ordered.do_(block(function (assoc) {                    return stream.nextPut_(assoc.value());                }));                return stream.nextPutAll_(unordered);            }));        },        explicitRequirement: function () {            this.error_(string("Explicitly required method"));            return this;        },        changed_with_: function (anAspect, anObject) {            this.dependents().do_(block(function (aDependent) {                return aDependent.update_with_(anAspect, anObject);            }));            return this;        },        metacelloVersionComponentLessThan_: function (aMetacelloVersonComponent) {            return this.error_(string("Invalid Metacello verson component - should be String or Integer."));        },        asFunction: function () {            return this.asFunction_(array([]));        },        creationStamp: function () {            return string("<no creation stamp>");        },        longPrintOn_limitedTo_indent_: function (aStream, sizeLimit, indent) {            this._class().allInstVarNames().doWithIndex_(block(function (title, index) {                indent.timesRepeat_(block(function () {                    return aStream.tab();                }));                return (function () {                    var cascadeReceiver$ = aStream;                    cascadeReceiver$.nextPutAll_(title);                    cascadeReceiver$.nextPut_(character(":"));                    cascadeReceiver$.space();                    cascadeReceiver$.tab();                    cascadeReceiver$.nextPutAll_(((this.instVarAt_(index)).printStringLimitedTo_((sizeLimit._minus(number(3))._minus(title.size()).max_(number(1))))));                    return cascadeReceiver$.cr();                }).apply(this);            }));            return this;        },        defaultNameStemForInstances: function () {            return this._class().defaultNameStemForInstances();        },        tilePhrasesForCategory_inViewer_: function (aCategorySymbol, aViewer) {            var interfaces;            interfaces = this.methodInterfacesForCategory_inVocabulary_limitClass_(aCategorySymbol, aViewer.currentVocabulary(), aViewer.limitClass());            interfaces = this.methodInterfacesInPresentationOrderFrom_forCategory_(interfaces, aCategorySymbol);            return this.tilePhrasesForMethodInterfaces_inViewer_(interfaces, aViewer);        },        hasLiteralThorough_: function (literal) {            return _false;        },        addModelYellowButtonMenuItemsTo_forMorph_hand_: function (aCustomMenu, aMorph, aHandMorph) {            Preferences.cmdGesturesEnabled().ifTrue_(block(function () {                return aCustomMenu.add_target_action_(string("inspect model").translated(), this, string("inspect"));            }));            return aCustomMenu;        },        removeDependent_: function (anObject) {            var dependents;            dependents = this.dependents().reject_(block(function (each) {                return each._equals_equals(anObject);            }));            this.myDependents_((dependents.isEmpty().ifFalse_(block(function () {                return dependents;            }))));            return anObject;        },        systemNavigation: function () {            return SystemNavigation._default();        },        launchPartVia_label_: function (aSelector, aString) {            var aMorph;            aMorph = this.perform_(aSelector);            aMorph.setNameTo_((ActiveWorld.unusedMorphNameLike_(aString)));            aMorph.setProperty_toValue_(string("beFullyVisibleAfterDrop"), _true);            aMorph.openInHand();            return this;        },        needsWork: function () {            return this;        },        removeHaltCount: function () {            (this._class().environment().includesKey_(string("HaltCount"))).ifTrue_(block(function () {                return this._class().environment().removeKey_(string("HaltCount"));            }));            return this;        },        hasActionForEvent_: function (anEventSelector) {            return (this.actionForEvent_(anEventSelector)).notNil();        },        launchPartVia_: function (aSelector) {            var aMorph;            aMorph = this.perform_(aSelector);            aMorph.setProperty_toValue_(string("beFullyVisibleAfterDrop"), _true);            aMorph.openInHand();            return this;        },        belongsToUniClass: function () {            return this._class().isUniClass();        },        asActionSequenceTrappingErrors: function () {            return WeakActionSequenceTrappingErrors.with_(this);        },        addModelItemsToWindowMenu_: function (aMenu) {            return this;        },        update_with_: function (anAspect, anObject) {            return this.update_(anAspect);        },        requestor: function () {            return Requestor._default();        },        assert_description_: function (aBlock, aString) {            aBlock.value().ifFalse_(block(function () {                return AssertionFailure.signal_(aString);            }));            return this;        },        perform_with_with_with_: function (aSymbol, firstObject, secondObject, thirdObject) {            primitiveDeclaration();            return this.perform_withArguments_(aSymbol, (_Array.with_with_with_(firstObject, secondObject, thirdObject)));        },        asMorph: function () {            return this.asStringMorph();        },        isMethodContext: function () {            return _false;        },        errorNonIntegerIndex: function () {            this.error_(string("only integers should be used as indices"));            return this;        },        encodePostscriptOn_: function (aStream) {            this.byteEncode_(aStream);            return this;        },        copySameFrom_: function (otherObject) {            var myInstVars; var otherInstVars;            myInstVars = this._class().allInstVarNames();            otherInstVars = otherObject._class().allInstVarNames();            myInstVars.doWithIndex_(block(function (each, index) {                var match;                return (match = otherInstVars.indexOf_(each))._greater(number(0)).ifTrue_(block(function () {                    return this.instVarAt_put_(index, (otherObject.instVarAt_(match)));                }));            }));            number(1).to_do_((this.basicSize().min_(otherObject.basicSize())), block(function (i) {                return this.basicAt_put_(i, (otherObject.basicAt_(i)));            }));            return this;        },        with_with_with_with_executeMethod_: function (arg1, arg2, arg3, arg4, compiledMethod) {            return this.withArgs_executeMethod_(array([arg1, arg2, arg3, arg4]), compiledMethod);        },        adaptToFloat_andSend_: function (rcvr, selector) {            return this.adaptToNumber_andSend_(rcvr, selector);        },        isTrait: function () {            return _false;        },        nominallyUnsent_: function (aSelectorSymbol) {            _false.ifTrue_(block(function () {                return this.flag_(string("nominallyUnsent:"));            }));            return this;        },        postCopy: function () {            return this;        },        printOnStream_: function (aStream) {            this.byteEncode_(aStream);            return this;        },        adaptToScaledDecimal_andCompare_: function (rcvr, selector) {            return this.adaptToScaledDecimal_andSend_(rcvr, selector);        },        fullScreenSize: function () {            var adj;            adj = (number(3)._times(Preferences.scrollBarWidth()))._at(number(0));            return Rectangle.origin_extent_(adj, (DisplayScreen.actualScreenSize()._minus(adj)));        },        perform_withArguments_inSuperclass_: function (selector, argArray, lookupClass) {            primitiveDeclaration();            (selector.isSymbol()).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("selector argument must be a Symbol")));            }));            (selector.numArgs()._equals(argArray.size())).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("incorrect number of arguments")));            }));            (this._class()._equals_equals(lookupClass).or_(block(function () {                return this._class().inheritsFrom_(lookupClass);            }))).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("lookupClass is not in my inheritance chain")));            }));            this.primitiveFailed();            return this;        },        methodInterfacesForCategory_inVocabulary_limitClass_: function (aCategorySymbol, aVocabulary, aLimitClass) {            var categorySymbol;            categorySymbol = aCategorySymbol.asSymbol();            (categorySymbol._equals_equals(ScriptingSystem.nameForInstanceVariablesCategory())).ifTrue_(block(function () {                nonLocalReturn(this.methodInterfacesForInstanceVariablesCategoryIn_(aVocabulary));            }));            (categorySymbol._equals_equals(ScriptingSystem.nameForScriptsCategory())).ifTrue_(block(function () {                nonLocalReturn(this.methodInterfacesForScriptsCategoryIn_(aVocabulary));            }));            return this.usableMethodInterfacesIn_((aVocabulary.methodInterfacesInCategory_forInstance_ofClass_limitClass_(categorySymbol, this, this._class(), aLimitClass)));        },        printStringLimitedTo_: function (limit) {            var limitedString;            limitedString = String.streamContents_limitedTo_(block(function (s) {                return this.printOn_(s);            }), limit);            limitedString.size()._less(limit).ifTrue_(block(function () {                nonLocalReturn(limitedString);            }));            return limitedString._comma(string("...etc..."));        },        wantsDiffFeedback: function () {            return _false;        },        isCompiledMethod: function () {            return _false;        },        dependents: function () {            return this.myDependents().ifNil_(block(function () {                return array([]);            }));        },        confirm_orCancel_: function (aString, cancelBlock) {            return UIManager._default().confirm_orCancel_(aString, cancelBlock);        },        perform_orSendTo_: function (selector, otherTarget) {            return (this.respondsTo_(selector)).ifTrue_ifFalse_(block(function () {                return this.perform_(selector);            }), block(function () {                return otherTarget.perform_(selector);            }));        },        storeAt_inTempFrame_: function (offset, aContext) {            return aContext.tempAt_put_(offset, this);        },        longPrintString: function () {            var str;            str = String.streamContents_(block(function (aStream) {                return this.longPrintOn_(aStream);            }));            return str.isEmpty().ifTrue_ifFalse_(block(function () {                return this.printString()._comma(String.cr());            }), block(function () {                return str;            }));        },        asFunction_: function (aCollection) {            return (function () {                var cascadeReceiver$ = JSFunction._new();                cascadeReceiver$.add_(this);                return cascadeReceiver$.arguments_(aCollection);            }).apply(this);        },        inspectWithLabel_: function (aLabel) {            return ToolSet.inspect_label_(this, aLabel);        },        veryDeepCopyWith_: function (deepCopier) {            var _class; var index; var sub; var subAss; var _new; var uc; var sup; var has; var mine;            deepCopier.references().at_ifPresent_(this, block(function (newer) {                nonLocalReturn(newer);            }));            _class = this._class();            _class.isMeta().ifTrue_(block(function () {                nonLocalReturn(this);            }));            _new = this.clone();            (_class.isSystemDefined().not().and_(block(function () {                return deepCopier.newUniClasses();            }))).ifTrue_(block(function () {                uc = deepCopier.uniClasses().at_ifAbsent_(_class, block(function () {                    return nil;                }));                uc.ifNil_(block(function () {                    deepCopier.uniClasses().at_put_(_class, (uc = this.copyUniClassWith_(deepCopier)));                    return deepCopier.references().at_put_(_class, uc);                }));                _new = uc._new();                return _new.copyFrom_(this);            }));            deepCopier.references().at_put_(this, _new);            (_class.isVariable().and_(block(function () {                return _class.isPointers();            }))).ifTrue_(block(function () {                index = this.basicSize();                return block(function () {                    return index._greater(number(0));                }).whileTrue_(block(function () {                    sub = this.basicAt_(index);                    (subAss = deepCopier.references().associationAt_ifAbsent_(sub, block(function () {                        return nil;                    }))).ifNil_ifNotNil_(block(function () {                        return _new.basicAt_put_(index, (sub.veryDeepCopyWith_(deepCopier)));                    }), block(function () {                        return _new.basicAt_put_(index, subAss.value());                    }));                    return index = index._minus(number(1));                }));            }));            _new.veryDeepInner_(deepCopier);            sup = _class;            index = _class.instSize();            block(function () {                has = sup.compiledMethodAt_ifAbsent_(string("veryDeepInner:"), block(function () {                    return nil;                }));                has = has.ifNil_ifNotNil_(block(function () {                    return _class.isSystemDefined().not();                }), block(function () {                    return _true;                }));                mine = sup.instVarNames();                has.ifTrue_ifFalse_(block(function () {                    return index = index._minus(mine.size());                }), block(function () {                    return number(1).to_do_(mine.size(), block(function (xx) {                        sub = this.instVarAt_(index);                        (subAss = deepCopier.references().associationAt_ifAbsent_(sub, block(function () {                            return nil;                        }))).ifNil_ifNotNil_(block(function () {                            return _new.instVarAt_put_(index, (sub.veryDeepCopyWith_(deepCopier)));                        }), block(function () {                            return _new.instVarAt_put_(index, subAss.value());                        }));                        return index = index._minus(number(1));                    }));                }));                return (sup = sup.superclass())._equals_equals(nil);            }).whileFalse();            _new.rehash();            return _new;        },        browseAllImplementorsOf_: function (selectorSymbol) {            this.systemNavigation().browseAllImplementorsOf_(selectorSymbol);            return this;        },        asTextMorph: function () {            return TextMorph._new().contentsAsIs_(this.asStringOrText());        },        triggerEvent_withArguments_ifNotHandled_: function (anEventSelector, anArgumentList, anExceptionBlock) {            return (this.actionForEvent_ifAbsent_(anEventSelector, block(function () {                nonLocalReturn(anExceptionBlock.value());            }))).valueWithArguments_(anArgumentList);        },        elementTypeFor_vocabulary_: function (aStringOrSymbol, aVocabulary) {            this.flag_(string("deferred"));            return string("systemScript");        },        browseHierarchy: function () {            this.systemNavigation().browseHierarchy_(this._class());            return this;        },        drawOnCanvas_: function (aStream) {            this.flattenOnStream_(aStream);            return this;        },        assureUniClass: function () {            var anInstance;            this.belongsToUniClass().ifTrue_(block(function () {                nonLocalReturn(this);            }));            anInstance = this._class().instanceOfUniqueClass();            this.become_((this.as_(anInstance._class())));            return anInstance;        },        identityHashPrintString: function () {            return string("(")._comma(this.identityHash().printString())._comma(string(")"));        },        literalEqual_: function (other) {            return this._class()._equals_equals(other._class()).and_(block(function () {                return this._equals(other);            }));        },        purgeAllCommands: function () {            Preferences.useUndo().ifFalse_(block(function () {                nonLocalReturn(this);            }));            this.commandHistory().purgeAllCommandsSuchThat_(block(function (cmd) {                return cmd.undoTarget()._equals_equals(this);            }));            return this;        },        actionForEvent_ifAbsent_: function (anEventSelector, anExceptionBlock) {            var actions;            actions = this.actionMap().at_ifAbsent_(anEventSelector.asSymbol(), block(function () {                return nil;            }));            return actions.ifNil_(block(function () {                return anExceptionBlock.value();            }));        },        removeActionsWithReceiver_forEvent_: function (anObject, anEventSelector) {            this.removeActionsSatisfying_forEvent_(block(function (anAction) {                return anAction.receiver()._equals_equals(anObject);            }), anEventSelector);            return this;        },        copyTwoLevel: function () {            var newObject; var _class; var index;            _class = this._class();            newObject = this.clone();            newObject._equals_equals(this).ifTrue_(block(function () {                nonLocalReturn(this);            }));            _class.isVariable().ifTrue_(block(function () {                index = this.basicSize();                return block(function () {                    return index._greater(number(0));                }).whileTrue_(block(function () {                    newObject.basicAt_put_(index, (this.basicAt_(index)).shallowCopy());                    return index = index._minus(number(1));                }));            }));            index = _class.instSize();            block(function () {                return index._greater(number(0));            }).whileTrue_(block(function () {                newObject.instVarAt_put_(index, (this.instVarAt_(index)).shallowCopy());                return index = index._minus(number(1));            }));            return newObject;        },        traitConflict: function () {            this.error_(string("A class or trait does not properly resolve a conflict between multiple traits it uses."));            return this;        },        renameTo_: function (newName) {            return this;        },        wantsStepsIn_: function (aSystemWindow) {            return this.wantsSteps();        },        isWindowForModel_: function (aModel) {            return _false;        },        isText: function () {            return _false;        },        actionMap: function () {            return EventManager.actionMapFor_(this);        },        noteSelectionIndex_for_: function (anInteger, aSymbol) {            return this;        },        addInstanceVarNamed_withValue_: function (aName, aValue) {            this._class().addInstVarName_(aName.asString());            this.instVarAt_put_(this._class().instSize(), aValue);            return this;        },        contentType: function () {            return MIMEDocument.defaultContentType();        },        primitiveFailed: function () {            this.primitiveFailed_(THIS_CONTEXT.sender().selector());            return this;        },        hasHaltCount: function () {            return this._class().environment().includesKey_(string("HaltCount"));        },        isBlock: function () {            return _false;        },        isRectangle: function () {            return _false;        },        graphicForViewerTab: function () {            return ScriptingSystem.formAtKey_(string("Image"));        },        greaseDeprecatedApi_details_: function (apiString, detailsString) {            (function () {                var cascadeReceiver$ = GRDeprecatedApiNotification._new();                cascadeReceiver$.details_(detailsString);                return cascadeReceiver$.signal_(apiString);            }).apply(this);            return this;        },        chasePointers: function () {            PointerFinder.on_(this);            return this;        },        _class: function () {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        executeMethod_: function (compiledMethod) {            return this.withArgs_executeMethod_(array([]), compiledMethod);        },        stepTime: function () {            return number(1000);        },        _minus_greater: function (anObject) {            return Association.basicNew().key_value_(this, anObject);        },        release: function () {            this.releaseActionMap();            return this;        },        when_send_to_: function (anEventSelector, aMessageSelector, anObject) {            this.when_evaluate_(anEventSelector, (WeakMessageSend.receiver_selector_(anObject, aMessageSelector)));            return this;        },        capturedState: function () {            return this.shallowCopy();        },        presenter: function () {            return this.currentWorld().presenter();        },        currentVocabulary: function () {            return Project.current().currentVocabulary();        },        tilePhrasesForSelectorList_inViewer_: function (aList, aViewer) {            var interfaces; var aVocab;            aVocab = aViewer.currentVocabulary();            interfaces = this.methodInterfacesInPresentationOrderFrom_forCategory_((aList.collect_(block(function (aSel) {                return aVocab.methodInterfaceForSelector_class_(aSel, this._class());            }))), string("search"));            return this.tilePhrasesForMethodInterfaces_inViewer_(interfaces, aViewer);        },        beViewed: function () {            this.uniqueNameForReference();            this.presenter().viewObject_(this);            return this;        },        caseOf_otherwise_: function (aBlockAssociationCollection, aBlock) {            aBlockAssociationCollection.associationsDo_(block(function (assoc) {                return (assoc.key().value()._equals(this)).ifTrue_(block(function () {                    nonLocalReturn(assoc.value().value());                }));            }));            return aBlock.value();        },        hasContentsInExplorer: function () {            return this.basicSize()._greater(number(0)).or_(block(function () {                return this._class().allInstVarNames().isEmpty().not();            }));        },        isPlayer: function () {            return _false;        },        windowReqNewLabel_: function (labelString) {            return _true;        },        asJavascript: function () {            return String.streamContents_(block(function (stream) {                return this.javascriptOn_(stream);            }));        },        actionSequenceForEvent_: function (anEventSelector) {            return (this.actionMap().at_ifAbsent_(anEventSelector.asSymbol(), block(function () {                nonLocalReturn(WeakActionSequence._new());            }))).asActionSequence();        },        canDiscardEdits: function () {            this.dependents().do_without_(block(function (each) {                return each.canDiscardEdits().ifFalse_(block(function () {                    nonLocalReturn(_false);                }));            }), this);            return _true;        },        oopString: function () {            return this.asOop().printString();        },        rememberUndoableAction_named_: function (actionBlock, caption) {            var cmd; var result;            cmd = Command._new().cmdWording_(caption);            cmd.undoTarget_selector_argument_(this, string("undoFromCapturedState:"), this.capturedState());            result = actionBlock.value();            cmd.redoTarget_selector_argument_(this, string("redoFromCapturedState:"), this.capturedState());            this.rememberCommand_(cmd);            return result;        },        respondsTo_: function (aSymbol) {            return this._class().canUnderstand_(aSymbol);        },        removeActionsForEvent_: function (anEventSelector) {            var map;            map = this.actionMap();            map.removeKey_ifAbsent_(anEventSelector.asSymbol(), block(function () {;            }));            map.isEmpty().ifTrue_(block(function () {                return this.releaseActionMap();            }));            return this;        },        inspectorFields: function () {            var members;            members = WriteStream.on_(_Array._new());            this._class().allInstVarNames().keysAndValuesDo_(block(function (index, each) {                return members.nextPut_(each._minus_greater((this.instVarAt_(index))));            }));            this._class().isVariable().ifTrue_(block(function () {                return number(1).to_do_(this.basicSize(), block(function (index) {                    return members.nextPut_(index._minus_greater((this.basicAt_(index))));                }));            }));            return members.contents();        },        eToyStreamedRepresentationNotifying_: function (aWidget) {            var outData;            block(function () {                return outData = SmartRefStream.streamedRepresentationOf_(this);            }).on_do_(ProgressInitiationException, block(function (ex) {                return ex.sendNotificationsTo_(block(function (min, max, curr) {                    return aWidget.ifNotNil_(block(function () {                        return aWidget.flashIndicator_(string("working"));                    }));                }));            }));            return outData;        },        rootStubInImageSegment_: function (imageSegment) {            return ImageSegmentRootStub._new().xxSuperclass_format_segment_(nil, nil, imageSegment);        },        species: function () {            primitiveDeclaration();            return this._class();        },        costumes: function () {            return nil;        },        convertToCurrentVersion_refStream_: function (varDict, smartRefStrm) {            return this;        },        isVariableBinding: function () {            return _false;        },        showDiffs: function () {            return _false;        },        adaptToFraction_andCompare_: function (rcvr, selector) {            return this.adaptToFraction_andSend_(rcvr, selector);        },        bindWithTemp_: function (aBlock) {            return aBlock.value_value_(this, nil);        },        initialDeepCopierSize: function () {            return number(4096);        },        setHaltCountTo_: function (_int) {            Smalltalk.at_put_(string("HaltCount"), _int);            return this;        },        changed: function () {            this.changed_(this);            return this;        },        doesNotUnderstand_: function (aMessage) {            var exception; var resumeValue;            (Preferences.autoAccessors().and_(block(function () {                return this.tryToDefineVariableAccess_(aMessage);            }))).ifTrue_(block(function () {                nonLocalReturn(aMessage.sentTo_(this));            }));            (function () {                var cascadeReceiver$ = (exception = MessageNotUnderstood._new());                cascadeReceiver$.message_(aMessage);                return cascadeReceiver$.receiver_(this);            }).apply(this);            resumeValue = exception.signal();            return exception.reachedDefaultHandler().ifTrue_ifFalse_(block(function () {                return aMessage.sentTo_(this);            }), block(function () {                return resumeValue;            }));        },        clearHaltOnce: function () {            Smalltalk.at_put_(string("HaltOnce"), _false);            return this;        },        confirm_: function (queryString) {            return UIManager._default().confirm_(queryString);        },        renameInternal_: function (newName) {            return nil;        },        toggleHaltOnce: function () {            this.haltOnceEnabled().ifTrue_ifFalse_(block(function () {                return this.clearHaltOnce();            }), block(function () {                return this.setHaltOnce();            }));            return this;        },        doExpiredHaltCount: function () {            this.clearHaltOnce();            this.removeHaltCount();            this.halt();            return this;        },        selfWrittenAsMe: function () {            return this;        },        storeOn_: function (aStream) {            aStream.nextPut_(character("("));            this._class().isVariable().ifTrue_ifFalse_(block(function () {                return (function () {                    var cascadeReceiver$ = aStream;                    cascadeReceiver$.nextPutAll_(string("(")._comma(this._class().name())._comma(string(" basicNew: ")));                    cascadeReceiver$.store_(this.basicSize());                    return cascadeReceiver$.nextPutAll_(string(") "));                }).apply(this);            }), block(function () {                return aStream.nextPutAll_(this._class().name()._comma(string(" basicNew")));            }));            number(1).to_do_(this._class().instSize(), block(function (i) {                return (function () {                    var cascadeReceiver$ = aStream;                    cascadeReceiver$.nextPutAll_(string(" instVarAt: "));                    cascadeReceiver$.store_(i);                    cascadeReceiver$.nextPutAll_(string(" put: "));                    cascadeReceiver$.store_((this.instVarAt_(i)));                    return cascadeReceiver$.nextPut_(character(";"));                }).apply(this);            }));            number(1).to_do_(this.basicSize(), block(function (i) {                return (function () {                    var cascadeReceiver$ = aStream;                    cascadeReceiver$.nextPutAll_(string(" basicAt: "));                    cascadeReceiver$.store_(i);                    cascadeReceiver$.nextPutAll_(string(" put: "));                    cascadeReceiver$.store_((this.basicAt_(i)));                    return cascadeReceiver$.nextPut_(character(";"));                }).apply(this);            }));            aStream.nextPutAll_(string(" yourself)"));            return this;        },        commandHistory: function () {            var w;            (w = this.currentWorld()).ifNotNil_(block(function () {                nonLocalReturn(w.commandHistory());            }));            return CommandHistory._new();        },        caseError: function () {            this.error_(string("Case not found (")._comma(this.printString())._comma(string("), and no otherwise clause")));            return this;        },        saveOnFile: function () {            var aFileName; var fileStream;            aFileName = this._class().name().asFileName();            aFileName = UIManager._default().request_initialAnswer_(string("File name?").translated(), aFileName);            aFileName.size()._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(Beeper.beep());            }));            fileStream = FileStream.newFileNamed_(aFileName.asFileName());            fileStream.fileOutClass_andObject_(nil, this);            return this;        },        stringForReadout: function () {            return this.stringRepresentation();        },        scriptPerformer: function () {            return this;        },        dpsTrace_levels_withContext_: function (reportObject, anInt, currentContext) {            var reportString; var context; var displayCount;            reportString = (reportObject.respondsTo_(string("asString"))).ifTrue_ifFalse_(block(function () {                return reportObject.asString();            }), block(function () {                return reportObject.printString();            }));            (Smalltalk.at_ifAbsent_(string("Decompiler"), block(function () {                return nil;            }))).ifNil_ifNotNil_(block(function () {                return (function () {                    var cascadeReceiver$ = Transcript;                    cascadeReceiver$.cr();                    return cascadeReceiver$.show_(reportString);                }).apply(this);            }), block(function () {                context = currentContext;                displayCount = anInt._greater(number(1));                return number(1).to_do_(anInt, block(function (count) {                    Transcript.cr();                    displayCount.ifTrue_(block(function () {                        return Transcript.show_(count.printString()._comma(string(": ")));                    }));                    return reportString.notNil().ifTrue_ifFalse_(block(function () {                        Transcript.show_(context.home()._class().name()._comma(string("/"))._comma(context.sender().selector())._comma(string(" ("))._comma(reportString)._comma(string(")")));                        context = context.sender();                        return reportString = nil;                    }), block(function () {                        return (context.notNil().and_(block(function () {                            return (context = context.sender()).notNil();                        }))).ifTrue_(block(function () {                            return Transcript.show_(context.receiver()._class().name()._comma(string("/"))._comma(context.selector()));                        }));                    }));                }));            }));            return this;        },        isScriptEditorMorph: function () {            return _false;        },        isContext: function () {            return _false;        },        inspectUntilCount_: function (_int) {            this.haltOnceEnabled().ifTrue_(block(function () {                return this.hasHaltCount().ifTrue_ifFalse_(block(function () {                    return this.decrementAndCheckHaltCount().ifTrue_ifFalse_(block(function () {                        return this.doExpiredInspectCount();                    }), block(function () {                        return this.inspect();                    }));                }), block(function () {                    return _int._equals(number(1)).ifTrue_ifFalse_(block(function () {                        return this.doExpiredInspectCount();                    }), block(function () {                        return this.setHaltCountTo_(_int._minus(number(1)));                    }));                }));            }));            return this;        },        adaptToInteger_andSend_: function (rcvr, selector) {            return this.adaptToNumber_andSend_(rcvr, selector);        },        uniqueNameForReference: function () {            var aName; var stem; var knownClassVars;            (aName = this.uniqueNameForReferenceOrNil()).ifNotNil_(block(function () {                nonLocalReturn(aName);            }));            (stem = this.knownName()).ifNil_(block(function () {                return stem = this.defaultNameStemForInstances().asString();            }));            stem = stem.select_(block(function (ch) {                return ch.isLetter().or_(block(function () {                    return ch.isDigit();                }));            }));            stem.size()._equals(number(0)).ifTrue_(block(function () {                return stem = string("A");            }));            stem.first().isLetter().ifFalse_(block(function () {                return stem = string("A")._comma(stem);            }));            stem = stem.capitalized();            knownClassVars = ScriptingSystem.allKnownClassVariableNames();            aName = Utilities.keyLike_satisfying_(stem, block(function (jinaLake) {                var nameSym;                nameSym = jinaLake.asSymbol();                return ((References.includesKey_(nameSym)).not().and_(block(function () {                    return (Smalltalk.includesKey_(nameSym)).not();                }))).and_(block(function () {                    return (knownClassVars.includes_(nameSym)).not();                }));            }));            References.at_put_((aName = aName.asSymbol()), this);            return aName;        },        isUniversalTiles: function () {            return Preferences.universalTiles();        },        objectRepresented: function () {            return this;        },        isHeap: function () {            return _false;        },        instVarAt_: function (index) {            primitiveDeclaration();            return this.basicAt_(index._minus(this._class().instSize()));        },        removeActionsWithReceiver_: function (anObject) {            this.actionMap().copy().keysDo_(block(function (eachEventSelector) {                return this.removeActionsSatisfying_forEvent_(block(function (anAction) {                    return anAction.receiver()._equals_equals(anObject);                }), eachEventSelector);            }));            return this;        },        windowIsClosing: function () {            return this;        },        isThisEverCalled_: function (msg) {            this.halt_(string("This is indeed called: ")._comma(msg.printString()));            return this;        },        handledListVerification: function () {            return _false;        },        withoutListWrapper: function () {            return this;        },        nameForViewer: function () {            var aName;            (aName = this.uniqueNameForReferenceOrNil()).ifNotNil_(block(function () {                nonLocalReturn(aName);            }));            (aName = this.knownName()).ifNotNil_(block(function () {                nonLocalReturn(aName);            }));            return block(function () {                return (this.asString().copyWithout_(Character.cr())).truncateTo_(number(27));            }).ifError_(block(function (msg, rcvr) {                return this._class().name().printString();            }));        },        notify_at_: function (aString, location) {            this.notify_(aString);            return this;        },        asJson: function () {            return String.streamContents_(block(function (stream) {                return this.jsonOn_(stream);            }));        },        retryWithGC_until_: function (execBlock, testBlock) {            var blockValue;            blockValue = execBlock.value();            (testBlock.value_(blockValue)).ifTrue_(block(function () {                nonLocalReturn(blockValue);            }));            Smalltalk.garbageCollectMost();            blockValue = execBlock.value();            (testBlock.value_(blockValue)).ifTrue_(block(function () {                nonLocalReturn(blockValue);            }));            Smalltalk.garbageCollect();            return execBlock.value();        },        isString: function () {            return _false;        },        value: function () {            return this;        },        explore: function () {            return ToolSet.explore_(this);        },        exploreAndYourself: function () {            this.explore();            return this;        },        logExit: function () {            (function () {                var cascadeReceiver$ = Transcript;                cascadeReceiver$.show_(string("Exited ")._comma(THIS_CONTEXT.sender().printString()));                return cascadeReceiver$.cr();            }).apply(this);            return this;        },        veryDeepInner_: function (deepCopier) {            return this;        },        ifNotNilDo_: function (aBlock) {            return aBlock.value_(this);        },        asString: function () {            return this.printString();        },        outboundPointers: function () {            var collection;            collection = OrderedCollection._new();            this.outboundPointersDo_(block(function (ea) {                return collection.add_(ea);            }));            return collection;        },        traversableIndexableVarIndexes: function () {            return number(1).to_(this.basicSize());        },        hasMultipleExecutors: function () {            return _false;        },        inspectOnce: function () {            this.haltOnceEnabled().ifTrue_(block(function () {                this.clearHaltOnce();                nonLocalReturn(this.inspect());            }));            return this;        },        currentHand: function () {            return ActiveHand.ifNil_(block(function () {                return this.currentWorld().primaryHand();            }));        },        withArgs_executeMethod_: function (argArray, compiledMethod) {            primitiveDeclaration();            var selector;            selector = Symbol._new();            this._class().addSelectorSilently_withMethod_(selector, compiledMethod);            return block(function () {                return this.perform_withArguments_(selector, argArray);            }).ensure_(block(function () {                return this._class().basicRemoveSelector_(selector);            }));        },        indexIfCompact: function () {            return number(0);        },        assert_descriptionBlock_: function (aBlock, descriptionBlock) {            aBlock.value().ifFalse_(block(function () {                return AssertionFailure.signal_(descriptionBlock.value().asString());            }));            return this;        },        isPseudoContext: function () {            return _false;        },        isFraction: function () {            return _false;        },        objectForDataStream_: function (refStrm) {            return this;        },        offerViewerMenuForEvt_morph_: function (anEvent, aMorph) {            this.offerViewerMenuFor_event_((aMorph.ownerThatIsA_(StandardViewer)), anEvent);            return this;        },        refineRedoTarget_selector_arguments_in_: function (target, aSymbol, _arguments, refineBlock) {            return refineBlock.value_value_value_(target, aSymbol, _arguments);        },        categoriesForVocabulary_limitClass_: function (aVocabulary, aLimitClass) {            return aVocabulary.categoryListForInstance_ofClass_limitClass_(this, this._class(), aLimitClass);        },        isKindOf_orOf_: function (aClass, anotherClass) {            return (this.isKindOf_(aClass)).or_(block(function () {                return this.isKindOf_(anotherClass);            }));        },        name: function () {            return this.printString();        },        hasUnacceptedEdits: function () {            this.dependents().do_without_(block(function (each) {                return each.hasUnacceptedEdits().ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }), this);            return _false;        },        wantsDroppedMorph_event_inMorph_: function (aMorph, anEvent, destinationLM) {            return _false;        },        evaluateUnloggedForSelf_: function (aCodeString) {            return Compiler.evaluate_for_logged_(aCodeString, this, _false);        },        inboundPointersExcluding_: function (objectsToExclude) {            var anObj; var pointers; var objectsToAlwaysExclude;            Smalltalk.garbageCollect();            pointers = OrderedCollection.new_(number(1000));            anObj = this.someObject();            block(function () {                return number(0)._equals_equals(anObj);            }).whileFalse_(block(function () {                anObj.isInMemory().ifTrue_(block(function () {                    return ((anObj.instVarsInclude_(this)).or_(block(function () {                        return anObj._class()._equals_equals(this);                    }))).ifTrue_(block(function () {                        return pointers.add_(anObj);                    }));                }));                return anObj = anObj.nextObject();            }));            objectsToAlwaysExclude = array([pointers.collector(), THIS_CONTEXT, THIS_CONTEXT.sender(), THIS_CONTEXT.sender().sender(), objectsToExclude]);            return pointers.removeAllSuchThat_(block(function (ea) {                return (objectsToAlwaysExclude.identityIncludes_(ea)).or_(block(function () {                    return objectsToExclude.identityIncludes_(ea);                }));            }));        },        evaluate_wheneverChangeIn_: function (actionBlock, aspectBlock) {            var viewerThenObject; var objectThenViewer;            objectThenViewer = this;            viewerThenObject = ObjectViewer.on_(objectThenViewer);            objectThenViewer.become_(viewerThenObject);            objectThenViewer.xxxViewedObject_evaluate_wheneverChangeIn_(viewerThenObject, actionBlock, aspectBlock);            return this;        },        asStringOrText: function () {            return this.printString();        },        at_: function (index) {            primitiveDeclaration();            index.isInteger().ifTrue_(block(function () {                return this._class().isVariable().ifTrue_ifFalse_(block(function () {                    return this.errorSubscriptBounds_(index);                }), block(function () {                    return this.errorNotIndexable();                }));            }));            index.isNumber().ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.at_(index.asInteger()));            }), block(function () {                return this.errorNonIntegerIndex();            }));            return this;        },        as_: function (aSimilarClass) {            return aSimilarClass.newFrom_(this);        },        asOop: function () {            return this.identityHash();        },        notYetImplemented: function () {            NotYetImplemented.signal();            return this;        },        currentWorld: function () {            return ActiveWorld.ifNil_(block(function () {                return World;            }));        },        perform_withEnoughArguments_: function (selector, anArray) {            var numArgs; var args;            numArgs = selector.numArgs();            anArray.size()._equals_equals(numArgs).ifTrue_(block(function () {                nonLocalReturn(this.perform_withArguments_(selector, anArray.asArray()));            }));            args = _Array.new_(numArgs);            args.replaceFrom_to_with_startingAt_(number(1), (anArray.size().min_(args.size())), anArray, number(1));            return this.perform_withArguments_(selector, args);        },        logExecution: function () {            (function () {                var cascadeReceiver$ = Transcript;                cascadeReceiver$.show_(string("Executing ")._comma(THIS_CONTEXT.sender().printString()));                return cascadeReceiver$.cr();            }).apply(this);            return this;        },        copy: function () {            return this.shallowCopy().postCopy();        },        isJavascript: function () {            return _false;        },        decrementHaltCount: function () {            var counter;            counter = Smalltalk.at_ifAbsent_(string("HaltCount"), block(function () {                return number(0);            }));            counter._greater(number(0)).ifTrue_(block(function () {                counter = counter._minus(number(1));                return this.setHaltCountTo_(counter);            }));            return this;        },        categoriesForViewer_: function (aViewer) {            return aViewer.currentVocabulary().categoryListForInstance_ofClass_limitClass_(this, this._class(), aViewer.limitClass());        },        in_: function (aBlock) {            return aBlock.value_(this);        },        launchTileToRefer: function () {            this.currentHand().attachMorph_(this.tileToRefer());            return this;        },        instanceVariableValues: function () {            var c;            c = OrderedCollection._new();            this._class().superclass().instSize()._plus(number(1)).to_do_(this._class().instSize(), block(function (i) {                return c.add_((this.instVarAt_(i)));            }));            return c;        },        uniqueNameForReferenceFrom_: function (proposedName) {            var aName; var stem;            proposedName._equals(this.uniqueNameForReferenceOrNil()).ifTrue_(block(function () {                nonLocalReturn(proposedName);            }));            stem = proposedName.select_(block(function (ch) {                return ch.isLetter().or_(block(function () {                    return ch.isDigit();                }));            }));            stem.size()._equals(number(0)).ifTrue_(block(function () {                return stem = string("A");            }));            stem.first().isLetter().ifFalse_(block(function () {                return stem = string("A")._comma(stem);            }));            stem = stem.capitalized();            aName = Utilities.keyLike_satisfying_(stem, block(function (jinaLake) {                var nameSym; var okay;                nameSym = jinaLake.asSymbol();                okay = _true;                (this._class().bindingOf_(nameSym)).ifNotNil_(block(function () {                    return okay = _false;                }));                return okay;            }));            return aName.asSymbol();        },        executor: function () {            return this.shallowCopy().actAsExecutor();        },        chooseNewNameForReference: function () {            var nameSym; var current; var newName;            current = References.keyAtValue_ifAbsent_(this, block(function () {                nonLocalReturn(this.error_(string("not found in References")));            }));            newName = UIManager._default().request_initialAnswer_(string("Please enter new name"), current);            newName.isEmpty().ifTrue_(block(function () {                nonLocalReturn(nil);            }));            ((Scanner.isLiteralSymbol_(newName)).and_(block(function () {                return (newName.includes_(character(":"))).not();            }))).ifTrue_(block(function () {                nameSym = newName.capitalized().asSymbol();                return (((References.includesKey_(nameSym)).not().and_(block(function () {                    return (Smalltalk.includesKey_(nameSym)).not();                }))).and_(block(function () {                    return (ScriptingSystem.allKnownClassVariableNames().includes_(nameSym)).not();                }))).ifTrue_(block(function () {                    (References.associationAt_(current)).key_(nameSym);                    References.rehash();                    nonLocalReturn(nameSym);                }));            }));            this.inform_(string("Sorry, that name is not available."));            return nil;        },        acceptDroppingMorph_event_inMorph_: function (transferMorph, evt, dstListMorph) {            return _false;        },        perform_withArguments_: function (selector, argArray) {            primitiveDeclaration();            return this.perform_withArguments_inSuperclass_(selector, argArray, this._class());        },        instVarNamed_: function (aString) {            return this.instVarAt_((this._class().instVarIndexFor_ifAbsent_(aString.asString(), block(function () {                return this.error_(string("no such inst var"));            }))));        },        traversableInstVarIndexes: function () {            return number(1).to_(this._class().instSize());        },        haveFullProtocolBrowsed: function () {            return this.haveFullProtocolBrowsedShowingSelector_(nil);        },        isThisEverCalled: function () {            return this.isThisEverCalled_(THIS_CONTEXT.sender().printString());        },        future_: function (deltaMSecs) {            return (FutureMaker._new()).setDeltaMSecs_target_(deltaMSecs, this);        },        addModelMenuItemsTo_forMorph_hand_: function (aCustomMenu, aMorph, aHandMorph) {            return this;        },        writeOnFilterStream_: function (aStream) {            aStream.writeObject_(this);            return this;        },        storeString: function () {            return String.streamContents_(block(function (s) {                return this.storeOn_(s);            }));        },        basicInspect: function () {            return ToolSet.basicInspect_(this);        },        isTransparent: function () {            return _false;        },        restoreFromSnapshot_: function (anObject) {            this.copyFrom_(anObject);            return this;        },        doExpiredHaltCount_: function (aString) {            this.clearHaltOnce();            this.removeHaltCount();            this.halt_(aString);            return this;        },        refusesToAcceptCode: function () {            return _false;        },        halt_: function (aString) {            Halt._new().signal_(aString);            return this;        },        dragTransferType: function () {            return nil;        },        isMorphicEvent: function () {            return _false;        },        perform_: function (aSymbol) {            primitiveDeclaration();            return this.perform_withArguments_(aSymbol, (_Array.new_(number(0))));        },        updateableActionMap: function () {            return EventManager.updateableActionMapFor_(this);        },        halt: function () {            Halt.signal();            return this;        },        valueWithArguments_: function (aSequenceOfArguments) {            return this;        },        when_evaluate_: function (anEventSelector, anAction) {            var actions;            actions = this.actionSequenceForEvent_(anEventSelector);            (actions.includes_(anAction)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            this.setActionSequence_forEvent_((actions.copyWith_(anAction)), anEventSelector);            return this;        },        xxxClass: function () {            return this._class();        },        dragAnimationFor_transferMorph_: function (item, transferMorph) {            return this;        },        asStringMorph: function () {            return this.asStringOrText().asStringMorph();        },        backwardCompatibilityOnly_: function (anExplanationString) {            Preferences.showDeprecationWarnings().ifTrue_(block(function () {                return Deprecation.signal_(THIS_CONTEXT.sender().printString()._comma(string(" has been deprecated (but will be kept for compatibility). "))._comma(anExplanationString));            }));            return this;        },        selfWrittenAsThis: function () {            return this;        },        modelWakeUp: function () {            return this;        },        requirement: function () {            this.error_(string("Implicitly required method"));            return this;        },        enclosedSetElement: function () {            return this;        },        iconOrThumbnailOfSize_: function (aNumberOrPoint) {            return nil;        },        javascriptOn_: function (aStream) {            this.printOn_(aStream);            return this;        },        someObject: function () {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        redoFromCapturedState_: function (st) {            this.undoFromCapturedState_(st);            return this;        },        dpsTrace_levels_: function (reportObject, anInt) {            this.dpsTrace_levels_withContext_(reportObject, anInt, THIS_CONTEXT);            return this;        },        isComplex: function () {            return _false;        },        descriptionForPartsBin: function () {            return DescriptionForPartsBin.formalName_categoryList_documentation_globalReceiverSymbol_nativitySelector_(string("PutFormalNameHere"), array([string("PutACategoryHere"), string("MaybePutAnotherCategoryHere")]), string("Put the balloon help here"), string("PutAGlobalHere"), string("PutASelectorHere"));        },        size: function () {            primitiveDeclaration();            this._class().isVariable().ifFalse_(block(function () {                return this.errorNotIndexable();            }));            return number(0);        },        isLiteral: function () {            return _false;        },        contentsChanged: function () {            this.changed_(string("contents"));            return this;        },        notNil: function () {            return _true;        },        renameActionsWithReceiver_forEvent_toEvent_: function (anObject, anEventSelector, newEvent) {            var oldActions; var newActions;            oldActions = Set._new();            newActions = Set._new();            (this.actionSequenceForEvent_(anEventSelector)).do_(block(function (action) {                return action.receiver()._equals_equals(anObject).ifTrue_ifFalse_(block(function () {                    return oldActions.add_(anObject);                }), block(function () {                    return newActions.add_(anObject);                }));            }));            this.setActionSequence_forEvent_((ActionSequence.withAll_(newActions)), anEventSelector);            oldActions.do_(block(function (act) {                return this.when_evaluate_(newEvent, act);            }));            return this;        },        isKindOf_: function (aClass) {            this._class()._equals_equals(aClass).ifTrue_ifFalse_(block(function () {                nonLocalReturn(_true);            }), block(function () {                nonLocalReturn(this._class().inheritsFrom_(aClass));            }));            return this;        },        displayString: function () {            this.greaseDeprecatedApi_details_(string("Object>>#displayString"), string("Use #seasideString."));            return this.asString();        },        isInterval: function () {            return _false;        },        encodeOn_: function (aDocument) {            aDocument.print_(this.greaseString());            return this;        },        isConflict: function () {            return _false;        },        localeChanged: function () {            this.shouldBeImplemented();            return this;        },        setHaltOnce: function () {            Smalltalk.at_put_(string("HaltOnce"), _true);            return this;        },        okToChange: function () {            return _true;        },        isMorphicModel: function () {            return _false;        },        actionsDo_: function (aBlock) {            this.actionMap().do_(aBlock);            return this;        },        primitiveChangeClassTo_: function (anObject) {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        snapshotCopy: function () {            return this.shallowCopy();        },        shouldNotImplement: function () {            this.error_(string("This message is not appropriate for this object"));            return this;        },        flattenOnStream_: function (aStream) {            this.writeOnFilterStream_(aStream);            return this;        },        setActionSequence_forEvent_: function (actionSequence, anEventSelector) {            var action;            action = actionSequence.asMinimalRepresentation();            action.ifNil_ifNotNil_(block(function () {                return this.removeActionsForEvent_(anEventSelector);            }), block(function () {                return this.updateableActionMap().at_put_(anEventSelector.asSymbol(), action);            }));            return this;        },        stepTimeIn_: function (aSystemWindow) {            return number(1000);        },        _break: function () {            BreakPoint.signal();            return this;        },        putOn_: function (aStream) {            return aStream.nextPut_(this);        },        traverseWithMemory_seen_: function (aMemory, anIdentitySet) {            aMemory.accumulate_(this);            anIdentitySet.add_(this);            this.traversableInstVarIndexes().do_(block(function (index) {                return aMemory.traverse_value_seen_(this, (this.instVarAt_(index)), anIdentitySet);            }));            this.traversableIndexableVarIndexes().do_(block(function (index) {                return aMemory.traverse_value_seen_(this, (this.basicAt_(index)), anIdentitySet);            }));            return this;        },        errorImproperStore: function () {            this.error_(string("Improper store into indexable object"));            return this;        },        isStream: function () {            return _false;        },        isMorph: function () {            return _false;        },        longPrintOn_: function (aStream) {            this._class().allInstVarNames().doWithIndex_(block(function (title, index) {                return (function () {                    var cascadeReceiver$ = aStream;                    cascadeReceiver$.nextPutAll_(title);                    cascadeReceiver$.nextPut_(character(":"));                    cascadeReceiver$.space();                    cascadeReceiver$.tab();                    cascadeReceiver$.print_((this.instVarAt_(index)));                    return cascadeReceiver$.cr();                }).apply(this);            }));            return this;        },        undoFromCapturedState_: function (st) {            this.copyFrom_(st);            return this;        },        errorSubscriptBounds_: function (index) {            this.error_(string("subscript is out of bounds: ")._comma(index.printString()));            return this;        },        binding_: function (anObject) {            return anObject.ifNil_ifNotNil_(block(function () {                return this.removeBinding();            }), block(function () {                return Bindings.bind_to_(this, anObject);            }));        },        isPoint: function () {            return _false;        },        deprecated_block_: function (anExplanationString, aBlock) {            Preferences.showDeprecationWarnings().ifTrue_(block(function () {                return Deprecation.signal_(THIS_CONTEXT.sender().printString()._comma(string(" has been deprecated. "))._comma(anExplanationString));            }));            return aBlock.value();        },        actionForEvent_: function (anEventSelector) {            return this.actionMap().at_ifAbsent_(anEventSelector.asSymbol(), block(function () {                return nil;            }));        },        knownName: function () {            return Preferences.capitalizedReferences().ifTrue_ifFalse_(block(function () {                return References.keyAtValue_ifAbsent_(this, block(function () {                    return nil;                }));            }), block(function () {                return nil;            }));        },        selfWrittenAsIm: function () {            return this;        },        basicType: function () {            return string("Object");        },        notify_: function (aString) {            Warning.signal_(aString);            return this;        },        copyAddedStateFrom_: function (anotherObject) {            this._class().superclass().instSize()._plus(number(1)).to_do_(this._class().instSize(), block(function (index) {                return this.instVarAt_put_(index, (anotherObject.instVarAt_(index)));            }));            return this;        },        jsonOn_: function (aStream) {            this.error_(string("Override #jsonOn: to make the receiver serializeable as JSON"));            return this;        },        methodInterfacesForInstanceVariablesCategoryIn_: function (aVocabulary) {            return OrderedCollection._new();        },        at_put_: function (index, value) {            primitiveDeclaration();            index.isInteger().ifTrue_(block(function () {                return this._class().isVariable().ifTrue_ifFalse_(block(function () {                    return (index._greater_equals(number(1)).and_(block(function () {                        return index._less_equals(this.size());                    }))).ifTrue_ifFalse_(block(function () {                        return this.errorImproperStore();                    }), block(function () {                        return this.errorSubscriptBounds_(index);                    }));                }), block(function () {                    return this.errorNotIndexable();                }));            }));            index.isNumber().ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.at_put_(index.asInteger(), value));            }), block(function () {                return this.errorNonIntegerIndex();            }));            return this;        },        uniqueNameForReferenceOrNil: function () {            return References.keyAtValue_ifAbsent_(this, block(function () {                return nil;            }));        },        printWithClosureAnalysisOn_: function (aStream) {            var title;            title = this._class().name();            (function () {                var cascadeReceiver$ = aStream;                cascadeReceiver$.nextPutAll_((title.first().isVowel().ifTrue_ifFalse_(block(function () {                    return string("an ");                }), block(function () {                    return string("a ");                }))));                return cascadeReceiver$.nextPutAll_(title);            }).apply(this);            return this;        },        newTileMorphRepresentative: function () {            return TileMorph._new().setLiteral_(this);        },        futureDo_at_args_: function (aSelector, deltaMSecs, args) {            Project.current().future_do_at_args_(this, aSelector, deltaMSecs, args);            return nil;        },        primitiveError_: function (aString) {            (String.streamContents_(block(function (s) {                var context;                s.nextPutAll_(string("***System error handling failed***"));                (function () {                    var cascadeReceiver$ = s;                    cascadeReceiver$.cr();                    return cascadeReceiver$.nextPutAll_(aString);                }).apply(this);                context = THIS_CONTEXT.sender().sender();                number(20).timesRepeat_(block(function () {                    return context._equals_equals(nil).ifFalse_(block(function () {                        return (function () {                            var cascadeReceiver$ = s;                            cascadeReceiver$.cr();                            return cascadeReceiver$.print_((context = context.sender()));                        }).apply(this);                    }));                }));                (function () {                    var cascadeReceiver$ = s;                    cascadeReceiver$.cr();                    return cascadeReceiver$.nextPutAll_(string("-------------------------------"));                }).apply(this);                (function () {                    var cascadeReceiver$ = s;                    cascadeReceiver$.cr();                    return cascadeReceiver$.nextPutAll_(string("Type CR to enter an emergency evaluator."));                }).apply(this);                return (function () {                    var cascadeReceiver$ = s;                    cascadeReceiver$.cr();                    return cascadeReceiver$.nextPutAll_(string("Type any other character to restart."));                }).apply(this);            }))).displayAt_(number(0)._at(number(0)));            block(function () {                return Sensor.keyboardPressed();            }).whileFalse();            Sensor.keyboard()._equals(Character.cr()).ifTrue_(block(function () {                return Transcripter.emergencyEvaluator();            }));            Project.current().resetDisplay();            return this;        },        future: function () {            return (FutureMaker._new()).setDeltaMSecs_target_(number(0.0), this);        },        caseOf_: function (aBlockAssociationCollection) {            return this.caseOf_otherwise_(aBlockAssociationCollection, block(function () {                return this.caseError();            }));        },        labelForSelector_: function (aSymbol) {            return aSymbol.asCapitalizedPhrase();        },        breakDependents: function () {            this.myDependents_(nil);            return this;        },        updateListsAndCodeIn_: function (aWindow) {            this.canDiscardEdits().ifFalse_(block(function () {                nonLocalReturn(this);            }));            aWindow.updatablePanes().do_(block(function (aPane) {                return aPane.verifyContents();            }));            return this;        },        reportableSize: function () {            return (this.basicSize()._plus(this._class().instSize())).printString();        },        isCharacter: function () {            return _false;        },        flash: function () {            return this;        },        logEntry: function () {            (function () {                var cascadeReceiver$ = Transcript;                cascadeReceiver$.show_(string("Entered ")._comma(THIS_CONTEXT.sender().printString()));                return cascadeReceiver$.cr();            }).apply(this);            return this;        },        slotInfo: function () {            return Dictionary._new();        },        isMessageSend: function () {            return _false;        },        isUPackage: function () {            return _false;        },        veryDeepCopy: function () {            var copier; var _new;            copier = DeepCopier._new().initialize_(this.initialDeepCopierSize());            _new = this.veryDeepCopyWith_(copier);            copier.mapUniClasses();            copier.references().associationsDo_(block(function (assoc) {                return assoc.value().veryDeepFixupWith_(copier);            }));            copier.fixDependents();            return _new;        },        windowActiveOnFirstClick: function () {            return _false;        },        assert_: function (aBlock) {            aBlock.value().ifFalse_(block(function () {                return AssertionFailure.signal_(string("Assertion failed"));            }));            return this;        },        asDraggableMorph: function () {            return (function () {                var cascadeReceiver$ = (StringMorph.contents_(((this.respondsTo_(string("dragLabel"))).ifTrue_ifFalse_(block(function () {                    return this.dragLabel();                }), block(function () {                    return this.printString();                })))));                cascadeReceiver$.color_(Color.white());                return cascadeReceiver$.yourself();            }).apply(this);        },        infoFor_inViewer_: function (anElement, aViewer) {            var aMenu; var elementType;            elementType = this.elementTypeFor_vocabulary_(anElement, aViewer.currentVocabulary());            ((elementType._equals(string("systemSlot")))._pipe((elementType._equals_equals(string("userSlot"))))).ifTrue_(block(function () {                nonLocalReturn(this.slotInfoButtonHitFor_inViewer_(anElement, aViewer));            }));            this.flag_(string("deferred"));            aMenu = MenuMorph._new().defaultTarget_(aViewer);            array([array([string("implementors"), string("browseImplementorsOf:")]), array([string("senders"), string("browseSendersOf:")]), array([string("versions"), string("browseVersionsOf:")]), string("-"), array([string("browse full"), string("browseMethodFull:")]), array([string("inheritance"), string("browseMethodInheritance:")]), string("-"), array([string("about this method"), string("aboutMethod:")])]).do_(block(function (pair) {                return pair._equals(string("-")).ifTrue_ifFalse_(block(function () {                    return aMenu.addLine();                }), block(function () {                    return aMenu.add_target_selector_argument_(pair.first(), aViewer, pair.second(), anElement);                }));            }));            aMenu.addLine();            aMenu.defaultTarget_(this);            array([array([string("destroy script"), string("removeScript:")]), array([string("rename script"), string("renameScript:")]), array([string("pacify script"), string("pacifyScript:")])]).do_(block(function (pair) {                return aMenu.add_target_selector_argument_(pair.first(), this, pair.second(), anElement);            }));            aMenu.addLine();            aMenu.add_target_selector_argument_(string("show categories...."), aViewer, string("showCategoriesFor:"), anElement);            aMenu.items().size()._equals(number(0)).ifTrue_(block(function () {                return aMenu.add_action_(string("ok"), nil);            }));            aMenu.addTitle_(anElement.asString()._comma(string(" ("))._comma(elementType)._comma(string(")")));            aMenu.popUpInWorld_(this.currentWorld());            return this;        },        fullDrawPostscriptOn_: function (aStream) {            return aStream.fullDraw_(this);        },        deepCopy: function () {            var newObject; var _class; var index;            _class = this._class();            (_class._equals_equals(_Object)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            _class.isVariable().ifTrue_ifFalse_(block(function () {                index = this.basicSize();                newObject = _class.basicNew_(index);                return block(function () {                    return index._greater(number(0));                }).whileTrue_(block(function () {                    newObject.basicAt_put_(index, (this.basicAt_(index)).deepCopy());                    return index = index._minus(number(1));                }));            }), block(function () {                return newObject = _class.basicNew();            }));            index = _class.instSize();            block(function () {                return index._greater(number(0));            }).whileTrue_(block(function () {                newObject.instVarAt_put_(index, (this.instVarAt_(index)).deepCopy());                return index = index._minus(number(1));            }));            return newObject;        },        inspectOnCount_: function (_int) {            this.haltOnceEnabled().ifTrue_(block(function () {                return this.hasHaltCount().ifTrue_ifFalse_(block(function () {                    return this.decrementAndCheckHaltCount().ifTrue_(block(function () {                        return this.doExpiredInspectCount();                    }));                }), block(function () {                    return _int._equals(number(1)).ifTrue_ifFalse_(block(function () {                        return this.doExpiredInspectCount();                    }), block(function () {                        return this.setHaltCountTo_(_int._minus(number(1)));                    }));                }));            }));            return this;        },        shallowCopy: function () {            primitiveDeclaration();            var _class; var newObject; var index;            _class = this._class();            _class.isVariable().ifTrue_ifFalse_(block(function () {                index = this.basicSize();                newObject = _class.basicNew_(index);                return block(function () {                    return index._greater(number(0));                }).whileTrue_(block(function () {                    newObject.basicAt_put_(index, (this.basicAt_(index)));                    return index = index._minus(number(1));                }));            }), block(function () {                return newObject = _class.basicNew();            }));            index = _class.instSize();            block(function () {                return index._greater(number(0));            }).whileTrue_(block(function () {                newObject.instVarAt_put_(index, (this.instVarAt_(index)));                return index = index._minus(number(1));            }));            return newObject;        },        createActionMap: function () {            return IdentityDictionary._new();        },        triggerEvent_with_: function (anEventSelector, anObject) {            return this.triggerEvent_withArguments_(anEventSelector, (_Array.with_(anObject)));        },        storeDataOn_: function (aDataStream) {            var cntInstVars; var cntIndexedVars;            cntInstVars = this._class().instSize();            cntIndexedVars = this.basicSize();            aDataStream.beginInstance_size_(this._class(), cntInstVars._plus(cntIndexedVars));            number(1).to_do_(cntInstVars, block(function (i) {                return aDataStream.nextPut_((this.instVarAt_(i)));            }));            ((aDataStream.byteStream()._class()._equals_equals(DummyStream)).and_(block(function () {                return this._class().isBits();            }))).ifFalse_(block(function () {                return number(1).to_do_(cntIndexedVars, block(function (i) {                    return aDataStream.nextPut_((this.basicAt_(i)));                }));            }));            return this;        },        adaptToFloat_andCompare_: function (rcvr, selector) {            return this.adaptToFloat_andSend_(rcvr, selector);        },        veryDeepCopyUsing_: function (copier) {            var _new; var refs;            _new = this.veryDeepCopyWith_(copier);            copier.mapUniClasses();            copier.references().associationsDo_(block(function (assoc) {                return assoc.value().veryDeepFixupWith_(copier);            }));            refs = copier.references();            DependentsFields.associationsDo_(block(function (pair) {                return pair.value().do_(block(function (dep) {                    var newDep; var newModel;                    return (newDep = refs.at_ifAbsent_(dep, block(function () {                        return nil;                    }))).ifNotNil_(block(function () {                        newModel = refs.at_ifAbsent_(pair.key(), block(function () {                            return pair.key();                        }));                        return newModel.addDependent_(newDep);                    }));                }));            }));            return _new;        },        selfWrittenAsMy: function () {            return this;        },        isPlayerLike: function () {            return _false;        },        defaultLabelForInspector: function () {            return this._class().name();        },        becomeForward_: function (otherObject) {            (_Array.with_(this)).elementsForwardIdentityTo_((_Array.with_(otherObject)));            return this;        },        longPrintStringLimitedTo_: function (aLimitValue) {            var str;            str = String.streamContents_(block(function (aStream) {                return this.longPrintOn_limitedTo_indent_(aStream, aLimitValue, number(0));            }));            return str.isEmpty().ifTrue_ifFalse_(block(function () {                return this.printString()._comma(String.cr());            }), block(function () {                return str;            }));        },        selfWrittenAsIll: function () {            return this;        },        asOrderedCollection: function () {            return OrderedCollection.with_(this);        },        printDirectlyToDisplay: function () {            this.asString().displayAt_(number(0)._at(number(100)));            return this;        },        externalName: function () {            return this.nameForViewer();        },        browseAllCallsOn_: function (selectorSymbol) {            this.systemNavigation().browseAllCallsOn_(selectorSymbol);            return this;        },        updateThresholdForGraphicInViewerTab: function () {            return number(20);        },        basicAt_put_: function (index, value) {            primitiveDeclaration();            index.isInteger().ifTrue_(block(function () {                return (index._greater_equals(number(1)).and_(block(function () {                    return index._less_equals(this.size());                }))).ifTrue_ifFalse_(block(function () {                    return this.errorImproperStore();                }), block(function () {                    return this.errorSubscriptBounds_(index);                }));            }));            index.isNumber().ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.basicAt_put_(index.asInteger(), value));            }), block(function () {                return this.errorNonIntegerIndex();            }));            return this;        },        at_modify_: function (index, aBlock) {            return this.at_put_(index, (aBlock.value_((this.at_(index)))));        },        myDependents: function () {            return DependentsFields.at_ifAbsent_(this, block(function () {;            }));        },        isClosure: function () {            return _false;        },        asActionSequence: function () {            return WeakActionSequence.with_(this);        },        deprecated_: function (anExplanationString) {            Preferences.showDeprecationWarnings().ifTrue_(block(function () {                return Deprecation.signal_(THIS_CONTEXT.sender().printString()._comma(string(" has been deprecated. "))._comma(anExplanationString));            }));            return this;        },        stringRepresentation: function () {            return this.printString();        },        stepIn_: function (aWindow) {            return this.step();        },        asHtmlDocumentForRequest_: function (aNetworkRequest) {            this.error_((string("The requested object (")._comma(this.asString())._comma(string("), could not be converted into HTML for your browser."))));            return this;        },        doExpiredInspectCount: function () {            this.clearHaltOnce();            this.removeHaltCount();            this.inspect();            return this;        },        copyFrom_: function (anotherObject) {            primitiveDeclaration();            var mine; var his;            mine = this._class().allInstVarNames();            his = anotherObject._class().allInstVarNames();            number(1).to_do_((mine.size().min_(his.size())), block(function (ind) {                return (mine.at_(ind))._equals((his.at_(ind))).ifTrue_(block(function () {                    return this.instVarAt_put_(ind, (anotherObject.instVarAt_(ind)));                }));            }));            this._class().isVariable()._and(anotherObject._class().isVariable()).ifTrue_(block(function () {                return number(1).to_do_((this.basicSize().min_(anotherObject.basicSize())), block(function (ind) {                    return this.basicAt_put_(ind, (anotherObject.basicAt_(ind)));                }));            }));            return this;        },        finalizationRegistry: function () {            return WeakRegistry._default();        },        adaptToInteger_andCompare_: function (rcvr, selector) {            return this.adaptToInteger_andSend_(rcvr, selector);        },        fullPrintString: function () {            return String.streamContents_(block(function (s) {                return this.printOn_(s);            }));        },        changed_: function (aParameter) {            this.dependents().do_(block(function (aDependent) {                return aDependent.update_(aParameter);            }));            return this;        },        isBehavior: function () {            return _false;        },        veryDeepCopySibling: function () {            var copier; var _new;            copier = DeepCopier._new().initialize_(this.initialDeepCopierSize());            copier.newUniClasses_(_false);            _new = this.veryDeepCopyWith_(copier);            copier.mapUniClasses();            copier.references().associationsDo_(block(function (assoc) {                return assoc.value().veryDeepFixupWith_(copier);            }));            copier.fixDependents();            return _new;        },        releaseActionMap: function () {            EventManager.releaseActionMapFor_(this);            return this;        },        removeActionsSatisfying_: function (aBlock) {            this.actionMap().keys().do_(block(function (eachEventSelector) {                return this.removeActionsSatisfying_forEvent_(aBlock, eachEventSelector);            }));            return this;        },        ifNil_ifNotNilDo_: function (nilBlock, aBlock) {            return aBlock.value_(this);        },        usableMethodInterfacesIn_: function (aListOfMethodInterfaces) {            return aListOfMethodInterfaces;        },        refineUndoTarget_selector_arguments_in_: function (target, aSymbol, _arguments, refineBlock) {            return refineBlock.value_value_value_(target, aSymbol, _arguments);        },        basicSize: function () {            primitiveDeclaration();            return number(0);        },        isArray: function () {            return _false;        },        perform_with_with_: function (aSymbol, firstObject, secondObject) {            primitiveDeclaration();            return this.perform_withArguments_(aSymbol, (_Array.with_with_(firstObject, secondObject)));        },        removeActionsSatisfying_forEvent_: function (aOneArgBlock, anEventSelector) {            this.setActionSequence_forEvent_(((this.actionSequenceForEvent_(anEventSelector)).reject_(block(function (anAction) {                return aOneArgBlock.value_(anAction);            }))), anEventSelector);            return this;        },        inboundPointers: function () {            return this.inboundPointersExcluding_(array([]));        },        readFromString_: function (aString) {            return this.readFrom_((ReadStream.on_(aString)));        },        renderOn_: function (aRenderer) {            aRenderer.text_(this);            return this;        },        explorePointers: function () {            PointerExplorer._new().openExplorerFor_(this);            return this;        },        isColorForm: function () {            return _false;        },        printOn_: function (aStream) {            var title;            title = this._class().name();            (function () {                var cascadeReceiver$ = aStream;                cascadeReceiver$.nextPutAll_((title.first().isVowel().ifTrue_ifFalse_(block(function () {                    return string("an ");                }), block(function () {                    return string("a ");                }))));                return cascadeReceiver$.nextPutAll_(title);            }).apply(this);            return this;        },        mouseUpBalk_: function (evt) {            return this;        },        modelSleep: function () {            return this;        },        asExplorerString: function () {            return this.printString();        },        triggerEvent_withArguments_: function (anEventSelector, anArgumentList) {            return (this.actionForEvent_(anEventSelector)).valueWithArguments_(anArgumentList);        },        error_: function (aString) {            return Error._new().signal_(aString);        },        initialExtent: function () {            return RealEstateAgent.standardWindowExtent();        },        triggerEvent_: function (anEventSelector) {            return (this.actionForEvent_(anEventSelector)).value();        },        shouldBeImplemented: function () {            this.error_(string("This message should be implemented"));            return this;        },        addDependent_: function (anObject) {            var dependents;            dependents = this.dependents();            (dependents.includes_(anObject)).ifFalse_(block(function () {                return this.myDependents_((dependents.copyWithDependent_(anObject)));            }));            return anObject;        },        inform_: function (aString) {            aString.isEmptyOrNil().ifFalse_(block(function () {                return UIManager._default().inform_(aString);            }));            return this;        },        className: function () {            return this._class().name().asString();        },        browseOwnClassSubProtocol: function () {            ProtocolBrowser.openSubProtocolForClass_(this._class());            return this;        },        with_with_executeMethod_: function (arg1, arg2, compiledMethod) {            return this.withArgs_executeMethod_(array([arg1, arg2]), compiledMethod);        },        stepAt_in_: function (millisecondClockValue, aWindow) {            return this.stepIn_(aWindow);        },        isSketchMorph: function () {            return _false;        },        _equals: function (anObject) {            return this._equals_equals(anObject);        },        haltOnCount_: function (_int) {            this.haltOnceEnabled().ifTrue_(block(function () {                return this.hasHaltCount().ifTrue_ifFalse_(block(function () {                    return this.decrementAndCheckHaltCount().ifTrue_(block(function () {                        return this.doExpiredHaltCount();                    }));                }), block(function () {                    return _int._equals(number(1)).ifTrue_ifFalse_(block(function () {                        return this.doExpiredHaltCount();                    }), block(function () {                        return this.setHaltCountTo_(_int._minus(number(1)));                    }));                }));            }));            return this;        },        newScriptorAround_: function (aPhraseTileMorph) {            return nil;        },        removeAction_forEvent_: function (anAction, anEventSelector) {            this.removeActionsSatisfying_forEvent_(block(function (action) {                return action._equals(anAction);            }), anEventSelector);            return this;        },        isSymbol: function () {            return _false;        },        isDictionary: function () {            return _false;        },        handles_: function (exception) {            return _false;        },        when_send_to_with_: function (anEventSelector, aMessageSelector, anObject, anArg) {            this.when_evaluate_(anEventSelector, (WeakMessageSend.receiver_selector_arguments_(anObject, aMessageSelector, (_Array.with_(anArg)))));            return this;        },        error: function () {            return this.error_(string("Error!"));        },        _tilde_equals: function (anObject) {            return this._equals(anObject)._equals_equals(_false);        },        isNumber: function () {            return _false;        },        defaultFloatPrecisionFor_: function (aGetSelector) {            return number(1);        },        isSystemWindow: function () {            return _false;        },        when_send_to_withArguments_: function (anEventSelector, aMessageSelector, anObject, anArgArray) {            this.when_evaluate_(anEventSelector, (WeakMessageSend.receiver_selector_arguments_(anObject, aMessageSelector, anArgArray)));            return this;        },        modelWakeUpIn_: function (aWindow) {            this.modelWakeUp();            return this;        },        asHttpResponseTo_: function (anHttpRequest) {            return (this.asHtmlDocumentForRequest_(anHttpRequest)).asHttpResponseTo_(anHttpRequest);        },        byteEncode_: function (aStream) {            this.flattenOnStream_(aStream);            return this;        },        adaptToFraction_andSend_: function (rcvr, selector) {            return this.adaptToNumber_andSend_(rcvr, selector);        },        browse: function () {            this.systemNavigation().browseClass_(this._class());            return this;        },        decrementAndCheckHaltCount: function () {            this.decrementHaltCount();            return this.checkHaltCountExpired();        },        hasBinding: function () {            return Bindings.includesKey_(this);        },        dragTransferTypeForMorph_: function (dragSource) {            return nil;        },        bindingOf_: function (aString) {            return nil;        },        vocabularyDemanded: function () {            return nil;        },        clone: function () {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        serializeToJavaScript: function () {            return S2JCodeFactory.codeFor_(this.serializeToSmalltalk());        },        isMethodProperties: function () {            return _false;        },        futureSend_at_args_: function (aSelector, deltaMSecs, args) {            return Project.current().future_send_at_args_(this, aSelector, deltaMSecs, args);        },        isInteger: function () {            return _false;        },        binding: function () {            return Bindings.bindingFor_ifNotBound_(this, block(function () {                return nil;            }));        },        isColor: function () {            return _false;        },        isTextView: function () {            return _false;        },        asAnnouncement: function () {            return this;        },        tilePhrasesForMethodInterfaces_inViewer_: function (methodInterfaceList, aViewer) {            var toSuppress; var interfaces;            toSuppress = aViewer.currentVocabulary().phraseSymbolsToSuppress();            interfaces = methodInterfaceList.reject_(block(function (_int) {                return toSuppress.includes_(_int.selector());            }));            Preferences.universalTiles().ifFalse_(block(function () {                return interfaces = interfaces.select_(block(function (_int) {                    var itsSelector;                    itsSelector = _int.selector();                    return itsSelector.numArgs()._less(number(2)).or_(block(function () {                        return array([string("color:sees:")]).includes_(itsSelector);                    }));                }));            }));            return interfaces.collect_(block(function (aMethodInterface) {                var resultType;                return ((resultType = aMethodInterface.resultType()).notNil().and_(block(function () {                    return resultType._tilde_tilde(string("unknown"));                }))).ifTrue_ifFalse_(block(function () {                    return aViewer.phraseForVariableFrom_(aMethodInterface);                }), block(function () {                    return aViewer.phraseForCommandFrom_(aMethodInterface);                }));            }));        },        currentEvent: function () {            return ActiveEvent.ifNil_(block(function () {                return this.currentHand().lastEvent();            }));        },        fixUponLoad_seg_: function (aProject, anImageSegment) {            return this;        },        with_with_with_executeMethod_: function (arg1, arg2, arg3, compiledMethod) {            return this.withArgs_executeMethod_(array([arg1, arg2, arg3]), compiledMethod);        },        closeTo_: function (anObject) {            return block(function () {                return this._equals(anObject);            }).ifError_(block(function () {                return _false;            }));        },        instVarAt_put_: function (anInteger, anObject) {            primitiveDeclaration();            return this.basicAt_put_(anInteger._minus(this._class().instSize()), anObject);        },        isFloat: function () {            return _false;        },        instVarNamed_put_: function (aString, aValue) {            return this.instVarAt_put_((this._class().instVarIndexFor_ifAbsent_(aString.asString(), block(function () {                return this.error_(string("no such inst var"));            }))), aValue);        },        inheritsFromAnyIn_: function (aList) {            aList.do_(block(function (elem) {                return Symbol.hasInterned_ifTrue_(elem.asString(), block(function (elemSymbol) {                    var aClass;                    return (((aClass = Smalltalk.at_ifAbsent_(elemSymbol, block(function () {                        return nil;                    }))).isKindOf_(Class)).and_(block(function () {                        return this.isKindOf_(aClass);                    }))).ifTrue_(block(function () {                        nonLocalReturn(_true);                    }));                }));            }));            return _false;        },        myDependents_: function (aCollectionOrNil) {            aCollectionOrNil.ifNil_ifNotNil_(block(function () {                return DependentsFields.removeKey_ifAbsent_(this, block(function () {;                }));            }), block(function () {                return DependentsFields.at_put_(this, aCollectionOrNil);            }));            return this;        },        isMemberOf_: function (aClass) {            return this._class()._equals_equals(aClass);        },        primitiveFailed_: function (selector) {            this.error_(selector.asString()._comma(string(" failed")));            return this;        },        isWebBrowser: function () {            return _false;        },        uniqueInstanceVariableNameLike_excluding_: function (aString, takenNames) {            var okBase; var uniqueName; var usedNames;            usedNames = this._class().allInstVarNamesEverywhere();            usedNames.removeAllFoundIn_(this._class().instVarNames());            usedNames.addAll_(takenNames);            okBase = Scanner.wellFormedInstanceVariableNameFrom_(aString);            uniqueName = Utilities.keyLike_satisfying_(okBase, block(function (aKey) {                return (usedNames.includes_(aKey)).not();            }));            return uniqueName;        },        openAsMorph: function () {            return this.asMorph().openInHand();        },        subclassResponsibility: function () {            this.error_(string("My subclass should have overridden ")._comma(THIS_CONTEXT.sender().selector().printString()));            return this;        },        codeStrippedOut_: function (messageString) {            this.halt_(string("Code stripped out -- ")._comma(messageString)._comma(string("-- do not proceed.")));            return this;        },        haltOnce_: function (aString) {            this.haltOnceEnabled().ifTrue_(block(function () {                this.clearHaltOnce();                nonLocalReturn(this.halt_(aString));            }));            return this;        },        tileToRefer: function () {            return TileMorph._new().setToReferTo_(this);        },        triggerEvent_ifNotHandled_: function (anEventSelector, anExceptionBlock) {            return (this.actionForEvent_ifAbsent_(anEventSelector, block(function () {                nonLocalReturn(anExceptionBlock.value());            }))).value();        },        with_executeMethod_: function (arg1, compiledMethod) {            return this.withArgs_executeMethod_(array([arg1]), compiledMethod);        },        hash: function () {            return this.scaledIdentityHash();        },        update_: function (aParameter) {            return this;        },        renameScript_: function (oldSelector) {            this.notYetImplemented();            return this;        },        methodInterfacesForScriptsCategoryIn_: function (aVocabulary) {            return OrderedCollection._new();        },        haltOnce: function () {            this.haltOnceEnabled().ifTrue_(block(function () {                this.clearHaltOnce();                nonLocalReturn(this.halt());            }));            return this;        },        inspect: function () {            ToolSet.inspect_(this);            return this;        },        storeOnStream_: function (aStream) {            this.printOnStream_(aStream);            return this;        },        complexContents: function () {            return this;        },        isForm: function () {            return _false;        },        wantsSteps: function () {            return _false;        },        removeBinding: function () {            return Bindings.removeKey_ifAbsent_(this, block(function () {;            }));        },        defaultLimitClassForVocabulary_: function (aVocabulary) {            return (aVocabulary.isKindOf_(FullVocabulary)).ifTrue_ifFalse_(block(function () {                return this._class().superclass()._equals_equals(_Object).ifTrue_ifFalse_(block(function () {                    return this._class();                }), block(function () {                    return this._class().superclass();                }));            }), block(function () {                return ProtoObject;            }));        },        hasLiteralSuchThat_: function (testBlock) {            return _false;        }    }});Class("BlockClosure", {    superclass: _Object,    instanceVariables: [ "$outerContext", "$startpc", "$numArgs" ],    classMethods: {        outerContext_startpc_numArgs_copiedValues_: function (aContext, aStartpc, argCount, anArrayOrNil) {            return (this.new_(anArrayOrNil.basicSize())).outerContext_startpc_numArgs_copiedValues_(aContext, aStartpc, argCount, anArrayOrNil);        }    },    instanceMethods: {        ifError_: function (errorHandlerBlock) {            return this.on_do_(Error, block(function (ex) {                return errorHandlerBlock.cull_cull_(ex.description(), ex.receiver());            }));        },        processHttp: function () {            var response;            this.numArgs()._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(this.value());            }));            this.numArgs()._equals(number(1)).ifTrue_(block(function () {                response = this.copy().fixTemps().value_(HttpRequest.current());                response.ifNotNil_(block(function () {                    HttpResponse.current_(response);                    nonLocalReturn(_true);                }));                nonLocalReturn(_false);            }));            return this;        },        hasMethodReturn: function () {            var myMethod; var scanner; var preceedingBytecodeMessage; var end;            myMethod = this.$outerContext.method();            scanner = InstructionStream._new().method_pc_(myMethod, myMethod.initialPC());            block(function () {                return scanner.pc()._less(this.$startpc);            }).whileTrue_(block(function () {                return block(function () {                    return scanner.interpretNextInstructionFor_(nil);                }).on_do_(MessageNotUnderstood, block(function (ex) {                    return preceedingBytecodeMessage = ex.message();                }));            }));            end = preceedingBytecodeMessage._arguments().last()._plus(this.$startpc)._minus(number(1));            scanner.method_pc_(myMethod, this.$startpc);            scanner.scanFor_(block(function (_byte) {                return (_byte.between_and_(number(120), number(124))).or_(block(function () {                    return scanner.pc()._greater(end);                }));            }));            return scanner.pc()._less_equals(end);        },        isBlock: function () {            return _true;        },        forkAt_: function (priority) {            return (function () {                var cascadeReceiver$ = this.newProcess();                cascadeReceiver$.priority_(priority);                return cascadeReceiver$.resume();            }).apply(this);        },        bindings: function () {            var oldSender; var answer;            oldSender = THIS_CONTEXT.swapSender_(this);            answer = BindingsLocator.signal();            THIS_CONTEXT.swapSender_(oldSender);            return answer;        },        copyForSaving: function () {            return this.shallowCopy().postCopy();        },        valueWithEnoughArguments_: function (anArray) {            var args;            (anArray.size()._equals_equals(this.numArgs())).ifTrue_(block(function () {                nonLocalReturn(this.valueWithArguments_(anArray));            }));            args = _Array.new_(this.numArgs());            args.replaceFrom_to_with_startingAt_(number(1), (anArray.size().min_(args.size())), anArray, number(1));            return this.valueWithArguments_(args);        },        home: function () {            return this.$outerContext.home();        },        valueSupplyingAnswers_: function (aListOfPairs) {            return block(function () {                return this.value();            }).on_do_(ProvideAnswerNotification, block(function (notify) {                var answer; var caption;                caption = notify.messageText().withSeparatorsCompacted();                answer = aListOfPairs.detect_ifNone_(block(function (each) {                    return caption._equals(each.first()).or_(block(function () {                        return (caption.includesSubstring_caseSensitive_(each.first(), _false)).or_(block(function () {                            return each.first().match_(caption);                        }));                    }));                }), block(function () {                    return nil;                }));                return answer.ifNotNil_ifNil_(block(function () {                    return notify.resume_(answer.second());                }), block(function () {                    var outerAnswer;                    outerAnswer = ProvideAnswerNotification.signal_(notify.messageText());                    return outerAnswer.ifNil_ifNotNil_(block(function () {                        return notify.resume();                    }), block(function () {                        return notify.resume_(outerAnswer);                    }));                }));            }));        },        newProcessWithIsolatedBindings: function () {            return this.newProcessWithIsolatedBindings_(Bindings.get());        },        durationToRun: function () {            return Duration.milliSeconds_(this.timeToRun());        },        doWhileTrue_: function (conditionBlock) {            var result;            block(function () {                result = this.value();                return conditionBlock.value();            }).whileTrue();            return result;        },        onDNU_do_: function (selector, handleBlock) {            return this.on_do_(MessageNotUnderstood, block(function (exception) {                return exception.message().selector()._equals(selector).ifTrue_ifFalse_(block(function () {                    return handleBlock.cull_(exception);                }), block(function () {                    return exception.pass();                }));            }));        },        cull_cull_: function (firstArg, secondArg) {            this.$numArgs._greater_equals(number(2)).ifTrue_(block(function () {                nonLocalReturn(this.value_value_(firstArg, secondArg));            }));            this.$numArgs._equals(number(1)).ifTrue_(block(function () {                nonLocalReturn(this.value_(firstArg));            }));            return this.value();        },        whileFalse_: function (aBlock) {            return block(function () {                return this.value();            }).whileFalse_(block(function () {                return aBlock.value();            }));        },        isClosure: function () {            return _true;        },        value_value_: function (firstArg, secondArg) {            primitiveDeclaration();            var newContext;            this.$numArgs._tilde_equals(number(2)).ifTrue_(block(function () {                return this.numArgsError_(number(2));            }));            _false.ifTrue_ifFalse_(block(function () {                newContext = this.asContextWithSender_(THIS_CONTEXT.sender());                newContext.at_put_(number(1), firstArg);                newContext.at_put_(number(2), secondArg);                return THIS_CONTEXT.privSender_(newContext);            }), block(function () {                return this.primitiveFailed();            }));            return this;        },        valueSuppressingMessages_supplyingAnswers_: function (aListOfStrings, aListOfPairs) {            return this.valueSupplyingAnswers_(aListOfPairs._comma((aListOfStrings.collect_(block(function (each) {                return array([each, _true]);            })))));        },        forkWithClampedBindings_: function (dynamicBindings) {            return (this.newProcessWithClampedBindings_(dynamicBindings)).resume();        },        value_value_value_value_: function (firstArg, secondArg, thirdArg, fourthArg) {            primitiveDeclaration();            var newContext;            this.$numArgs._tilde_equals(number(4)).ifTrue_(block(function () {                return this.numArgsError_(number(4));            }));            _false.ifTrue_ifFalse_(block(function () {                newContext = this.asContextWithSender_(THIS_CONTEXT.sender());                newContext.at_put_(number(1), firstArg);                newContext.at_put_(number(2), secondArg);                newContext.at_put_(number(3), thirdArg);                newContext.at_put_(number(4), fourthArg);                return THIS_CONTEXT.privSender_(newContext);            }), block(function () {                return this.primitiveFailed();            }));            return this;        },        numCopiedValues: function () {            primitiveDeclaration();            return this.basicSize();        },        valueWithArguments_: function (anArray) {            primitiveDeclaration();            var newContext;            this.$numArgs._tilde_equals(anArray.size()).ifTrue_(block(function () {                return this.numArgsError_(anArray.size());            }));            _false.ifTrue_ifFalse_(block(function () {                newContext = this.asContextWithSender_(THIS_CONTEXT.sender());                number(1).to_do_(this.$numArgs, block(function (i) {                    return newContext.at_put_(i, (anArray.at_(i)));                }));                return THIS_CONTEXT.privSender_(newContext);            }), block(function () {                return this.primitiveFailed();            }));            return this;        },        timeToRun: function () {            return Time.millisecondsToRun_(this);        },        outerContext: function () {            return this.$outerContext;        },        valueSupplyingMetacelloAnswers_: function (aListOfPairs) {            return block(function () {                return this.value();            }).on_do_(ProvideAnswerNotification, block(function (notify) {                var answer; var caption;                caption = notify.messageText().withSeparatorsCompacted();                answer = aListOfPairs.detect_ifNone_(block(function (each) {                    return caption._equals(each.first()).or_(block(function () {                        return (caption.includesSubstring_caseSensitive_(each.first(), _false)).or_(block(function () {                            return (each.first().match_(caption)).or_(block(function () {                                return (String.includesSelector_(string("matchesRegex:"))).and_(block(function () {                                    return block(function () {                                        return caption.matchesRegex_(each.first());                                    }).on_do_(Error, block(function (ignored) {                                        return _false;                                    }));                                }));                            }));                        }));                    }));                }), block(function () {                    return nil;                }));                return answer.ifNotNil_ifNil_(block(function () {                    return notify.resume_(answer.second());                }), block(function () {                    var outerAnswer;                    outerAnswer = ProvideAnswerNotification.signal_(notify.messageText());                    return outerAnswer.ifNil_ifNotNil_(block(function () {                        return notify.resume();                    }), block(function () {                        return notify.resume_(outerAnswer);                    }));                }));            }));        },        valueWithRequestor_: function (aRequestor) {            return this.numArgs().isZero().ifTrue_ifFalse_(block(function () {                return this.value();            }), block(function () {                return this.value_(aRequestor);            }));        },        newProcessWithClampedBindings: function () {            return this.newProcessWithClampedBindings_(Bindings.get());        },        on_do_on_do_on_do_: function (exc1, block1, exc2, block2, exc3, block3) {            return block(function () {                return block(function () {                    return this.value();                }).on_do_(exc1, block1);            }).on_do_on_do_(exc2, block2, exc3, block3);        },        fixCallbackTemps: function () {            return this;        },        setProject_withInMetacelloConfig_: function (aString, aMetacelloConfig) {            aMetacelloConfig.setProject_withBlock_(aString, this);            return this;        },        validateForStack_: function (anArray) {            return this;        },        valueSuppressingAllMessages: function () {            return this.valueSuppressingMessages_(array([string("*")]));        },        timeProfile: function () {            return TimeProfileBrowser.onBlock_(this);        },        setPackage_withInMetacelloConfig_: function (aString, aMetacelloConfig) {            aMetacelloConfig.setPackage_withBlock_(aString, this);            return this;        },        whileTrue: function () {            return block(function () {                return this.value();            }).whileTrue_(block(function () {;            }));        },        valueWithPossibleArgument_: function (anArg) {            var a;            this.$numArgs._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(this.value());            }));            this.$numArgs._equals(number(1)).ifTrue_(block(function () {                nonLocalReturn(this.value_(anArg));            }));            a = _Array.new_(this.$numArgs);            a.at_put_(number(1), anArg);            return this.valueWithArguments_(a);        },        setBlessingInMetacelloConfig_: function (aMetacelloConfig) {            aMetacelloConfig.setBlessingWithBlock_(this);            return this;        },        cull_: function (firstArg) {            this.$numArgs._greater_equals(number(1)).ifTrue_(block(function () {                nonLocalReturn(this.value_(firstArg));            }));            return this.value();        },        fork: function () {            return this.newProcess().resume();        },        renderOn_: function (aRenderer) {            this.numArgs()._equals(number(0)).ifTrue_ifFalse_(block(function () {                return this.value();            }), block(function () {                return this.value_(aRenderer);            }));            return this;        },        decompile: function () {            return Decompiler._new().decompileBlock_(this);        },        valueUnpreemptively: function () {            var activeProcess; var oldPriority; var result;            activeProcess = Processor.activeProcess();            oldPriority = activeProcess.priority();            activeProcess.priority_(Processor.highestPriority());            result = this.ensure_(block(function () {                return activeProcess.priority_(oldPriority);            }));            Processor.yield();            return result;        },        reentrant: function () {            return this;        },        printOn_: function (aStream) {            aStream.nextPutAll_(string("[closure] in "));            this.$outerContext.printOn_(aStream);            return this;        },        whileFalse: function () {            return block(function () {                return this.value();            }).whileFalse_(block(function () {;            }));        },        newProcessWithBindings: function () {            return this.newProcessWithBindings_(Bindings.get());        },        forkWithBindings_: function (dynamicBindings) {            return (this.newProcessWithBindings_(dynamicBindings)).resume();        },        copiedValueAt_: function (i) {            primitiveDeclaration();            return this.basicAt_(i);        },        becomeUncached: function () {            return this;        },        whileTrue_: function (aBlock) {            return block(function () {                return this.value();            }).whileTrue_(block(function () {                return aBlock.value();            }));        },        doPostProcessingFor_response_: function (request, response) {            return this.value_value_(request, response);        },        argumentCount: function () {            return this.numArgs();        },        forkNamed_: function (aString) {            return (function () {                var cascadeReceiver$ = this.newProcess();                cascadeReceiver$.name_(aString);                return cascadeReceiver$.resume();            }).apply(this);        },        newProcess: function () {            primitiveDeclaration();            return Process.forContext_priority_(block(function () {                this.value();                return Processor.terminateActive();            }).asContext(), Processor.activePriority());        },        valueWithBindingsContext_: function (aContext) {            return this.on_do_(BindingsLocator, block(function (n) {                return n.resume_(aContext);            }));        },        on_do_: function (exception, handlerAction) {            primitiveDeclaration();            var handlerActive;            handlerActive = _true;            return this.value();        },        receiver: function () {            return this.$outerContext.receiver();        },        processHttpRequest_: function (request) {            this.numArgs()._equals(number(1)).ifTrue_(block(function () {                nonLocalReturn(this.value_(request));            }));            this.numArgs()._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(this.value());            }));            return this;        },        outerContext_startpc_numArgs_copiedValues_: function (aContext, aStartpc, argCount, anArrayOrNil) {            this.$outerContext = aContext;            this.$startpc = aStartpc;            this.$numArgs = argCount;            number(1).to_do_(this.numCopiedValues(), block(function (i) {                return this.at_put_(i, (anArrayOrNil.at_(i)));            }));            return this;        },        valueAt_: function (blockPriority) {            var activeProcess; var result; var outsidePriority;            activeProcess = Processor.activeProcess();            outsidePriority = activeProcess.priority();            activeProcess.priority_(blockPriority);            result = this.ensure_(block(function () {                return activeProcess.priority_(outsidePriority);            }));            blockPriority._greater(outsidePriority).ifTrue_(block(function () {                return Processor.yield();            }));            return result;        },        valueSuppressingMessages_: function (aListOfStrings) {            return this.valueSuppressingMessages_supplyingAnswers_(aListOfStrings, array([]));        },        bench: function () {            var startTime; var endTime; var count; var roundTo3Digits;            roundTo3Digits = block(function (num) {                var rounded; var lowDigit;                rounded = (num._times(number(1000))).rounded();                lowDigit = (rounded.numberOfDigitsInBase_(number(10)))._minus(number(3));                rounded = rounded.roundTo_((number(10).raisedTo_(lowDigit)));                return (lowDigit._greater_equals(number(3)).or_(block(function () {                    return rounded._backslash_backslash(number(1000))._equals(number(0));                }))).ifTrue_ifFalse_(block(function () {                    return (rounded._slash_slash(number(1000))).asStringWithCommas();                }), block(function () {                    return (rounded._slash(number(1000.0))).printString();                }));            });            count = number(0);            endTime = Time.millisecondClockValue()._plus(number(5000));            startTime = Time.millisecondClockValue();            block(function () {                return Time.millisecondClockValue()._greater(endTime);            }).whileFalse_(block(function () {                this.value();                return count = count._plus(number(1));            }));            endTime = Time.millisecondClockValue();            return count._equals(number(1)).ifTrue_ifFalse_(block(function () {                return (roundTo3Digits.value_((endTime._minus(startTime))._slash(number(1000))))._comma(string(" seconds."));            }), block(function () {                return (roundTo3Digits.value_((count._times(number(1000)))._slash((endTime._minus(startTime)))))._comma(string(" per second."));            }));        },        forkWithIsolatedBindings: function () {            return this.newProcessWithIsolatedBindings().resume();        },        isReceiverOrAnyArgumentGarbage: function () {            return _false;        },        valueUninterruptably: function () {            return this.ifCurtailed_(block(function () {                nonLocalReturn(this);            }));        },        asContext: function () {            return this.asContextWithSender_(nil);        },        newProcessWithIsolatedBindings_: function (dynamicBindings) {            return block(function () {                return Bindings.isolate_(this);            }).newProcessWithBindings_(dynamicBindings);        },        repeatWithGCIf_: function (testBlock) {            var ans;            ans = this.value();            (testBlock.value_(ans)).ifTrue_(block(function () {                Smalltalk.garbageCollect();                return ans = this.value();            }));            return ans;        },        value: function () {            primitiveDeclaration();            var newContext;            this.$numArgs._tilde_equals(number(0)).ifTrue_(block(function () {                return this.numArgsError_(number(0));            }));            _false.ifTrue_ifFalse_(block(function () {                newContext = this.asContextWithSender_(THIS_CONTEXT.sender());                return THIS_CONTEXT.privSender_(newContext);            }), block(function () {                return this.primitiveFailed();            }));            return this;        },        value_: function (firstArg) {            primitiveDeclaration();            var newContext;            this.$numArgs._tilde_equals(number(1)).ifTrue_(block(function () {                return this.numArgsError_(number(1));            }));            _false.ifTrue_ifFalse_(block(function () {                newContext = this.asContextWithSender_(THIS_CONTEXT.sender());                newContext.at_put_(number(1), firstArg);                return THIS_CONTEXT.privSender_(newContext);            }), block(function () {                return this.primitiveFailed();            }));            return this;        },        forkAt_named_: function (priority, name) {            var forkedProcess;            forkedProcess = this.newProcess();            forkedProcess.priority_(priority);            forkedProcess.name_(name);            return forkedProcess.resume();        },        isDead: function () {            return _false;        },        visitWithValuable_: function (aMonadicValuable) {            aMonadicValuable.value_(this);            return this;        },        sender: function () {            return this.$outerContext.sender();        },        setDescriptionInMetacelloConfig_: function (aMetacelloConfig) {            aMetacelloConfig.setDescriptionWithBlock_(this);            return this;        },        on_do_on_do_: function (exc1, block1, exc2, block2) {            return block(function () {                return block(function () {                    return this.value();                }).on_do_(exc1, block1);            }).on_do_(exc2, block2);        },        newProcessWithClampedBindings_: function (dynamicBindings) {            return block(function () {                return Bindings.clamp_(this);            }).newProcessWithBindings_(dynamicBindings);        },        doWhileFalse_: function (conditionBlock) {            var result;            block(function () {                result = this.value();                return conditionBlock.value();            }).whileFalse();            return result;        },        whileNotNil_: function (aBlock) {            return block(function () {                return this.value().notNil();            }).whileTrue_(block(function () {                return aBlock.value();            }));        },        repeat: function () {            block(function () {                this.value();                return _true;            }).whileTrue();            return this;        },        simulateValueWithArguments_caller_: function (anArray, aContext) {            var newContext; var sz;            (anArray._class()._tilde_tilde(_Array).or_(block(function () {                return this.$numArgs._tilde_equals(anArray.size());            }))).ifTrue_(block(function () {                nonLocalReturn(ContextPart.primitiveFailToken());            }));            newContext = (MethodContext.newForMethod_(this.$outerContext.method())).setSender_receiver_method_closure_startpc_(aContext, this.$outerContext.receiver(), this.$outerContext.method(), this, this.$startpc);            sz = this.basicSize();            newContext.stackp_(sz._plus(this.$numArgs));            number(1).to_do_(this.$numArgs, block(function (i) {                return newContext.at_put_(i, (anArray.at_(i)));            }));            number(1).to_do_(sz, block(function (i) {                return newContext.at_put_(i._plus(this.$numArgs), (this.at_(i)));            }));            return newContext;        },        valueWithin_onTimeout_: function (aDuration, timeoutBlock) {            var theProcess; var delay; var watchdog;            aDuration._less_equals(Duration.zero()).ifTrue_(block(function () {                nonLocalReturn(timeoutBlock.value());            }));            theProcess = Processor.activeProcess();            delay = aDuration.asDelay();            watchdog = block(function () {                delay.wait();                return theProcess.ifNotNil_(block(function () {                    return theProcess.signalException_(TimedOut);                }));            }).newProcess();            watchdog.priority_(Processor.timingPriority()._minus(number(1)));            return block(function () {                watchdog.resume();                return this.ensure_(block(function () {                    theProcess = nil;                    return delay.delaySemaphore().signal();                }));            }).on_do_(TimedOut, block(function (e) {                return timeoutBlock.value();            }));        },        asContextWithSender_: function (aContext) {            return ((MethodContext.newForMethod_(this.$outerContext.method())).setSender_receiver_method_closure_startpc_(aContext, this.$outerContext.receiver(), this.$outerContext.method(), this, this.$startpc)).privRefresh();        },        assert: function () {            this.assert_(this);            return this;        },        valueSupplyingAnswer_: function (anObject) {            return (anObject.isCollection().and_(block(function () {                return anObject.isString().not();            }))).ifTrue_ifFalse_(block(function () {                return this.valueSupplyingAnswers_(array([anObject]));            }), block(function () {                return this.valueSupplyingAnswers_(array([array([string("*"), anObject])]));            }));        },        valueNoContextSwitch: function () {            primitiveDeclaration();            this.$numArgs._tilde_equals(number(0)).ifTrue_(block(function () {                return this.numArgsError_(number(0));            }));            this.primitiveFailed();            return this;        },        forkWithClampedBindings: function () {            return this.newProcessWithClampedBindings().resume();        },        value_value_value_: function (firstArg, secondArg, thirdArg) {            primitiveDeclaration();            var newContext;            this.$numArgs._tilde_equals(number(3)).ifTrue_(block(function () {                return this.numArgsError_(number(3));            }));            _false.ifTrue_ifFalse_(block(function () {                newContext = this.asContextWithSender_(THIS_CONTEXT.sender());                newContext.at_put_(number(1), firstArg);                newContext.at_put_(number(2), secondArg);                newContext.at_put_(number(3), thirdArg);                return THIS_CONTEXT.privSender_(newContext);            }), block(function () {                return this.primitiveFailed();            }));            return this;        },        setTimestampInMetacelloConfig_: function (aMetacelloConfig) {            aMetacelloConfig.setTimestampWithBlock_(this);            return this;        },        timeToRunWithoutGC: function () {            return (SmalltalkImage.current().vmParameterAt_(number(8)))._plus((SmalltalkImage.current().vmParameterAt_(number(10))))._plus(this.timeToRun())._minus((SmalltalkImage.current().vmParameterAt_(number(8))))._minus((SmalltalkImage.current().vmParameterAt_(number(10))));        },        newProcessWithBindings_: function (dynamicBindings) {            return block(function () {                return this.valueWithBindings_(dynamicBindings);            }).newProcess();        },        valueWithPossibleArguments_: function (anArray) {            var args;            (anArray.size()._equals_equals(this.numArgs())).ifTrue_(block(function () {                nonLocalReturn(this.valueWithArguments_(anArray));            }));            args = _Array.new_(this.numArgs());            args.replaceFrom_to_with_startingAt_(number(1), (anArray.size().min_(args.size())), anArray, number(1));            return this.valueWithArguments_(args);        },        ensure_: function (aBlock) {            primitiveDeclaration();            var complete; var returnValue;            returnValue = this.valueNoContextSwitch();            complete.ifNil_(block(function () {                complete = _true;                return aBlock.value();            }));            return returnValue;        },        numArgsError_: function (numArgsForInvocation) {            var printNArgs;            printNArgs = block(function (n) {                return n.printString()._comma(string(" argument"))._comma((n._equals(number(1)).ifTrue_ifFalse_(block(function () {                    return string("");                }), block(function () {                    return string("s");                }))));            });            this.error_(string("This block accepts ")._comma((printNArgs.value_(this.$numArgs)))._comma(string(", but was called with "))._comma((printNArgs.value_(numArgsForInvocation)))._comma(string(".")));            return this;        },        becomeCached: function () {            this.become_(((CachedBlockClosure.new_(this.size())).outerContext_startpc_numArgs_cachedValue_copiedValues_(this.$outerContext, this.$startpc, this.$numArgs, this.value(), this)));            return this;        },        processVisitor_: function (aKomModuleVisitor) {            return aKomModuleVisitor.doBlock_(this);        },        cull_cull_cull_cull_: function (firstArg, secondArg, thirdArg, fourthArg) {            this.$numArgs._greater_equals(number(3)).ifTrue_(block(function () {                this.$numArgs._greater_equals(number(4)).ifTrue_(block(function () {                    nonLocalReturn(this.value_value_value_value_(firstArg, secondArg, thirdArg, fourthArg));                }));                nonLocalReturn(this.value_value_value_(firstArg, secondArg, thirdArg));            }));            this.$numArgs._equals(number(2)).ifTrue_(block(function () {                nonLocalReturn(this.value_value_(firstArg, secondArg));            }));            this.$numArgs._equals(number(1)).ifTrue_(block(function () {                nonLocalReturn(this.value_(firstArg));            }));            return this.value();        },        forkAndWait: function () {            var semaphore;            semaphore = Semaphore._new();            block(function () {                return this.ensure_(block(function () {                    return semaphore.signal();                }));            }).fork();            semaphore.wait();            return this;        },        whileNil_: function (aBlock) {            return block(function () {                return this.value().isNil();            }).whileTrue_(block(function () {                return aBlock.value();            }));        },        valueOtherwise_: function (aBlock) {            return this.value();        },        ifCurtailed_: function (aBlock) {            primitiveDeclaration();            var complete; var result;            result = this.valueNoContextSwitch();            complete = _true;            return result;        },        once: function () {            this.$numArgs._tilde_equals(number(0)).ifTrue_(block(function () {                return this.error_(string("once should only be used with niladic blocks"));            }));            this.becomeCached();            return this.once();        },        valueWithArguments_otherwise_: function (anArray, aBlock) {            return this.valueWithArguments_(anArray);        },        startpc: function () {            return this.$startpc;        },        cull_cull_cull_: function (firstArg, secondArg, thirdArg) {            this.$numArgs._greater_equals(number(2)).ifTrue_(block(function () {                this.$numArgs._greater_equals(number(3)).ifTrue_(block(function () {                    nonLocalReturn(this.value_value_value_(firstArg, secondArg, thirdArg));                }));                nonLocalReturn(this.value_value_(firstArg, secondArg));            }));            this.$numArgs._equals(number(1)).ifTrue_(block(function () {                nonLocalReturn(this.value_(firstArg));            }));            return this.value();        },        method: function () {            return this.$outerContext.method();        },        fullPrintOn_: function (aStream) {            (function () {                var cascadeReceiver$ = aStream;                cascadeReceiver$.print_(this);                return cascadeReceiver$.cr();            }).apply(this);            (this.decompile().ifNil_(block(function () {                return string("--source missing--");            }))).printOn_indent_(aStream, number(0));            return this;        },        asMinimalRepresentation: function () {            return this;        },        forkWithIsolatedBindings_: function (dynamicBindings) {            return (this.newProcessWithIsolatedBindings_(dynamicBindings)).resume();        },        fixTemps: function () {            return this;        },        forkWithBindings: function () {            return this.newProcessWithBindings().resume();        },        valueWithPossibleArgs_: function (anArray) {            return this.$numArgs._equals(number(0)).ifTrue_ifFalse_(block(function () {                return this.value();            }), block(function () {                return this.valueWithArguments_((this.$numArgs._equals(anArray.size()).ifTrue_ifFalse_(block(function () {                    return anArray;                }), block(function () {                    return this.$numArgs._greater(anArray.size()).ifTrue_ifFalse_(block(function () {                        return anArray._comma((_Array.new_(this.$numArgs._minus(anArray.size()))));                    }), block(function () {                        return anArray.copyFrom_to_(number(1), this.$numArgs);                    }));                }))));            }));        },        numArgs: function () {            return this.$numArgs;        },        setAuthorInMetacelloConfig_: function (aMetacelloConfig) {            aMetacelloConfig.setAuthorWithBlock_(this);            return this;        },        valueWithBindings_: function (dynamicBindings) {            return this.valueWithBindingsContext_(THIS_CONTEXT);        },        valueNoContextSwitch_: function (anArg) {            primitiveDeclaration();            this.$numArgs._tilde_equals(number(1)).ifTrue_(block(function () {                return this.numArgsError_(number(1));            }));            this.primitiveFailed();            return this;        }    }});Class("Magnitude", {    superclass: _Object,    classMethods: {        browserIcon: function () {            return string("magnitude");        }    },    instanceMethods: {        min_max_: function (aMin, aMax) {            return (this.min_(aMin)).max_(aMax);        },        hash: function () {            return this.subclassResponsibility();        },        _equals: function (aMagnitude) {            return this.subclassResponsibility();        },        _greater: function (aMagnitude) {            return aMagnitude._less(this);        },        _greater_equals: function (aMagnitude) {            return aMagnitude._less_equals(this);        },        min_: function (aMagnitude) {            this._less(aMagnitude).ifTrue_ifFalse_(block(function () {                nonLocalReturn(this);            }), block(function () {                nonLocalReturn(aMagnitude);            }));            return this;        },        _less: function (aMagnitude) {            return this.subclassResponsibility();        },        max_: function (aMagnitude) {            this._greater(aMagnitude).ifTrue_ifFalse_(block(function () {                nonLocalReturn(this);            }), block(function () {                nonLocalReturn(aMagnitude);            }));            return this;        },        between_and_: function (min, max) {            return this._greater_equals(min).and_(block(function () {                return this._less_equals(max);            }));        },        _less_equals: function (aMagnitude) {            return (this._greater(aMagnitude)).not();        },        putOn_: function (aStream) {            (aStream.isBinary().ifTrue_ifFalse_(block(function () {                return this.asByteArray();            }), block(function () {                return this.asString();            }))).putOn_(aStream);            return this;        }    }});Class("_Number", {    superclass: Magnitude,    classMethods: {        readFrom_ifFail_: function (stringOrStream, aBlock) {            return (function () {                var cascadeReceiver$ = (ExtendedNumberParser.on_(stringOrStream));                cascadeReceiver$.failBlock_(aBlock);                return cascadeReceiver$.nextNumber();            }).apply(this);        },        readSqueakSyntaxFrom_: function (stringOrStream) {            return (SqNumberParser.on_(stringOrStream)).nextNumber();        },        readFrom_: function (stringOrStream) {            return (ExtendedNumberParser.on_(stringOrStream)).nextNumber();        },        readExactlyFrom_: function (stringOrStream) {            this.deprecated_(string("Use #readFrom: "));            return this.readFrom_(stringOrStream);        },        one: function () {            return number(1);        },        readFrom_base_: function (stringOrStream, base) {            return (SqNumberParser.on_(stringOrStream)).nextNumberBase_(base);        }    },    instanceMethods: {        strictlyPositive: function () {            return this._greater(number(0));        },        defaultLabelForInspector: function () {            return this._super.defaultLabelForInspector()._comma(string(": "))._comma(this.printString());        },        hour: function () {            return this.sign().hours();        },        asFloatD: function () {            string("Numeric");            return this.asFloat();        },        to_by_do_: function (stop, step, aBlock) {            var nextValue;            nextValue = this;            step._equals(number(0)).ifTrue_(block(function () {                return this.error_(string("step must be non-zero"));            }));            step._less(number(0)).ifTrue_ifFalse_(block(function () {                return block(function () {                    return stop._less_equals(nextValue);                }).whileTrue_(block(function () {                    aBlock.value_(nextValue);                    return nextValue = nextValue._plus(step);                }));            }), block(function () {                return block(function () {                    return stop._greater_equals(nextValue);                }).whileTrue_(block(function () {                    aBlock.value_(nextValue);                    return nextValue = nextValue._plus(step);                }));            }));            return this;        },        degreeCos: function () {            return (number(90)._minus((number(180)._plus(this)._backslash_backslash(number(360))._minus(number(180))).abs())).degreesToRadians().sin();        },        to_by_: function (stop, step) {            return Interval.from_to_by_(this, stop, step);        },        _backslash_backslash: function (aNumber) {            return this._minus((this._slash_slash(aNumber)._times(aNumber)));        },        isNaN: function () {            return _false;        },        asB3DVector3: function () {            return this._at(this)._at(this);        },        _slash_slash: function (aNumber) {            return (this._slash(aNumber)).floor();        },        second: function () {            return this.sign().seconds();        },        isInf: function () {            this.deprecated_(string("Use #isInfinite instead"));            return this.isInfinite();        },        adaptToScaledDecimal_andSend_: function (receiverScaledDecimal, arithmeticOpSelector) {            string("Numeric");            return this.subclassResponsibility();        },        arcTan_: function (denominator) {            return (this.asFloat()).arcTan_(denominator);        },        to_: function (stop) {            return Interval.from_to_by_(this, stop, number(1));        },        negated: function () {            return number(0)._minus(this);        },        exp: function () {            return this.asFloat().exp();        },        milliSecond: function () {            return this.sign().milliSeconds();        },        isOrAreStringWith_: function (aNoun) {            var result;            result = this._equals(number(1)).ifTrue_ifFalse_(block(function () {                return string(" is one ");            }), block(function () {                return this._equals(number(0)).ifTrue_ifFalse_(block(function () {                    return string(" are no ");                }), block(function () {                    return string(" are ")._comma(this.printString())._comma(string(" "));                }));            }));            result = result._comma(aNoun);            this._equals(number(1)).ifFalse_(block(function () {                return result = result._comma(string("s"));            }));            return result;        },        milliseconds: function () {            return this.milliSeconds();        },        adaptToString_andSend_: function (rcvr, selector) {            return rcvr.asNumber().perform_with_(selector, this);        },        asScaledDecimal_: function (scale) {            string("Numeric");            return ScaledDecimal.newFromNumber_scale_(this, scale);        },        fractionPart: function () {            return this._minus(this.integerPart());        },        sign: function () {            this._greater(number(0)).ifTrue_(block(function () {                nonLocalReturn(number(1));            }));            this._less(number(0)).ifTrue_(block(function () {                nonLocalReturn(number(-1));            }));            return number(0);        },        arg: function () {            this.isZero().ifTrue_(block(function () {                return this.error_(string("Zero (0 + 0 i) does not have an argument."));            }));            number(0)._less(this).ifTrue_ifFalse_(block(function () {                nonLocalReturn(number(0));            }), block(function () {                nonLocalReturn(Float.pi());            }));            return this;        },        _plus: function (aNumber) {            this.subclassResponsibility();            return this;        },        tan: function () {            return this.asFloat().tan();        },        asInteger: function () {            return this.truncated();        },        degreesToRadians: function () {            return this.asFloat().degreesToRadians();        },        log_: function (aNumber) {            return this.ln()._slash(aNumber.ln());        },        printOn_: function (aStream) {            this.printOn_base_(aStream, number(10));            return this;        },        sign_: function (aNumber) {            return aNumber.copySignTo_(this);        },        printString: function () {            return this.printStringBase_(number(10));        },        asScaledDecimal: function () {            string("Numeric");            return this.asScaledDecimal_(number(8));        },        integerPart: function () {            return this.truncated();        },        minute: function () {            return this.sign().minutes();        },        days: function () {            return Duration.days_(this);        },        adaptToPoint_andSend_: function (rcvr, selector) {            return rcvr.perform_with_(selector, this._at(this));        },        roundTo_: function (quantum) {            return (this._slash(quantum)).rounded()._times(quantum);        },        copySignTo_: function (aNumber) {            return this.positive().ifTrue_ifFalse_(block(function () {                return aNumber.abs();            }), block(function () {                return aNumber.abs().negated();            }));        },        degreeSin: function () {            return (number(90)._minus(this)).degreeCos();        },        sqrt: function () {            return this.asFloat().sqrt();        },        storeOn_: function (aStream) {            this.printOn_(aStream);            return this;        },        negative: function () {            return this._less(number(0));        },        stringForReadout: function () {            return this.rounded().printString();        },        asFloatE: function () {            string("Numeric");            return this.asFloat();        },        raisedTo_: function (aNumber) {            aNumber.isInteger().ifTrue_(block(function () {                nonLocalReturn(this.raisedToInteger_(aNumber));            }));            this._less(number(0)).ifTrue_(block(function () {                return this.error_(this.printString()._comma(string(" raised to a non-integer power")));            }));            number(0)._equals(aNumber).ifTrue_(block(function () {                nonLocalReturn(this._class().one());            }));            number(1)._equals(aNumber).ifTrue_(block(function () {                nonLocalReturn(this);            }));            number(0)._equals(this).ifTrue_(block(function () {                return aNumber._less(number(0)).ifTrue_ifFalse_(block(function () {                    nonLocalReturn((ZeroDivide.dividend_(this)).signal());                }), block(function () {                    nonLocalReturn(this);                }));            }));            return (aNumber._times(this.ln())).exp();        },        storeOn_base_: function (aStream, base) {            return this.subclassResponsibility();        },        printShowingDecimalPlaces_: function (placesDesired) {            var rounder; var rounded; var frac; var sign; var integerString; var fractionString; var result;            placesDesired._less_equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(this.rounded().printString());            }));            rounder = number(10).raisedToInteger_(placesDesired);            rounded = this.roundTo_(rounder.reciprocal());            sign = rounded.negative().ifTrue_ifFalse_(block(function () {                return string("-");            }), block(function () {                return string("");            }));            integerString = rounded.abs().integerPart().truncated().printString();            frac = ((rounded.abs().fractionPart())._times(rounder)).truncated();            fractionString = frac.printString().padded_to_with_(string("left"), placesDesired, character("0"));            result = sign._comma(integerString)._comma(string("."))._comma(fractionString);            return result;        },        interpolateTo_at_: function (aNumber, param) {            return this._plus((aNumber._minus(this)._times(param)));        },        nanoSeconds: function () {            return Duration.nanoSeconds_(this);        },        detentBy_atMultiplesOf_snap_: function (detent, grid, snap) {            var r1; var r2;            r1 = this.roundTo_(grid);            (this.roundTo_(detent))._equals(r1).ifTrue_(block(function () {                nonLocalReturn(r1);            }));            snap.ifTrue_(block(function () {                nonLocalReturn(this);            }));            r2 = this._less(r1).ifTrue_ifFalse_(block(function () {                return r1._minus((detent.asFloat()._slash(number(2))));            }), block(function () {                return r1._plus((detent.asFloat()._slash(number(2))));            }));            return r1._plus(((this._minus(r2))._times(grid.asFloat())._slash((grid._minus(detent)))));        },        adaptToInteger_andSend_: function (rcvr, selector) {            return this.subclassResponsibility();        },        _times: function (aNumber) {            this.subclassResponsibility();            return this;        },        isNumber: function () {            return _true;        },        rem_: function (aNumber) {            return this._minus(((this.quo_(aNumber))._times(aNumber)));        },        adaptToCollection_andSend_: function (rcvr, selector) {            return rcvr.collect_(block(function (element) {                return element.perform_with_(selector, this);            }));        },        raisedToInteger_: function (anInteger) {            var bitProbe; var result;            anInteger.negative().ifTrue_(block(function () {                nonLocalReturn((this.raisedToInteger_(anInteger.negated())).reciprocal());            }));            bitProbe = number(1).bitShift_(anInteger.highBit()._minus(number(1)));            result = this._class().one();            block(function () {                (anInteger.bitAnd_(bitProbe))._equals(number(0)).ifFalse_(block(function () {                    return result = result._times(this);                }));                bitProbe = bitProbe.bitShift_(number(-1));                return bitProbe._greater(number(0));            }).whileTrue_(block(function () {                return result = result._times(result);            }));            return result;        },        nanoSecond: function () {            return this.sign().nanoSeconds();        },        ceiling: function () {            this._less_equals(number(0.0)).ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.truncated());            }), block(function () {                nonLocalReturn(this.negated().floor().negated());            }));            return this;        },        radiansToDegrees: function () {            return this.asFloat().radiansToDegrees();        },        asDuration: function () {            return Duration.nanoSeconds_(this.asInteger());        },        asPoint: function () {            return this._at(this);        },        adaptToFraction_andSend_: function (rcvr, selector) {            return this.subclassResponsibility();        },        byteEncode_: function (aStream) {            return aStream.writeNumber_(this);        },        asSmallPositiveDegrees: function () {            return this._backslash_backslash(number(360));        },        _at: function (y) {            return Point.x_y_(this, y);        },        roundDownTo_: function (aNumber) {            return (this._slash(aNumber)).floor()._times(aNumber);        },        abs: function () {            this._less(number(0)).ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.negated());            }), block(function () {                nonLocalReturn(this);            }));            return this;        },        hours: function () {            return Duration.hours_(this);        },        i: function () {            return Complex.real_imaginary_(number(0), this);        },        arcTan: function () {            return this.asFloat().arcTan();        },        vocabularyDemanded: function () {            return Vocabulary.numberVocabulary();        },        sin: function () {            return this.asFloat().sin();        },        squared: function () {            return this._times(this);        },        floorLog_: function (radix) {            return this.asFloat().floorLog_(radix);        },        adaptToFloat_andSend_: function (rcvr, selector) {            return rcvr.perform_with_(selector, this.asFloat());        },        greaseInteger: function () {            return this.truncated();        },        basicType: function () {            return string("Number");        },        log: function () {            return this.asFloat().log();        },        reciprocal: function () {            return number(1)._slash(this);        },        milliSeconds: function () {            return Duration.milliSeconds_(this);        },        asFloatQ: function () {            string("Numeric");            return this.asFloat();        },        positive: function () {            return this._greater_equals(number(0));        },        printStringBase_: function (base) {            return String.streamContents_(block(function (strm) {                return this.printOn_base_(strm, base);            }));        },        day: function () {            return this.sign().days();        },        storeStringBase_: function (base) {            return String.streamContents_(block(function (strm) {                return this.storeOn_base_(strm, base);            }));        },        newTileMorphRepresentative: function () {            return (function () {                var cascadeReceiver$ = TileMorph._new();                cascadeReceiver$.addArrows();                cascadeReceiver$.setLiteral_(this);                return cascadeReceiver$.addSuffixIfCan();            }).apply(this);        },        odd: function () {            return this.even()._equals_equals(_false);        },        rounded: function () {            return (this._plus((this.sign()._slash(number(2))))).truncated();        },        _slash: function (aNumber) {            this.subclassResponsibility();            return this;        },        minutes: function () {            return Duration.minutes_(this);        },        seconds: function () {            return Duration.seconds_(this);        },        quo_: function (aNumber) {            return (this._slash(aNumber)).truncated();        },        closeTo_: function (num) {            num.isFloat().ifTrue_(block(function () {                nonLocalReturn(num.closeTo_(this.asFloat()));            }));            return block(function () {                return this._equals(num);            }).ifError_(block(function () {                return _false;            }));        },        arcCos: function () {            return this.asFloat().arcCos();        },        floor: function () {            var truncation;            truncation = this.truncated();            this._greater_equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(truncation);            }));            this._equals(truncation).ifTrue_ifFalse_(block(function () {                nonLocalReturn(truncation);            }), block(function () {                nonLocalReturn(truncation._minus(number(1)));            }));            return this;        },        _minus: function (aNumber) {            this.subclassResponsibility();            return this;        },        cos: function () {            return this.asFloat().cos();        },        to_do_: function (stop, aBlock) {            var nextValue;            nextValue = this;            block(function () {                return nextValue._less_equals(stop);            }).whileTrue_(block(function () {                aBlock.value_(nextValue);                return nextValue = nextValue._plus(number(1));            }));            return this;        },        truncated: function () {            return this.quo_(number(1));        },        reduce: function () {            return this;        },        printOn_base_: function (aStream, base) {            return this.subclassResponsibility();        },        truncateTo_: function (aNumber) {            return (this.quo_(aNumber))._times(aNumber);        },        asNumber: function () {            return this;        },        ln: function () {            return this.asFloat().ln();        },        isDivisibleBy_: function (aNumber) {            aNumber._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            aNumber.isInteger().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            return (this._backslash_backslash(aNumber))._equals(number(0));        },        roundUpTo_: function (aNumber) {            return (this._slash(aNumber)).ceiling()._times(aNumber);        },        asSmallAngleDegrees: function () {            var pos;            pos = this._backslash_backslash(number(360));            pos._greater(number(180)).ifTrue_(block(function () {                return pos = pos._minus(number(360));            }));            return pos;        },        arcSin: function () {            return this.asFloat().arcSin();        },        weeks: function () {            return Duration.weeks_(this);        },        isInfinite: function () {            return _false;        },        even: function () {            return this._backslash_backslash(number(2))._equals(number(0));        },        adaptToFloat_andCompare_: function (rcvr, selector) {            rcvr.isFinite().ifFalse_(block(function () {                selector._equals_equals(string("=")).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                selector._equals_equals(string("~=")).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));                rcvr.isNaN().ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                (selector._equals(string("<")).or_(block(function () {                    return selector._equals(string("<="));                }))).ifTrue_(block(function () {                    nonLocalReturn(rcvr.positive().not());                }));                (selector._equals(string(">")).or_(block(function () {                    return selector._equals(string(">="));                }))).ifTrue_(block(function () {                    nonLocalReturn(rcvr.positive());                }));                nonLocalReturn(this.error_(string("unknow comparison selector")));            }));            return rcvr.asTrueFraction().perform_with_(selector, this);        },        isZero: function () {            return this._equals(number(0));        },        week: function () {            return this.sign().weeks();        }    }});Class("Float", {    superclass: _Number,    classVariables: [ "$E", "$Epsilon", "$Halfpi", "$Infinity", "$Ln10", "$Ln2", "$MaxVal", "$MaxValLn", "$MinValLogBase2", "$NaN", "$NegativeInfinity", "$NegativeZero", "$Pi", "$RadiansPerDegree", "$Sqrt2", "$ThreePi", "$Twopi" ],    classMethods: {        nan: function () {            return NaN;        },        halfPi: function () {            return Halfpi;        },        readFrom_: function (aStream) {            return (this._super.readFrom_(aStream)).asFloat();        },        e: function () {            return E;        },        emax: function () {            return number(1023);        },        epsilon: function () {            return number(1.0).timesTwoPower_(number(1)._minus(this.precision()));        },        infinity: function () {            return Infinity;        },        fromIEEE32Bit_: function (word) {            var sign; var mantissa; var exponent; var newFloat; var delta;            word.negative().ifTrue_(block(function () {                nonLocalReturn(this.error_(string("Cannot deal with negative numbers")));            }));            word._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(number(0.0));            }));            sign = word.bitAnd_(number(2147483648));            word._equals(sign).ifTrue_(block(function () {                nonLocalReturn(this.negativeZero());            }));            exponent = ((word.bitShift_(number(-23))).bitAnd_(number(255)))._minus(number(127));            mantissa = word.bitAnd_(number(8388607));            exponent._equals(number(128)).ifTrue_(block(function () {                mantissa._equals(number(0)).ifFalse_(block(function () {                    nonLocalReturn(Float.nan());                }));                return sign._equals(number(0)).ifTrue_ifFalse_(block(function () {                    nonLocalReturn(Float.infinity());                }), block(function () {                    nonLocalReturn(Float.infinity().negated());                }));            }));            exponent._equals(number(-127)).ifTrue_(block(function () {                delta = mantissa.highBit();                mantissa = (mantissa.bitShift_(number(1))).bitAnd_((number(1).bitShift_(delta))._minus(number(1)));                return exponent = exponent._plus(delta)._minus(number(23));            }));            newFloat = this.new_(number(2));            newFloat.basicAt_put_(number(1), ((sign.bitOr_((number(1023)._plus(exponent).bitShift_(number(20))))).bitOr_((mantissa.bitShift_(number(-3))))));            newFloat.basicAt_put_(number(2), ((mantissa.bitAnd_(number(7))).bitShift_(number(29))));            return newFloat;        },        one: function () {            return number(1.0);        },        denormalized: function () {            return _true;        },        fmin: function () {            return this.denormalized().ifTrue_ifFalse_(block(function () {                return this.fminDenormalized();            }), block(function () {                return this.fminNormalized();            }));        },        fminNormalized: function () {            return number(1.0).timesTwoPower_(number(-1022));        },        initialize: function () {            Pi = number(3.141592653589793);            Halfpi = Pi._slash(number(2.0));            Twopi = Pi._times(number(2.0));            ThreePi = Pi._times(number(3.0));            RadiansPerDegree = Pi._slash(number(180.0));            Ln2 = number(0.693147180559945);            Ln10 = number(10.0).ln();            Sqrt2 = number(1.414213562373095);            E = number(2.718281828459045);            Epsilon = number(1.0e-12);            MaxVal = number(1.797693134862316e308);            MaxValLn = number(709.782712893384);            MinValLogBase2 = number(-1074);            Infinity = MaxVal._times(MaxVal);            NegativeInfinity = number(0.0)._minus(Infinity);            NaN = Infinity._minus(Infinity);            NegativeZero = number(1.0)._slash(Infinity.negated());            return this;        },        readFrom_ifFail_: function (aStream, aBlock) {            return (this._super.readFrom_ifFail_(aStream, block(function () {                nonLocalReturn(aBlock.value());            }))).asFloat();        },        threePi: function () {            return ThreePi;        },        radix: function () {            return number(2);        },        fminDenormalized: function () {            return number(1.0).timesTwoPower_(MinValLogBase2);        },        pi: function () {            return Pi;        },        negativeZero: function () {            return NegativeZero;        },        emin: function () {            return number(-1022);        },        precision: function () {            return number(53);        },        twoPi: function () {            return Twopi;        },        fmax: function () {            return MaxVal;        }    },    instanceMethods: {        _less_equals: function (aNumber) {            primitiveDeclaration();            return aNumber.adaptToFloat_andCompare_(this, string("<="));        },        isPowerOfTwo: function () {            return _false;        },        ulp: function () {            var exponent;            this.isFinite().ifFalse_(block(function () {                this.isNaN().ifTrue_(block(function () {                    nonLocalReturn(this);                }));                nonLocalReturn(Float.infinity());            }));            this._equals(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(Float.fmin());            }));            exponent = this.exponent();            return exponent._less(this._class().emin()).ifTrue_ifFalse_(block(function () {                return Float.fminDenormalized();            }), block(function () {                return Float.epsilon().timesTwoPower_(exponent);            }));        },        radiansToDegrees: function () {            return this._slash(RadiansPerDegree);        },        _less: function (aNumber) {            primitiveDeclaration();            return aNumber.adaptToFloat_andCompare_(this, string("<"));        },        degreeCos: function () {            this.isFinite().ifTrue_(block(function () {                nonLocalReturn(this._super.degreeCos());            }));            return this.degreesToRadians().cos();        },        safeArcCos: function () {            (this.between_and_(number(-1.0), number(1.0))).ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.arcCos());            }), block(function () {                nonLocalReturn(this.sign().arcCos());            }));            return this;        },        adaptToFraction_andSend_: function (rcvr, selector) {            return rcvr.asFloat().perform_with_(selector, this);        },        isNaN: function () {            return this._tilde_equals(this);        },        abs: function () {            this._less_equals(number(0.0)).ifTrue_ifFalse_(block(function () {                nonLocalReturn(number(0.0)._minus(this));            }), block(function () {                nonLocalReturn(this);            }));            return this;        },        asComplex: function () {            return Complex.real_imaginary_(this, number(0));        },        basicAt_put_: function (index, value) {            primitiveDeclaration();            ec._equals_equals(nil).ifTrue_(block(function () {                nonLocalReturn(this._super.basicAt_put_(index, value));            }));            index.isInteger().ifTrue_(block(function () {                return (index._greater_equals(number(1)).and_(block(function () {                    return index._less_equals(this.size());                }))).ifTrue_ifFalse_(block(function () {                    return this.errorImproperStore();                }), block(function () {                    return this.errorSubscriptBounds_(index);                }));            }));            index.isNumber().ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.basicAt_put_(index.asInteger(), value));            }), block(function () {                return this.errorNonIntegerIndex();            }));            return this;        },        arcTan: function () {            primitiveDeclaration();            var theta; var eps; var step; var sinTheta; var cosTheta;            this._less(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(number(0.0)._minus((number(0.0)._minus(this)).arcTan()));            }));            theta = (this._times(Halfpi))._slash((this._plus(number(1.0))));            eps = Halfpi._times(Epsilon);            step = theta;            block(function () {                return (step._times(step))._greater(eps);            }).whileTrue_(block(function () {                sinTheta = theta.sin();                cosTheta = theta.cos();                step = (sinTheta._times(cosTheta))._minus((this._times(cosTheta)._times(cosTheta)));                return theta = theta._minus(step);            }));            return theta;        },        adaptToScaledDecimal_andSend_: function (receiverScaledDecimal, arithmeticOpSelector) {            string("Numeric");            return receiverScaledDecimal.asFloat().perform_with_(arithmeticOpSelector, this);        },        sin: function () {            primitiveDeclaration();            var sum; var delta; var self2; var i;            this._less(number(0.0)).ifTrue_(block(function () {                nonLocalReturn((number(0.0)._minus(((number(0.0)._minus(this)).sin()))));            }));            this._greater(Twopi).ifTrue_(block(function () {                nonLocalReturn((this._backslash_backslash(Twopi)).sin());            }));            this._greater(Pi).ifTrue_(block(function () {                nonLocalReturn((number(0.0)._minus((this._minus(Pi)).sin())));            }));            this._greater(Halfpi).ifTrue_(block(function () {                nonLocalReturn((Pi._minus(this)).sin());            }));            sum = delta = this;            self2 = number(0.0)._minus((this._times(this)));            i = number(2.0);            block(function () {                return delta._greater(Epsilon);            }).whileTrue_(block(function () {                delta = (delta._times(self2))._slash((i._times((i._plus(number(1.0))))));                i = i._plus(number(2.0));                sum = sum._plus(delta);                delta = (delta._times(self2))._slash((i._times((i._plus(number(1.0))))));                i = i._plus(number(2.0));                return sum = sum._plus(delta);            }));            return sum;        },        asFraction: function () {            return this.asTrueFraction();        },        predecessor: function () {            var ulp;            this.isFinite().ifFalse_(block(function () {                (this.isNaN().or_(block(function () {                    return this.negative();                }))).ifTrue_(block(function () {                    nonLocalReturn(this);                }));                nonLocalReturn(Float.fmax());            }));            this._equals(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(Float.fmin().negated());            }));            ulp = this.ulp();            return this._minus((number(0.5)._times(ulp)))._equals(this).ifTrue_ifFalse_(block(function () {                return this._minus(ulp);            }), block(function () {                return this._minus((number(0.5)._times(ulp)));            }));        },        floorLog_: function (radix) {            return (this.log_(radix)).floor();        },        timesTwoPower_: function (anInteger) {            primitiveDeclaration();            anInteger._less(number(-29)).ifTrue_(block(function () {                nonLocalReturn(this._times((number(2.0).raisedToInteger_(anInteger))));            }));            anInteger._less(number(0)).ifTrue_(block(function () {                nonLocalReturn(this._slash((number(1).bitShift_((number(0)._minus(anInteger)))).asFloat()));            }));            anInteger._less(number(30)).ifTrue_(block(function () {                nonLocalReturn(this._times((number(1).bitShift_(anInteger)).asFloat()));            }));            return this._times((number(2.0).raisedToInteger_(anInteger)));        },        arcTan_: function (denominator) {            return this._equals(number(0.0)).ifTrue_ifFalse_(block(function () {                return denominator.sign()._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                    return number(0);                }), block(function () {                    return this.sign()._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                        return Pi;                    }), block(function () {                        return Pi.negated();                    }));                }));            }), block(function () {                return denominator._equals(number(0.0)).ifTrue_ifFalse_(block(function () {                    return this._greater(number(0.0)).ifTrue_ifFalse_(block(function () {                        return Halfpi;                    }), block(function () {                        return Halfpi.negated();                    }));                }), block(function () {                    return denominator._greater(number(0)).ifTrue_ifFalse_(block(function () {                        return (this._slash(denominator)).arcTan();                    }), block(function () {                        return this._greater(number(0)).ifTrue_ifFalse_(block(function () {                            return ((this._slash(denominator)).arcTan())._plus(Pi);                        }), block(function () {                            return ((this._slash(denominator)).arcTan())._minus(Pi);                        }));                    }));                }));            }));        },        reciprocalFloorLog_: function (radix) {            var adjust; var scale; var n;            adjust = number(0);            scale = number(1.0);            block(function () {                return (n = radix._slash((this._times(scale)))).isInfinite();            }).whileTrue_(block(function () {                scale = scale._times(radix);                return adjust = adjust._plus(number(1));            }));            return ((n.floorLog_(radix))._plus(adjust)).negated();        },        _greater_equals: function (aNumber) {            primitiveDeclaration();            return aNumber.adaptToFloat_andCompare_(this, string(">="));        },        negated: function () {            return number(0.0)._minus(this);        },        exp: function () {            primitiveDeclaration();            var base; var fract; var correction; var delta; var div;            this._less(number(0.0)).ifTrue_(block(function () {                nonLocalReturn((this.negated().exp()).reciprocal());            }));            this._equals(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(number(1));            }));            this.abs()._greater(MaxValLn).ifTrue_(block(function () {                return this.error_(string("exp overflow"));            }));            base = E.raisedToInteger_((this.truncated()));            fract = this.fractionPart();            fract._equals(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(base);            }));            correction = number(1.0)._plus(fract);            delta = fract._times(fract)._slash(number(2.0));            div = number(2.0);            block(function () {                return delta._greater(Epsilon);            }).whileTrue_(block(function () {                correction = correction._plus(delta);                div = div._plus(number(1.0));                return delta = delta._times(fract)._slash(div);            }));            correction = correction._plus(delta);            return base._times(correction);        },        absPrintOn_base_: function (aStream, base) {            var significantBits; var fBase; var exp; var baseExpEstimate; var r; var s; var mPlus; var mMinus; var scale; var d; var tc1; var tc2; var fixedFormat; var decPointCount;            this.isInfinite().ifTrue_(block(function () {                aStream.nextPutAll_(string("Infinity"));                nonLocalReturn(this);            }));            significantBits = number(50);            fBase = base.asFloat();            exp = this.exponent();            baseExpEstimate = (exp._times(fBase.reciprocalLogBase2())._minus(number(1.0e-10))).ceiling();            exp._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                r = this;                s = number(1.0);                mPlus = number(1.0).timesTwoPower_(exp._minus(significantBits));                return mMinus = this.significand()._tilde_equals(number(1.0)).ifTrue_ifFalse_(block(function () {                    return mPlus;                }), block(function () {                    return mPlus._slash(number(2.0));                }));            }), block(function () {                r = this.timesTwoPower_(significantBits);                s = number(1.0).timesTwoPower_(significantBits);                mMinus = number(1.0).timesTwoPower_((exp.max_(number(-1024))));                return mPlus = (exp._equals(MinValLogBase2))._pipe((this.significand()._tilde_equals(number(1.0)))).ifTrue_ifFalse_(block(function () {                    return mMinus;                }), block(function () {                    return mMinus._times(number(2.0));                }));            }));            baseExpEstimate._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                return exp._equals(number(1023)).ifTrue_ifFalse_(block(function () {                    r = r._slash(fBase);                    s = s._times((fBase.raisedToInteger_(baseExpEstimate._minus(number(1)))));                    mPlus = mPlus._slash(fBase);                    return mMinus = mMinus._slash(fBase);                }), block(function () {                    return s = s._times((fBase.raisedToInteger_(baseExpEstimate)));                }));            }), block(function () {                exp._less(number(-1023)).ifTrue_ifFalse_(block(function () {                    d = (number(53)._times(fBase.reciprocalLogBase2())._minus(number(1.0e-10))).ceiling();                    scale = fBase.raisedToInteger_(d);                    r = r._times(scale);                    mPlus = mPlus._times(scale);                    mMinus = mMinus._times(scale);                    return scale = fBase.raisedToInteger_((baseExpEstimate._plus(d)).negated());                }), block(function () {                    return scale = fBase.raisedToInteger_(baseExpEstimate.negated());                }));                return s = s._slash(scale);            }));            (r._plus(mPlus)._greater_equals(s)).ifTrue_ifFalse_(block(function () {                return baseExpEstimate = baseExpEstimate._plus(number(1));            }), block(function () {                return s = s._slash(fBase);            }));            (fixedFormat = baseExpEstimate.between_and_(number(-3), number(6))).ifTrue_ifFalse_(block(function () {                decPointCount = baseExpEstimate;                return baseExpEstimate._less_equals(number(0)).ifTrue_(block(function () {                    return aStream.nextPutAll_((string("0.000000").truncateTo_(number(2)._minus(baseExpEstimate))));                }));            }), block(function () {                return decPointCount = number(1);            }));            block(function () {                d = (r._slash(s)).truncated();                r = r._minus((d._times(s)));                return (tc1 = r._less_equals(mMinus))._pipe((tc2 = r._plus(mPlus)._greater_equals(s)));            }).whileFalse_(block(function () {                aStream.nextPut_((Character.digitValue_(d)));                r = r._times(fBase);                mPlus = mPlus._times(fBase);                mMinus = mMinus._times(fBase);                decPointCount = decPointCount._minus(number(1));                return decPointCount._equals(number(0)).ifTrue_(block(function () {                    return aStream.nextPut_(character("."));                }));            }));            tc2.ifTrue_(block(function () {                return tc1.not()._pipe((tc1._and((r._times(number(2.0))._greater_equals(s))))).ifTrue_(block(function () {                    return d = d._plus(number(1));                }));            }));            aStream.nextPut_((Character.digitValue_(d)));            decPointCount._greater(number(0)).ifTrue_(block(function () {                decPointCount._minus(number(1)).to_by_do_(number(1), number(-1), block(function (i) {                    return aStream.nextPut_(character("0"));                }));                return aStream.nextPutAll_(string(".0"));            }));            fixedFormat.ifFalse_(block(function () {                aStream.nextPut_(character("e"));                return aStream.nextPutAll_((baseExpEstimate._minus(number(1))).printString());            }));            return this;        },        absByteEncode_base_: function (aStream, base) {            var significantBits; var fBase; var exp; var baseExpEstimate; var r; var s; var mPlus; var mMinus; var scale; var d; var tc1; var tc2; var fixedFormat; var decPointCount;            this.isInfinite().ifTrue_(block(function () {                aStream.print_(string("Infinity"));                nonLocalReturn(this);            }));            significantBits = number(50);            fBase = base.asFloat();            exp = this.exponent();            baseExpEstimate = (exp._times(fBase.reciprocalLogBase2())._minus(number(1.0e-10))).ceiling();            exp._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                r = this;                s = number(1.0);                mPlus = number(1.0).timesTwoPower_(exp._minus(significantBits));                return mMinus = this.significand()._tilde_equals(number(1.0)).ifTrue_ifFalse_(block(function () {                    return mPlus;                }), block(function () {                    return mPlus._slash(number(2.0));                }));            }), block(function () {                r = this.timesTwoPower_(significantBits);                s = number(1.0).timesTwoPower_(significantBits);                mMinus = number(1.0).timesTwoPower_((exp.max_(number(-1024))));                return mPlus = (exp._equals(MinValLogBase2))._pipe((this.significand()._tilde_equals(number(1.0)))).ifTrue_ifFalse_(block(function () {                    return mMinus;                }), block(function () {                    return mMinus._times(number(2.0));                }));            }));            baseExpEstimate._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                s = s._times((fBase.raisedToInteger_(baseExpEstimate)));                return exp._equals(number(1023)).ifTrue_(block(function () {                    r = r._slash(fBase);                    s = s._slash(fBase);                    mPlus = mPlus._slash(fBase);                    return mMinus = mMinus._slash(fBase);                }));            }), block(function () {                exp._less(number(-1023)).ifTrue_ifFalse_(block(function () {                    d = (number(53)._times(fBase.reciprocalLogBase2())._minus(number(1.0e-10))).ceiling();                    scale = fBase.raisedToInteger_(d);                    r = r._times(scale);                    mPlus = mPlus._times(scale);                    mMinus = mMinus._times(scale);                    return scale = fBase.raisedToInteger_((baseExpEstimate._plus(d)).negated());                }), block(function () {                    return scale = fBase.raisedToInteger_(baseExpEstimate.negated());                }));                return s = s._slash(scale);            }));            (r._plus(mPlus)._greater_equals(s)).ifTrue_ifFalse_(block(function () {                return baseExpEstimate = baseExpEstimate._plus(number(1));            }), block(function () {                return s = s._slash(fBase);            }));            (fixedFormat = baseExpEstimate.between_and_(number(-3), number(6))).ifTrue_ifFalse_(block(function () {                decPointCount = baseExpEstimate;                return baseExpEstimate._less_equals(number(0)).ifTrue_(block(function () {                    return aStream.print_((string("0.000000").truncateTo_(number(2)._minus(baseExpEstimate))));                }));            }), block(function () {                return decPointCount = number(1);            }));            block(function () {                d = (r._slash(s)).truncated();                r = r._minus((d._times(s)));                return (tc1 = r._less_equals(mMinus))._pipe((tc2 = r._plus(mPlus)._greater_equals(s)));            }).whileFalse_(block(function () {                aStream.print_((Character.digitValue_(d)));                r = r._times(fBase);                mPlus = mPlus._times(fBase);                mMinus = mMinus._times(fBase);                decPointCount = decPointCount._minus(number(1));                return decPointCount._equals(number(0)).ifTrue_(block(function () {                    return aStream.print_(character("."));                }));            }));            tc2.ifTrue_(block(function () {                return tc1.not()._pipe((tc1._and((r._times(number(2.0))._greater_equals(s))))).ifTrue_(block(function () {                    return d = d._plus(number(1));                }));            }));            aStream.print_((Character.digitValue_(d)));            decPointCount._greater(number(0)).ifTrue_(block(function () {                decPointCount._minus(number(1)).to_by_do_(number(1), number(-1), block(function (i) {                    return aStream.print_(character("0"));                }));                return aStream.print_(string(".0"));            }));            fixedFormat.ifFalse_(block(function () {                aStream.print_(character("e"));                return aStream.print_((baseExpEstimate._minus(number(1))).printString());            }));            return this;        },        log: function () {            return this.ln()._slash(Ln10);        },        reciprocal: function () {            return number(1.0)._slash(this);        },        absPrintExactlyOn_base_: function (aStream, base) {            var significand; var exp; var baseExpEstimate; var r; var s; var mPlus; var mMinus; var scale; var roundingIncludesLimits; var d; var tc1; var tc2; var fixedFormat; var decPointCount; var slowbit; var shead;            this.isInfinite().ifTrue_(block(function () {                aStream.nextPutAll_(string("Infinity"));                nonLocalReturn(this);            }));            significand = this.significandAsInteger();            roundingIncludesLimits = significand.even();            exp = (this.exponent()._minus(number(52))).max_(MinValLogBase2);            baseExpEstimate = (this.exponent()._times(base.asFloat().reciprocalLogBase2())._minus(number(1.0e-10))).ceiling();            exp._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                return significand._tilde_equals(number(4503599627370496)).ifTrue_ifFalse_(block(function () {                    r = significand.bitShift_(number(1)._plus(exp));                    s = number(2);                    return mPlus = mMinus = number(1).bitShift_(exp);                }), block(function () {                    r = significand.bitShift_(number(2)._plus(exp));                    s = number(4);                    return mPlus = number(2)._times((mMinus = number(1).bitShift_(exp)));                }));            }), block(function () {                return (exp._equals(MinValLogBase2).or_(block(function () {                    return significand._tilde_equals(number(4503599627370496));                }))).ifTrue_ifFalse_(block(function () {                    r = significand.bitShift_(number(1));                    s = number(1).bitShift_(number(1)._minus(exp));                    return mPlus = mMinus = number(1);                }), block(function () {                    r = significand.bitShift_(number(2));                    s = number(1).bitShift_(number(2)._minus(exp));                    mPlus = number(2);                    return mMinus = number(1);                }));            }));            baseExpEstimate._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                return s = s._times((base.raisedToInteger_(baseExpEstimate)));            }), block(function () {                scale = base.raisedToInteger_(baseExpEstimate.negated());                r = r._times(scale);                mPlus = mPlus._times(scale);                return mMinus = mMinus._times(scale);            }));            ((r._plus(mPlus)._less(s)).not().and_(block(function () {                return roundingIncludesLimits.or_(block(function () {                    return r._plus(mPlus)._greater(s);                }));            }))).ifTrue_ifFalse_(block(function () {                return baseExpEstimate = baseExpEstimate._plus(number(1));            }), block(function () {                r = r._times(base);                mPlus = mPlus._times(base);                return mMinus = mMinus._times(base);            }));            (fixedFormat = baseExpEstimate.between_and_(number(-3), number(6))).ifTrue_ifFalse_(block(function () {                decPointCount = baseExpEstimate;                return baseExpEstimate._less_equals(number(0)).ifTrue_(block(function () {                    return aStream.nextPutAll_((string("0.000000").truncateTo_(number(2)._minus(baseExpEstimate))));                }));            }), block(function () {                return decPointCount = number(1);            }));            slowbit = number(1)._minus(s.lowBit());            shead = s.bitShift_(slowbit);            block(function () {                d = (r.bitShift_(slowbit))._slash_slash(shead);                r = r._minus((d._times(s)));                return (tc1 = (r._greater(mMinus)).not().and_(block(function () {                    return roundingIncludesLimits.or_(block(function () {                        return r._less(mMinus);                    }));                })))._pipe((tc2 = (r._plus(mPlus)._less(s)).not().and_(block(function () {                    return roundingIncludesLimits.or_(block(function () {                        return r._plus(mPlus)._greater(s);                    }));                }))));            }).whileFalse_(block(function () {                aStream.nextPut_((Character.digitValue_(d)));                r = r._times(base);                mPlus = mPlus._times(base);                mMinus = mMinus._times(base);                decPointCount = decPointCount._minus(number(1));                return decPointCount._equals(number(0)).ifTrue_(block(function () {                    return aStream.nextPut_(character("."));                }));            }));            tc2.ifTrue_(block(function () {                return (tc1.not().or_(block(function () {                    return r._times(number(2))._greater_equals(s);                }))).ifTrue_(block(function () {                    return d = d._plus(number(1));                }));            }));            aStream.nextPut_((Character.digitValue_(d)));            decPointCount._greater(number(0)).ifTrue_(block(function () {                decPointCount._minus(number(1)).to_by_do_(number(1), number(-1), block(function (i) {                    return aStream.nextPut_(character("0"));                }));                return aStream.nextPutAll_(string(".0"));            }));            fixedFormat.ifFalse_(block(function () {                aStream.nextPut_(character("e"));                return aStream.nextPutAll_((baseExpEstimate._minus(number(1))).printString());            }));            return this;        },        jsonOn_: function (aStream) {            this.javascriptOn_(aStream);            return this;        },        hasContentsInExplorer: function () {            return _false;        },        adaptToInteger_andCompare_: function (rcvr, selector) {            this.isFinite().ifFalse_(block(function () {                selector._equals_equals(string("=")).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                selector._equals_equals(string("~=")).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));                this.isNaN().ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                (selector._equals(string("<")).or_(block(function () {                    return selector._equals(string("<="));                }))).ifTrue_(block(function () {                    nonLocalReturn(this.positive());                }));                (selector._equals(string(">")).or_(block(function () {                    return selector._equals(string(">="));                }))).ifTrue_(block(function () {                    nonLocalReturn(this.positive().not());                }));                nonLocalReturn(this.error_(string("unknow comparison selector")));            }));            selector._equals_equals(string("=")).ifTrue_(block(function () {                return this.fractionPart()._equals(number(0.0)).ifFalse_(block(function () {                    nonLocalReturn(_false);                }));            }));            selector._equals_equals(string("~=")).ifTrue_(block(function () {                return this.fractionPart()._equals(number(0.0)).ifFalse_(block(function () {                    nonLocalReturn(_true);                }));            }));            return rcvr.perform_with_(selector, this.asTrueFraction());        },        at_put_: function (index, value) {            return this.basicAt_put_(index, value);        },        adaptToScaledDecimal_andCompare_: function (rcvr, selector) {            this.isFinite().ifFalse_(block(function () {                selector._equals_equals(string("=")).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                selector._equals_equals(string("~=")).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));                this.isNaN().ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                (selector._equals(string("<")).or_(block(function () {                    return selector._equals(string("<="));                }))).ifTrue_(block(function () {                    nonLocalReturn(this.positive());                }));                (selector._equals(string(">")).or_(block(function () {                    return selector._equals(string(">="));                }))).ifTrue_(block(function () {                    nonLocalReturn(this.positive().not());                }));                nonLocalReturn(this.error_(string("unknow comparison selector")));            }));            return rcvr.perform_with_(selector, this.asTrueFraction());        },        rounded: function () {            this.fractionPart().abs()._less(number(0.5)).ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.truncated());            }), block(function () {                nonLocalReturn(this.truncated()._plus(this.sign().rounded()));            }));            return this;        },        _slash: function (aNumber) {            primitiveDeclaration();            aNumber._equals(number(0.0)).ifTrue_(block(function () {                return ZeroDivide.signalWithDividend_(this);            }));            return aNumber.adaptToFloat_andSend_(this, string("/"));        },        isFinite: function () {            return (this._minus(this))._equals(number(0.0));        },        reciprocalLogBase2: function () {            return this._equals(number(10.0)).ifTrue_ifFalse_(block(function () {                return Ln2._slash(Ln10);            }), block(function () {                return Ln2._slash(this.ln());            }));        },        hex: function () {            return String.streamContents_(block(function (strm) {                var word; var nibble;                return number(1).to_do_(number(2), block(function (i) {                    word = this.at_(i);                    return number(1).to_do_(number(8), block(function (s) {                        nibble = (word.bitShift_(number(-8)._plus(s)._times(number(4)))).bitAnd_(number(15));                        return strm.nextPut_((string("0123456789ABCDEF").at_(nibble._plus(number(1)))));                    }));                }));            }));        },        closeTo_: function (num) {            num.isNumber().ifFalse_(block(function () {                nonLocalReturn(block(function () {                    return this._equals(num);                }).ifError_(block(function () {                    return _false;                })));            }));            this._equals(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(num.abs()._less(number(0.0001)));            }));            num._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(this.abs()._less(number(0.0001)));            }));            return this._equals(num.asFloat()).or_(block(function () {                return (this._minus(num)).abs()._slash((this.abs().max_(num.abs())))._less(number(0.0001));            }));        },        fractionPart: function () {            primitiveDeclaration();            return this._minus(this.truncated().asFloat());        },        sign: function () {            this._greater(number(0)).ifTrue_(block(function () {                nonLocalReturn(number(1));            }));            (this._less(number(0)).or_(block(function () {                return ((this.at_(number(1))).bitShift_(number(-31)))._equals(number(1));            }))).ifTrue_(block(function () {                nonLocalReturn(number(-1));            }));            return number(0);        },        arcCos: function () {            return Halfpi._minus(this.arcSin());        },        isFloat: function () {            return _true;        },        adaptToFraction_andCompare_: function (rcvr, selector) {            this.isFinite().ifFalse_(block(function () {                selector._equals_equals(string("=")).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                selector._equals_equals(string("~=")).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));                this.isNaN().ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                (selector._equals(string("<")).or_(block(function () {                    return selector._equals(string("<="));                }))).ifTrue_(block(function () {                    nonLocalReturn(this.positive());                }));                (selector._equals(string(">")).or_(block(function () {                    return selector._equals(string(">="));                }))).ifTrue_(block(function () {                    nonLocalReturn(this.positive().not());                }));                nonLocalReturn(this.error_(string("unknow comparison selector")));            }));            selector._equals_equals(string("=")).ifTrue_(block(function () {                return rcvr.denominator().isPowerOfTwo().ifFalse_(block(function () {                    nonLocalReturn(_false);                }));            }));            selector._equals_equals(string("~=")).ifTrue_(block(function () {                return rcvr.denominator().isPowerOfTwo().ifFalse_(block(function () {                    nonLocalReturn(_true);                }));            }));            return rcvr.perform_with_(selector, this.asTrueFraction());        },        _plus: function (aNumber) {            primitiveDeclaration();            return aNumber.adaptToFloat_andSend_(this, string("+"));        },        tan: function () {            return this.sin()._slash(this.cos());        },        degreesToRadians: function () {            return this._times(RadiansPerDegree);        },        _minus: function (aNumber) {            primitiveDeclaration();            return aNumber.adaptToFloat_andSend_(this, string("-"));        },        cos: function () {            return (this._plus(Halfpi)).sin();        },        at_: function (index) {            return this.basicAt_(index);        },        sign_: function (aNumber) {            (this._equals(number(0.0)).and_(block(function () {                return aNumber.sign().negative();            }))).ifTrue_(block(function () {                nonLocalReturn(Float.negativeZero());            }));            return aNumber.copySignTo_(this);        },        veryDeepCopyWith_: function (deepCopier) {            return this.clone();        },        truncated: function () {            primitiveDeclaration();            this.isFinite().ifFalse_(block(function () {                return this.error_(string("Cannot truncate this number"));            }));            this.abs()._less(number(2.0e16)).ifTrue_ifFalse_(block(function () {                var di; var df; var q; var r;                di = number(1)._plus((SmallInteger.maxVal().bitShift_(number(-1))));                df = di.asFloat();                q = this.quo_(df);                r = this._minus((q.asFloat()._times(df)));                nonLocalReturn(q._times(di)._plus(r.truncated()));            }), block(function () {                nonLocalReturn(this.asTrueFraction());            }));            return this;        },        reduce: function () {            (this.closeTo_(this.rounded())).ifTrue_(block(function () {                nonLocalReturn(this.rounded());            }));            return this;        },        integerPart: function () {            return this._minus(this.fractionPart());        },        asApproximateFractionAtOrder_: function (maxOrder) {            var num1; var denom1; var num2; var denom2; var _int; var frac; var newD; var temp; var order;            num1 = this.asInteger();            denom1 = number(1);            num2 = number(1);            denom2 = number(0);            _int = num1;            frac = this.fractionPart();            order = maxOrder._equals(number(0)).ifTrue_ifFalse_(block(function () {                return number(-1);            }), block(function () {                return maxOrder;            }));            block(function () {                return frac._equals(number(0)).or_(block(function () {                    return order._equals(number(0));                }));            }).whileFalse_(block(function () {                order = order._minus(number(1));                newD = number(1.0)._slash(frac);                _int = newD.asInteger();                frac = newD.fractionPart();                temp = num2;                num2 = num1;                num1 = num1._times(_int)._plus(temp);                temp = denom2;                denom2 = denom1;                denom1 = _int._times(denom1)._plus(temp);                return number(1.0e10)._less(denom1).ifTrue_(block(function () {                    num2._equals(number(0.0)).ifTrue_(block(function () {                        nonLocalReturn(Fraction.numerator_denominator_(num1, denom1));                    }));                    nonLocalReturn(Fraction.numerator_denominator_(num2, denom2));                }));            }));            denom1._equals(number(1)).ifTrue_ifFalse_(block(function () {                nonLocalReturn(num1);            }), block(function () {                nonLocalReturn(Fraction.numerator_denominator_(num1, denom1));            }));            return this;        },        exponent: function () {            primitiveDeclaration();            var positive;            this._greater_equals(number(1.0)).ifTrue_(block(function () {                nonLocalReturn(this.floorLog_(number(2)));            }));            this._greater(number(0.0)).ifTrue_(block(function () {                positive = (number(1.0)._slash(this)).exponent();                return this._equals((number(1.0)._slash((number(1.0).timesTwoPower_(positive))))).ifTrue_ifFalse_(block(function () {                    nonLocalReturn(positive.negated());                }), block(function () {                    nonLocalReturn(positive.negated()._minus(number(1)));                }));            }));            this._equals(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(number(-1));            }));            return this.negated().exponent();        },        printOn_base_: function (aStream, base) {            this.isNaN().ifTrue_(block(function () {                aStream.nextPutAll_(string("NaN"));                nonLocalReturn(this);            }));            this._greater(number(0.0)).ifTrue_ifFalse_(block(function () {                return this.absPrintOn_base_(aStream, base);            }), block(function () {                this.sign()._equals(number(-1)).ifTrue_(block(function () {                    return aStream.nextPutAll_(string("-"));                }));                return this._equals(number(0.0)).ifTrue_ifFalse_(block(function () {                    aStream.nextPutAll_(string("0.0"));                    nonLocalReturn(this);                }), block(function () {                    return this.negated().absPrintOn_base_(aStream, base);                }));            }));            return this;        },        basicAt_: function (index) {            primitiveDeclaration();            ec._equals_equals(nil).ifTrue_(block(function () {                nonLocalReturn(this._super.basicAt_(index));            }));            index.isInteger().ifTrue_(block(function () {                return this.errorSubscriptBounds_(index);            }));            index.isNumber().ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.basicAt_(index.asInteger()));            }), block(function () {                return this.errorNonIntegerIndex();            }));            return this;        },        copySignTo_: function (aNumber) {            (this._greater(number(0)).or_(block(function () {                return (this.at_(number(1)))._equals(number(0));            }))).ifTrue_(block(function () {                nonLocalReturn(aNumber.abs());            }));            return aNumber.abs().negated();        },        hash: function () {            (this.isFinite().and_(block(function () {                return this.fractionPart()._equals(number(0.0));            }))).ifTrue_(block(function () {                nonLocalReturn(this.truncated().hash());            }));            return ((this.basicAt_(number(1))).bitShift_(number(-4)))._plus(((this.basicAt_(number(2))).bitShift_(number(-4))));        },        degreeSin: function () {            this.isFinite().ifTrue_(block(function () {                nonLocalReturn(this._super.degreeSin());            }));            return this.degreesToRadians().sin();        },        sqrt: function () {            primitiveDeclaration();            var exp; var guess; var eps; var delta;            string("Numeric");            this._less_equals(number(0.0)).ifTrue_(block(function () {                return this._equals(number(0.0)).ifTrue_ifFalse_(block(function () {                    nonLocalReturn(number(0.0));                }), block(function () {                    nonLocalReturn(FloatingPointException.signal_(string("undefined if less than zero.")));                }));            }));            exp = this.exponent()._slash_slash(number(2));            guess = this.timesTwoPower_(number(0)._minus(exp));            eps = guess._times(Epsilon);            eps = eps._times(eps);            delta = this._minus((guess._times(guess)))._slash((guess._times(number(2.0))));            block(function () {                return delta._times(delta)._greater(eps);            }).whileTrue_(block(function () {                guess = guess._plus(delta);                return delta = this._minus((guess._times(guess)))._slash((guess._times(number(2.0))));            }));            return guess;        },        asTrueFraction: function () {            var signexp; var positive; var expPart; var exp; var fraction; var fractionPart; var signedFraction; var result; var zeroBitsCount;            this.isInfinite().ifTrue_(block(function () {                return this.error_(string("Cannot represent infinity as a fraction"));            }));            this.isNaN().ifTrue_(block(function () {                return this.error_(string("Cannot represent Not-a-Number as a fraction"));            }));            signexp = (this.basicAt_(number(1))).bitShift_(number(-20));            positive = (signexp.bitAnd_(number(2048)))._equals(number(0));            expPart = signexp.bitAnd_(number(2047));            fractionPart = (((this.basicAt_(number(1))).bitAnd_(number(1048575))).bitShift_(number(32)))._plus((this.basicAt_(number(2))));            (expPart._equals(number(0)).and_(block(function () {                return fractionPart._equals(number(0));            }))).ifTrue_(block(function () {                nonLocalReturn(number(0));            }));            fraction = expPart._equals(number(0)).ifTrue_ifFalse_(block(function () {                return fractionPart.bitShift_(number(1));            }), block(function () {                return fractionPart.bitOr_(number(4503599627370496));            }));            signedFraction = positive.ifTrue_ifFalse_(block(function () {                return fraction;            }), block(function () {                return fraction.negated();            }));            exp = number(1023)._plus(number(52))._minus(expPart);            exp.negative().ifTrue_ifFalse_(block(function () {                return result = signedFraction.bitShift_(exp.negated());            }), block(function () {                zeroBitsCount = fraction.lowBit()._minus(number(1));                exp = exp._minus(zeroBitsCount);                return exp._less_equals(number(0)).ifTrue_ifFalse_(block(function () {                    zeroBitsCount = zeroBitsCount._plus(exp);                    return result = signedFraction.bitShift_(zeroBitsCount.negated());                }), block(function () {                    return result = Fraction.numerator_denominator_((signedFraction.bitShift_(zeroBitsCount.negated())), (number(1).bitShift_(exp)));                }));            }));            return result;        },        isLiteral: function () {            return this.isFinite();        },        storeOn_: function (aStream) {            this.storeOn_base_(aStream, number(10));            return this;        },        significandAsInteger: function () {            var exp; var sig;            exp = this.exponent();            sig = (((this.at_(number(1))).bitAnd_(number(1048575))).bitShift_(number(32))).bitOr_((this.at_(number(2))));            (exp._greater(number(-1023)).and_(block(function () {                return this._tilde_equals(number(0.0));            }))).ifTrue_(block(function () {                return sig = sig.bitOr_((number(1).bitShift_(number(52))));            }));            return sig;        },        byteEncode_base_: function (aStream, base) {            this.isNaN().ifTrue_(block(function () {                aStream.print_(string("NaN"));                nonLocalReturn(this);            }));            this._greater(number(0.0)).ifTrue_ifFalse_(block(function () {                return this.absByteEncode_base_(aStream, base);            }), block(function () {                this.sign()._equals(number(-1)).ifTrue_(block(function () {                    return aStream.print_(string("-"));                }));                return this._equals(number(0.0)).ifTrue_ifFalse_(block(function () {                    aStream.print_(string("0.0"));                    nonLocalReturn(this);                }), block(function () {                    return aStream.writeNumber_base_(this.negated(), base);                }));            }));            return this;        },        absPrintOn_base_digitCount_: function (aStream, base, digitCount) {            var fuzz; var x; var exp; var q; var fBase; var scale; var logScale; var xi;            this.isInfinite().ifTrue_(block(function () {                nonLocalReturn(aStream.nextPutAll_(string("Inf")));            }));            fBase = base.asFloat();            exp = this._less(number(1.0)).ifTrue_ifFalse_(block(function () {                return this.reciprocalFloorLog_(fBase);            }), block(function () {                return this.floorLog_(fBase);            }));            scale = number(1.0);            logScale = number(0);            block(function () {                return (x = fBase.raisedTo_((exp._plus(logScale))))._equals(number(0));            }).whileTrue_(block(function () {                scale = scale._times(fBase);                return logScale = logScale._plus(number(1));            }));            x = this._times(scale)._slash(x);            fuzz = fBase.raisedTo_(number(1)._minus(digitCount));            x = number(0.5)._times(fuzz)._plus(x);            x._greater_equals(fBase).ifTrue_(block(function () {                x = x._slash(fBase);                return exp = exp._plus(number(1));            }));            (exp._less(number(6)).and_(block(function () {                return exp._greater(number(-4));            }))).ifTrue_ifFalse_(block(function () {                q = number(0);                return exp._less(number(0)).ifTrue_(block(function () {                    return number(1).to_do_(number(1)._minus(exp), block(function (i) {                        return aStream.nextPut_((string("0.0000").at_(i)));                    }));                }));            }), block(function () {                q = exp;                return exp = number(0);            }));            block(function () {                return x._greater_equals(fuzz);            }).whileTrue_(block(function () {                xi = x.asInteger();                aStream.nextPut_((Character.digitValue_(xi)));                x = x._minus(xi.asFloat())._times(fBase);                fuzz = fuzz._times(fBase);                exp = exp._minus(number(1));                return exp._equals(number(-1)).ifTrue_(block(function () {                    return aStream.nextPut_(character("."));                }));            }));            block(function () {                return exp._greater_equals(number(-1));            }).whileTrue_(block(function () {                aStream.nextPut_(character("0"));                exp = exp._minus(number(1));                return exp._equals(number(-1)).ifTrue_(block(function () {                    return aStream.nextPut_(character("."));                }));            }));            q._tilde_equals(number(0)).ifTrue_(block(function () {                aStream.nextPut_(character("e"));                return q.printOn_(aStream);            }));            return this;        },        _greater: function (aNumber) {            primitiveDeclaration();            return aNumber.adaptToFloat_andCompare_(this, string(">"));        },        ln: function () {            primitiveDeclaration();            var expt; var n; var mant; var x; var div; var pow; var delta; var sum; var eps;            this._less_equals(number(0.0)).ifTrue_(block(function () {                return this.error_(string("ln is only defined for x > 0.0"));            }));            expt = this.exponent();            n = Ln2._times(expt);            mant = this.timesTwoPower_(number(0)._minus(expt));            x = mant._minus(number(1.0));            div = number(1.0);            pow = delta = sum = x;            x = x.negated();            eps = Epsilon._times((n.abs()._plus(number(1.0))));            block(function () {                return delta._greater(eps);            }).whileTrue_(block(function () {                div = div._plus(number(1.0));                pow = pow._times(x);                delta = pow._slash(div);                sum = sum._plus(delta);                div = div._plus(number(1.0));                pow = pow._times(x);                delta = pow._slash(div);                return sum = sum._plus(delta);            }));            return n._plus(sum);        },        deepCopy: function () {            return this.copy();        },        printShowingDecimalPlaces_: function (placesDesired) {            this.isFinite().ifFalse_(block(function () {                nonLocalReturn(this.printString());            }));            return this.asTrueFraction().printShowingDecimalPlaces_(placesDesired);        },        asFloat: function () {            return this;        },        storeOn_base_: function (aStream, base) {            this.isFinite().ifTrue_ifFalse_(block(function () {                this.sign()._equals(number(-1)).ifTrue_(block(function () {                    return aStream.nextPutAll_(string("-"));                }));                base._equals(number(10)).ifFalse_(block(function () {                    return (function () {                        var cascadeReceiver$ = aStream;                        cascadeReceiver$.print_(base);                        return cascadeReceiver$.nextPut_(character("r"));                    }).apply(this);                }));                return this._equals(number(0.0)).ifTrue_ifFalse_(block(function () {                    return aStream.nextPutAll_(string("0.0"));                }), block(function () {                    return this.abs().absPrintExactlyOn_base_(aStream, base);                }));            }), block(function () {                return this.isNaN().ifTrue_ifFalse_(block(function () {                    return aStream.nextPutAll_(string("Float nan"));                }), block(function () {                    return this._greater(number(0.0)).ifTrue_ifFalse_(block(function () {                        return aStream.nextPutAll_(string("Float infinity"));                    }), block(function () {                        return aStream.nextPutAll_(string("Float infinity negated"));                    }));                }));            }));            return this;        },        adaptToComplex_andSend_: function (rcvr, selector) {            return rcvr.perform_with_(selector, this.asComplex());        },        arcSin: function () {            ((this._less(number(-1.0))).or_(block(function () {                return this._greater(number(1.0));            }))).ifTrue_(block(function () {                return this.error_(string("Value out of range"));            }));            ((this._equals(number(-1.0))).or_(block(function () {                return this._equals(number(1.0));            }))).ifTrue_ifFalse_(block(function () {                nonLocalReturn(Halfpi._times(this));            }), block(function () {                nonLocalReturn((this._slash((number(1.0)._minus((this._times(this)))).sqrt())).arcTan());            }));            return this;        },        _equals: function (aNumber) {            primitiveDeclaration();            aNumber.isNumber().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            return aNumber.adaptToFloat_andCompare_(this, string("="));        },        printPaddedWith_to_: function (aCharacter, aNumber) {            var aStream; var digits; var fPadding; var fLen; var iPadding; var iLen; var curLen; var periodIndex;            string("Numeric");            aStream = WriteStream.on_((String.new_(number(10))));            this.printOn_(aStream);            digits = aStream.contents();            periodIndex = digits.indexOf_(character("."));            curLen = periodIndex._minus(number(1));            iLen = aNumber.integerPart();            curLen._less(iLen).ifTrue_ifFalse_(block(function () {                return iPadding = (function () {                    var cascadeReceiver$ = (String.new_((iLen._minus(curLen)).asInteger()));                    cascadeReceiver$.atAllPut_(aCharacter);                    return cascadeReceiver$.yourself();                }).apply(this);            }), block(function () {                return iPadding = string("");            }));            curLen = digits.size()._minus(periodIndex);            fLen = aNumber.fractionPart();            block(function () {                return fLen.fractionPart()._greater(number((1/1000000)));            }).whileTrue_(block(function () {                return fLen = fLen._times(number(10.0));            }));            fLen = fLen.asInteger();            curLen._less(fLen).ifTrue_ifFalse_(block(function () {                return fPadding = (function () {                    var cascadeReceiver$ = (String.new_(fLen._minus(curLen)));                    cascadeReceiver$.atAllPut_(aCharacter);                    return cascadeReceiver$.yourself();                }).apply(this);            }), block(function () {                return fPadding = string("");            }));            return iPadding._comma(digits)._comma(fPadding);        },        adaptToInteger_andSend_: function (rcvr, selector) {            return rcvr.asFloat().perform_with_(selector, this);        },        asApproximateFraction: function () {            return this.asApproximateFractionAtOrder_(number(0));        },        isInfinite: function () {            return this._equals(Infinity).or_(block(function () {                return this._equals(NegativeInfinity);            }));        },        significand: function () {            return this.timesTwoPower_((this.exponent().negated()));        },        successor: function () {            var ulp;            this.isFinite().ifFalse_(block(function () {                (this.isNaN().or_(block(function () {                    return this.positive();                }))).ifTrue_(block(function () {                    nonLocalReturn(this);                }));                nonLocalReturn(Float.fmax().negated());            }));            this._equals(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(Float.fmin());            }));            ulp = this.ulp();            return this._plus((number(0.5)._times(ulp)))._equals(this).ifTrue_ifFalse_(block(function () {                return this._plus(ulp);            }), block(function () {                return this._plus((number(0.5)._times(ulp)));            }));        },        asIEEE32BitWord: function () {            var word1; var word2; var sign; var mantissa; var exponent; var destWord; var truncatedBits; var mask; var roundToUpper;            this._equals(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(this.basicAt_(number(1)));            }));            word1 = this.basicAt_(number(1));            word2 = this.basicAt_(number(2));            sign = word1.bitAnd_(number(2147483648));            exponent = ((word1.bitShift_(number(-20))).bitAnd_(number(2047)))._minus(number(1023))._plus(number(127));            mantissa = (word2.bitShift_(number(-29)))._plus(((word1.bitAnd_(number(1048575))).bitShift_(number(3))));            truncatedBits = (word2.bitAnd_(number(536870911)));            exponent._less(number(-24)).ifTrue_(block(function () {                nonLocalReturn(sign);            }));            exponent._less_equals(number(0)).ifTrue_ifFalse_(block(function () {                mask = number(1).bitShift_(exponent.negated());                mantissa = mantissa.bitOr_(number(8388608));                roundToUpper = (mantissa.bitAnd_(mask)).isZero().not().and_(block(function () {                    return truncatedBits.isZero().not().or_(block(function () {                        return (mantissa.bitAnd_(mask._minus(number(1)))).isZero().not().or_(block(function () {                            return (mantissa.bitAnd_(mask._times(number(2)))).isZero().not();                        }));                    }));                }));                return mantissa = mantissa.bitShift_(exponent._minus(number(1)));            }), block(function () {                return roundToUpper = (truncatedBits.bitAnd_(number(268435456))).isZero().not().and_(block(function () {                    return (mantissa.bitAnd_(number(1))).isZero().not().or_(block(function () {                        return (truncatedBits.bitAnd_(number(268435455))).isZero().not();                    }));                }));            }));            roundToUpper.ifTrue_(block(function () {                mantissa = mantissa._plus(number(1));                return mantissa._greater(number(8388607)).ifTrue_(block(function () {                    mantissa = number(0);                    return exponent = exponent._plus(number(1));                }));            }));            exponent._greater(number(254)).ifTrue_(block(function () {                exponent = number(255);                return this.isNaN().ifTrue_ifFalse_(block(function () {                    return mantissa.isZero().ifTrue_(block(function () {                        return mantissa = number(1);                    }));                }), block(function () {                    return mantissa = number(0);                }));            }));            destWord = (sign.bitOr_(((exponent.max_(number(0))).bitShift_(number(23))))).bitOr_(mantissa);            return destWord;        },        _times: function (aNumber) {            primitiveDeclaration();            return aNumber.adaptToFloat_andSend_(this, string("*"));        },        isZero: function () {            return this._equals(number(0.0));        },        _tilde_equals: function (aNumber) {            primitiveDeclaration();            return this._super._tilde_equals(aNumber);        }    }});Class("Boolean", {    superclass: _Object,    classMethods: {        initializedInstance: function () {            return nil;        },        _new: function () {            this.error_(string("You may not create any more Booleans - this is two-valued logic"));            return this;        }    },    instanceMethods: {        asAsn1Bytes: function () {            return ASN1Stream.encode_(this);        },        ifTrue_ifFalse_: function (trueAlternativeBlock, falseAlternativeBlock) {            this.subclassResponsibility();            return this;        },        or_or_: function (block1, block2) {            this.ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block1.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block2.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            return _false;        },        and_and_and_: function (block1, block2, block3) {            this.ifFalse_(block(function () {                nonLocalReturn(_false);            }));            block1.value().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            block2.value().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            block3.value().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            return _true;        },        not: function () {            this.subclassResponsibility();            return this;        },        or_or_or_: function (block1, block2, block3) {            this.ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block1.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block2.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block3.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            return _false;        },        and_and_: function (block1, block2) {            this.ifFalse_(block(function () {                nonLocalReturn(_false);            }));            block1.value().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            block2.value().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            return _true;        },        or_or_or_or_or_: function (block1, block2, block3, block4, block5) {            this.ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block1.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block2.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block3.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block4.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block5.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            return _false;        },        _and: function (aBoolean) {            this.subclassResponsibility();            return this;        },        veryDeepCopyWith_: function (deepCopier) {            return this;        },        asn1Tag: function () {            return number(1);        },        and_and_and_and_: function (block1, block2, block3, block4) {            this.ifFalse_(block(function () {                nonLocalReturn(_false);            }));            block1.value().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            block2.value().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            block3.value().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            block4.value().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            return _true;        },        eqv_: function (aBoolean) {            return this._equals_equals(aBoolean);        },        _pipe: function (aBoolean) {            this.subclassResponsibility();            return this;        },        or_or_or_or_: function (block1, block2, block3, block4) {            this.ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block1.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block2.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block3.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            block4.value().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            return _false;        },        storeOn_: function (aStream) {            this.printOn_(aStream);            return this;        },        deepCopy: function () {            return this;        },        basicType: function () {            return string("Boolean");        },        clone: function () {            return this;        },        isLiteral: function () {            return _true;        },        jsonOn_: function (aStream) {            this.javascriptOn_(aStream);            return this;        },        ifFalse_ifTrue_: function (falseAlternativeBlock, trueAlternativeBlock) {            this.subclassResponsibility();            return this;        },        shallowCopy: function () {            return this;        },        _equals_equals_greater: function (aBlock) {            return this.not().or_(block(function () {                return aBlock.value();            }));        },        ifTrue_: function (alternativeBlock) {            this.subclassResponsibility();            return this;        },        or_: function (alternativeBlock) {            this.subclassResponsibility();            return this;        },        ifFalse_: function (alternativeBlock) {            this.subclassResponsibility();            return this;        },        newTileMorphRepresentative: function () {            return (function () {                var cascadeReceiver$ = TileMorph._new();                cascadeReceiver$.addArrows();                return cascadeReceiver$.setLiteral_(this);            }).apply(this);        },        and_: function (alternativeBlock) {            this.subclassResponsibility();            return this;        }    }});Class("True", {    superclass: Boolean,    classMethods: {        initializedInstance: function () {            return _true;        }    },    instanceMethods: {        and_: function (alternativeBlock) {            return alternativeBlock.value();        },        _pipe: function (aBoolean) {            return this;        },        ifTrue_: function (alternativeBlock) {            return alternativeBlock.value();        },        ifTrue_ifFalse_: function (trueAlternativeBlock, falseAlternativeBlock) {            return trueAlternativeBlock.value();        },        ifFalse_: function (alternativeBlock) {            return nil;        },        or_: function (alternativeBlock) {            return this;        },        printOn_: function (aStream) {            aStream.nextPutAll_(string("true"));            return this;        },        _and: function (aBoolean) {            return aBoolean;        },        xor_: function (aBoolean) {            return aBoolean.not();        },        not: function () {            return _false;        },        ifFalse_ifTrue_: function (falseAlternativeBlock, trueAlternativeBlock) {            return trueAlternativeBlock.value();        },        asBit: function () {            return number(1);        }    }});Class("False", {    superclass: Boolean,    classMethods: {        initializedInstance: function () {            return _false;        }    },    instanceMethods: {        and_: function (alternativeBlock) {            return this;        },        _pipe: function (aBoolean) {            return aBoolean;        },        ifTrue_: function (alternativeBlock) {            return nil;        },        ifTrue_ifFalse_: function (trueAlternativeBlock, falseAlternativeBlock) {            return falseAlternativeBlock.value();        },        ifFalse_: function (alternativeBlock) {            return alternativeBlock.value();        },        or_: function (alternativeBlock) {            return alternativeBlock.value();        },        printOn_: function (aStream) {            aStream.nextPutAll_(string("false"));            return this;        },        _and: function (aBoolean) {            return this;        },        xor_: function (aBoolean) {            return aBoolean;        },        not: function () {            return _true;        },        ifFalse_ifTrue_: function (falseAlternativeBlock, trueAlternativeBlock) {            return falseAlternativeBlock.value();        },        asBit: function () {            return number(0);        }    }});Class("Exception", {    superclass: _Object,    instanceVariables: [ "$messageText", "$tag", "$signalContext", "$handlerContext", "$outerContext" ],    classMethods: {        handles_: function (exception) {            return exception.isKindOf_(this);        },        _comma: function (anotherException) {            return (function () {                var cascadeReceiver$ = ExceptionSet._new();                cascadeReceiver$.add_(this);                cascadeReceiver$.add_(anotherException);                return cascadeReceiver$.yourself();            }).apply(this);        },        signal: function () {            return this._new().signal();        },        browserIcon: function () {            return string("exception");        },        signal_: function (signalerText) {            return this._new().signal_(signalerText);        }    },    instanceMethods: {        rearmHandlerDuring_: function (aBlock) {            return this.$handlerContext.rearmHandlerDuring_(aBlock);        },        description: function () {            var desc; var mt;            desc = this._class().name().asString();            return (mt = this.messageText())._equals_equals(nil).ifTrue_ifFalse_(block(function () {                return desc;            }), block(function () {                return desc._comma(string(": "))._comma(mt);            }));        },        tag_: function (t) {            this.$tag = t;            return this;        },        defaultReturnValue: function () {            return nil;        },        resignalAs_: function (replacementException) {            this.resumeUnchecked_(replacementException.signal());            return this;        },        isNested: function () {            return this.$handlerContext.nextHandlerContext().canHandleSignal_(this);        },        signal: function () {            this.$signalContext = THIS_CONTEXT.contextTag();            return THIS_CONTEXT.nextHandlerContext().handleSignal_(this);        },        printOn_: function (stream) {            stream.nextPutAll_(this.description());            return this;        },        signal_: function (signalerText) {            this.messageText_(signalerText);            return this.signal();        },        return_: function (returnValue) {            this.$handlerContext.return_(returnValue);            return this;        },        resume_: function (resumptionValue) {            this.isResumable().ifFalse_(block(function () {                return IllegalResumeAttempt.signal();            }));            this.resumeUnchecked_(resumptionValue);            return this;        },        _return: function () {            this.return_(this.defaultReturnValue());            return this;        },        searchFrom_: function (aContext) {            this.$signalContext = aContext.contextTag();            return this;        },        isResumable: function () {            return _true;        },        resumeUnchecked_: function (resumptionValue) {            var ctxt;            this.$outerContext.ifNil_ifNotNil_(block(function () {                return this.$signalContext.return_(resumptionValue);            }), block(function () {                ctxt = this.$outerContext;                this.$outerContext = ctxt.tempAt_(number(1));                return ctxt.return_(resumptionValue);            }));            return this;        },        resume: function () {            this.resume_(this.defaultResumeValue());            return this;        },        tag: function () {            return this.$tag._equals_equals(nil).ifTrue_ifFalse_(block(function () {                return this.messageText();            }), block(function () {                return this.$tag;            }));        },        signalerContext: function () {            return this.$signalContext.findContextSuchThat_(block(function (ctxt) {                return (ctxt.receiver()._equals_equals(this).or_(block(function () {                    return ctxt.receiver()._equals_equals(this._class());                }))).not();            }));        },        messageText_: function (signalerText) {            this.$messageText = signalerText;            return this;        },        receiver: function () {            return this.signalerContext().receiver();        },        pass: function () {            this.$handlerContext.nextHandlerContext().handleSignal_(this);            return this;        },        defaultResumeValue: function () {            return nil;        },        seasidePossibleCauses: function () {            return array([]);        },        defaultAction: function () {            this.subclassResponsibility();            return this;        },        retryUsing_: function (alternativeBlock) {            this.$handlerContext.restartWithNewReceiver_(alternativeBlock);            return this;        },        retry: function () {            this.$handlerContext.restart();            return this;        },        privHandlerContext_: function (aContextTag) {            this.$handlerContext = aContextTag;            return this;        },        messageText: function () {            return this.$messageText.ifNil_(block(function () {                return String.empty();            }));        },        outer: function () {            var prevOuterContext;            this.isResumable().ifTrue_(block(function () {                prevOuterContext = this.$outerContext;                return this.$outerContext = THIS_CONTEXT.contextTag();            }));            this.pass();            return this;        }    }});Class("Error", {    superclass: Exception,    instanceMethods: {        isResumable: function () {            return _false;        },        defaultAction: function () {            UnhandledError.signalForException_(this);            return this;        }    }});Class("Collection", {    superclass: _Object,    classVariables: [ "$MutexForPicking", "$RandomForPicking" ],    classMethods: {        with_with_with_with_with_with_: function (firstObject, secondObject, thirdObject, fourthObject, fifthObject, sixthObject) {            return (function () {                var cascadeReceiver$ = this._new();                cascadeReceiver$.add_(firstObject);                cascadeReceiver$.add_(secondObject);                cascadeReceiver$.add_(thirdObject);                cascadeReceiver$.add_(fourthObject);                cascadeReceiver$.add_(fifthObject);                cascadeReceiver$.add_(sixthObject);                return cascadeReceiver$.yourself();            }).apply(this);        },        with_with_with_with_: function (firstObject, secondObject, thirdObject, fourthObject) {            return (function () {                var cascadeReceiver$ = this._new();                cascadeReceiver$.add_(firstObject);                cascadeReceiver$.add_(secondObject);                cascadeReceiver$.add_(thirdObject);                cascadeReceiver$.add_(fourthObject);                return cascadeReceiver$.yourself();            }).apply(this);        },        with_with_with_: function (firstObject, secondObject, thirdObject) {            return (function () {                var cascadeReceiver$ = this._new();                cascadeReceiver$.add_(firstObject);                cascadeReceiver$.add_(secondObject);                cascadeReceiver$.add_(thirdObject);                return cascadeReceiver$.yourself();            }).apply(this);        },        initialize: function () {            RandomForPicking = Random._new();            MutexForPicking = Semaphore.forMutualExclusion();            return this;        },        randomForPicking: function () {            return RandomForPicking;        },        browserIcon: function () {            return string("collection");        },        with_: function (anObject) {            return (function () {                var cascadeReceiver$ = this._new();                cascadeReceiver$.add_(anObject);                return cascadeReceiver$.yourself();            }).apply(this);        },        ofSize_: function (n) {            return this.new_(n);        },        mutexForPicking: function () {            return MutexForPicking;        },        withAll_: function (aCollection) {            return (function () {                var cascadeReceiver$ = (this.new_(aCollection.size()));                cascadeReceiver$.addAll_(aCollection);                return cascadeReceiver$.yourself();            }).apply(this);        },        with_with_with_with_with_: function (firstObject, secondObject, thirdObject, fourthObject, fifthObject) {            return (function () {                var cascadeReceiver$ = this._new();                cascadeReceiver$.add_(firstObject);                cascadeReceiver$.add_(secondObject);                cascadeReceiver$.add_(thirdObject);                cascadeReceiver$.add_(fourthObject);                cascadeReceiver$.add_(fifthObject);                return cascadeReceiver$.yourself();            }).apply(this);        },        with_with_: function (firstObject, secondObject) {            return (function () {                var cascadeReceiver$ = this._new();                cascadeReceiver$.add_(firstObject);                cascadeReceiver$.add_(secondObject);                return cascadeReceiver$.yourself();            }).apply(this);        }    },    instanceMethods: {        detectMin_: function (aBlock) {            var minElement; var minValue;            this.do_(block(function (each) {                var val;                return minValue._equals_equals(nil).ifFalse_ifTrue_(block(function () {                    return (val = aBlock.value_(each))._less(minValue).ifTrue_(block(function () {                        minElement = each;                        return minValue = val;                    }));                }), block(function () {                    minElement = each;                    return minValue = aBlock.value_(each);                }));            }));            return minElement;        },        detect_ifNone_: function (aBlock, exceptionBlock) {            this.do_(block(function (each) {                return (aBlock.value_(each)).ifTrue_(block(function () {                    nonLocalReturn(each);                }));            }));            return exceptionBlock.value();        },        topologicallySortedUsing_: function (aSortBlock) {            var aSortedCollection;            aSortedCollection = SortedCollection.new_(this.size());            aSortedCollection.sortBlock_(aSortBlock);            this.do_(block(function (each) {                return aSortedCollection.addLast_(each);            }));            return aSortedCollection.sortTopologically();        },        addToMetacelloRepositories_: function (aMetacelloRepositoriesSpec) {            this.do_(block(function (each) {                return each.addToMetacelloRepositories_(aMetacelloRepositoriesSpec);            }));            return this;        },        add_withOccurrences_: function (newObject, anInteger) {            anInteger.timesRepeat_(block(function () {                return this.add_(newObject);            }));            return newObject;        },        setRequiresInMetacelloPackage_: function (aMetacelloPackageSpec) {            aMetacelloPackageSpec.setRequires_(this.asArray());            return this;        },        reject_: function (aBlock) {            return this.select_(block(function (element) {                return (aBlock.value_(element))._equals_equals(_false);            }));        },        asOrderedCollection: function () {            return this.as_(OrderedCollection);        },        degreeCos: function () {            return this.collect_(block(function (each) {                return each.degreeCos();            }));        },        sorted: function () {            return this.sorted_(nil);        },        _backslash_backslash: function (arg) {            return arg.adaptToCollection_andSend_(this, string("\\\\"));        },        identityIncludes_: function (anObject) {            this.do_(block(function (each) {                return anObject._equals_equals(each).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            return _false;        },        median: function () {            return this.asSortedCollection().median();        },        sorted_: function (aSortBlockOrNil) {            return this.asArray().sort_(aSortBlockOrNil);        },        _slash_slash: function (arg) {            return arg.adaptToCollection_andSend_(this, string("//"));        },        emptyCheck: function () {            this.isEmpty().ifTrue_(block(function () {                return this.errorEmptyCollection();            }));            return this;        },        difference_: function (aCollection) {            return this.reject_(block(function (each) {                return aCollection.includes_(each);            }));        },        reject_thenDo_: function (rejectBlock, doBlock) {            return (this.reject_(rejectBlock)).do_(doBlock);        },        ifEmpty_ifNotEmptyDo_: function (emptyBlock, notEmptyBlock) {            this.isEmpty().ifTrue_(block(function () {                nonLocalReturn(emptyBlock.value());            }));            return notEmptyBlock.value_(this);        },        asArray: function () {            var array; var index;            array = _Array.new_(this.size());            index = number(0);            this.do_(block(function (each) {                return array.at_put_((index = index._plus(number(1))), each);            }));            return array;        },        capacity: function () {            return this.size();        },        atRandom: function () {            return this._class().mutexForPicking().critical_(block(function () {                return this.atRandom_(this._class().randomForPicking());            }));        },        detectMax_: function (aBlock) {            var maxElement; var maxValue;            this.do_(block(function (each) {                var val;                return maxValue._equals_equals(nil).ifFalse_ifTrue_(block(function () {                    return (val = aBlock.value_(each))._greater(maxValue).ifTrue_(block(function () {                        maxElement = each;                        return maxValue = val;                    }));                }), block(function () {                    maxElement = each;                    return maxValue = aBlock.value_(each);                }));            }));            return maxElement;        },        negated: function () {            return this.collect_(block(function (a) {                return a.negated();            }));        },        exp: function () {            return this.collect_(block(function (each) {                return each.exp();            }));        },        resolvePackageSpecsNamedForMetacelloMCVersion_visited_ifAbsent_: function (aMetacelloMCVersion, visited, aBlock) {            return aMetacelloMCVersion.allPackagesForSpecs_visited_((this.collect_(block(function (ea) {                return aMetacelloMCVersion.spec().packageNamed_ifAbsent_(ea, aBlock);            }))), visited);        },        copyWithDependent_: function (newElement) {            return this.copyWith_(newElement);        },        fetchRequiredForMetacelloMCVersion_: function (aMetacelloMCVersion) {            return aMetacelloMCVersion.doFetchRequiredFromArray_(this);        },        asIdentitySet: function () {            return (function () {                var cascadeReceiver$ = (IdentitySet.new_(this.size()));                cascadeReceiver$.addAll_(this);                return cascadeReceiver$.yourself();            }).apply(this);        },        count_: function (aBlock) {            var sum;            sum = number(0);            this.do_(block(function (each) {                return (aBlock.value_(each)).ifTrue_(block(function () {                    return sum = sum._plus(number(1));                }));            }));            return sum;        },        asCharacterSet: function () {            return CharacterSet.newFrom_(this);        },        addToMetacelloPackages_: function (aMetacelloPackagesSpec) {            this.do_(block(function (each) {                return each.addToMetacelloPackages_(aMetacelloPackagesSpec);            }));            return this;        },        errorEmptyCollection: function () {            this.error_(string("this collection is empty"));            return this;        },        adaptToNumber_andSend_: function (rcvr, selector) {            return this.collect_(block(function (element) {                return rcvr.perform_with_(selector, element);            }));        },        printOn_delimiter_last_: function (aStream, delimString, lastDelimString) {            var n; var sz;            n = number(1);            sz = this.size();            this.do_separatedBy_(block(function (elem) {                n = n._plus(number(1));                return aStream.print_(elem);            }), block(function () {                return n._equals(sz).ifTrue_ifFalse_(block(function () {                    return aStream.print_(lastDelimString);                }), block(function () {                    return aStream.print_(delimString);                }));            }));            return this;        },        isCollection: function () {            return _true;        },        asByteArray: function () {            var array; var index;            array = ByteArray.new_(this.size());            index = number(0);            this.do_(block(function (each) {                return array.at_put_((index = index._plus(number(1))), each);            }));            return array;        },        contains_: function (aBlock) {            return this.anySatisfy_(aBlock);        },        inspectorFields: function () {            var i;            i = number(0);            return this.asArray().collect_(block(function (each) {                i = i._plus(number(1));                return i._minus_greater(each);            }));        },        asCommaStringAnd: function () {            return String.streamContents_(block(function (s) {                return this.asStringOn_delimiter_last_(s, string(", "), string(" and "));            }));        },        adaptToString_andSend_: function (rcvr, selector) {            return rcvr.asNumber().perform_with_(selector, this);        },        javascriptOn_: function (aStream) {            JSStream.encodeCollection_on_(this, aStream);            return this;        },        occurrencesOf_: function (anObject) {            var tally;            tally = number(0);            this.do_(block(function (each) {                return anObject._equals(each).ifTrue_(block(function () {                    return tally = tally._plus(number(1));                }));            }));            return tally;        },        sign: function () {            return this.collect_(block(function (each) {                return each.sign();            }));        },        ifEmpty_: function (aBlock) {            this.isEmpty().ifTrue_(block(function () {                nonLocalReturn(aBlock.value());            }));            return this;        },        _plus: function (arg) {            return arg.adaptToCollection_andSend_(this, string("+"));        },        tan: function () {            return this.collect_(block(function (each) {                return each.tan();            }));        },        renderOn_: function (html) {            this.do_(block(function (each) {                return html.render_(each);            }));            return this;        },        groupBy_having_: function (keyBlock, selectBlock) {            var result;            result = PluggableDictionary.integerDictionary();            this.do_(block(function (e) {                var key;                key = keyBlock.value_(e);                (result.includesKey_(key)).ifFalse_(block(function () {                    return result.at_put_(key, OrderedCollection._new());                }));                return (result.at_(key)).add_(e);            }));            return result.select_(selectBlock);        },        printOn_: function (aStream) {            this.printNameOn_(aStream);            this.printElementsOn_(aStream);            return this;        },        toBraceStack_: function (itsSize) {            this.size()._tilde_equals(itsSize).ifTrue_(block(function () {                return this.error_(string("Trying to store ")._comma(this.size().printString())._comma(string(" values into "))._comma(itsSize.printString())._comma(string(" variables.")));            }));            THIS_CONTEXT.sender().push_fromIndexable_(itsSize, this);            return this;        },        sum: function () {            return this.reduce_(block(function (a, b) {                return a._plus(b);            }));        },        loadRequiredForMetacelloMCVersion_: function (aMetacelloMCVersion) {            return aMetacelloMCVersion.doLoadRequiredFromArray_(this);        },        adaptToPoint_andSend_: function (rcvr, selector) {            return this.collect_(block(function (element) {                return rcvr.perform_with_(selector, element);            }));        },        roundTo_: function (quantum) {            return this.collect_(block(function (ea) {                return ea.roundTo_(quantum);            }));        },        select_thenDo_: function (selectBlock, doBlock) {            return (this.select_(selectBlock)).do_(doBlock);        },        mergeIntoMetacelloPackages_: function (aMetacelloPackagesSpec) {            this.do_(block(function (each) {                return each.mergeIntoMetacelloPackages_(aMetacelloPackagesSpec);            }));            return this;        },        asCommaString: function () {            return String.streamContents_(block(function (s) {                return this.asStringOn_delimiter_(s, string(", "));            }));        },        size: function () {            var tally;            tally = number(0);            this.do_(block(function (each) {                return tally = tally._plus(number(1));            }));            return tally;        },        errorNotKeyed: function () {            this.error_((string("Instances of {1} do not respond to keyed accessing messages.").translated().format_(array([this._class().name()]))));            return this;        },        storeOn_: function (aStream) {            var noneYet;            aStream.nextPutAll_(string("(("));            aStream.nextPutAll_(this._class().name());            aStream.nextPutAll_(string(" new)"));            noneYet = _true;            this.do_(block(function (each) {                noneYet.ifTrue_ifFalse_(block(function () {                    return noneYet = _false;                }), block(function () {                    return aStream.nextPut_(character(";"));                }));                aStream.nextPutAll_(string(" add: "));                return aStream.store_(each);            }));            noneYet.ifFalse_(block(function () {                return aStream.nextPutAll_(string("; yourself"));            }));            aStream.nextPut_(character(")"));            return this;        },        includesSubstringAnywhere_: function (testString) {            this.do_(block(function (element) {                (element.isString()).ifTrue_(block(function () {                    return (element.includesSubString_(testString)).ifTrue_(block(function () {                        nonLocalReturn(_true);                    }));                }));                return (element.isCollection()).ifTrue_(block(function () {                    return (element.includesSubstringAnywhere_(testString)).ifTrue_(block(function () {                        nonLocalReturn(_true);                    }));                }));            }));            return _false;        },        sqrt: function () {            return this.collect_(block(function (each) {                return each.sqrt();            }));        },        remove_ifAbsent_: function (oldObject, anExceptionBlock) {            this.subclassResponsibility();            return this;        },        degreeSin: function () {            return this.collect_(block(function (each) {                return each.degreeSin();            }));        },        min: function () {            return this.inject_into_(this.anyOne(), block(function (min, each) {                return min.min_(each);            }));        },        minMax: function () {            var min; var max;            min = max = this.anyOne();            this.do_(block(function (each) {                min = min.min_(each);                return max = max.max_(each);            }));            return _Array.with_with_(min, max);        },        raisedTo_: function (arg) {            return arg.adaptToCollection_andSend_(this, string("raisedTo:"));        },        includes_: function (anObject) {            return this.anySatisfy_(block(function (each) {                return each._equals(anObject);            }));        },        intersection_: function (aCollection) {            return this.select_(block(function (each) {                return aCollection.includes_(each);            }));        },        ifNotEmpty_: function (aBlock) {            this.isEmpty().ifFalse_(block(function () {                nonLocalReturn(aBlock.valueWithPossibleArgument_(this));            }));            return this;        },        asStringOn_delimiter_: function (aStream, delimString) {            this.do_separatedBy_(block(function (elem) {                return aStream.nextPutAll_(elem.asString());            }), block(function () {                return aStream.nextPutAll_(delimString);            }));            return this;        },        asSet: function () {            return Set.withAll_(this);        },        chooseOne_: function (caption) {            var m;            m = MenuMorph.entitled_(caption);            this.do_(block(function (ea) {                return m.add_target_selector_argument_(ea, block(function (n) {                    nonLocalReturn(n);                }), string("value:"), ea);            }));            m.invokeModal();            ServiceCancelled.signal();            return this;        },        includesAllOf_: function (aCollection) {            aCollection.do_(block(function (elem) {                return (this.includes_(elem)).ifFalse_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        collect_as_: function (aBlock, aClass) {            return (aClass.new_(this.size())).fillFrom_with_(this, aBlock);        },        allSatisfy_: function (aBlock) {            this.do_(block(function (each) {                return (aBlock.value_(each)).ifFalse_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        do_without_: function (aBlock, anItem) {            return this.do_(block(function (each) {                return anItem._equals(each).ifFalse_(block(function () {                    return aBlock.value_(each);                }));            }));        },        _times: function (arg) {            return arg.adaptToCollection_andSend_(this, string("*"));        },        errorNoMatch: function () {            this.error_(string("collection sizes do not match"));            return this;        },        asSortedCollection_: function (aSortBlock) {            var aSortedCollection;            aSortedCollection = SortedCollection.new_(this.size());            aSortedCollection.sortBlock_(aSortBlock);            aSortedCollection.addAll_(this);            return aSortedCollection;        },        isSequenceable: function () {            return _false;        },        removeAllSuchThat_: function (aBlock) {            this.copy().do_(block(function (each) {                return (aBlock.value_(each)).ifTrue_(block(function () {                    return this.remove_(each);                }));            }));            return this;        },        ifNotEmptyDo_: function (aBlock) {            this.isEmpty().ifFalse_(block(function () {                nonLocalReturn(aBlock.value_(this));            }));            return this;        },        adaptToCollection_andSend_: function (rcvr, selector) {            rcvr.isSequenceable()._and(this.isSequenceable()).ifFalse_(block(function () {                return this.error_(string("Only sequenceable collections may be combined arithmetically"));            }));            return rcvr.with_collect_(this, block(function (rcvrElement, myElement) {                return rcvrElement.perform_with_(selector, myElement);            }));        },        addAll_: function (aCollection) {            aCollection.do_(block(function (each) {                return this.add_(each);            }));            return aCollection;        },        asSortedArray: function () {            return this.asSortedCollection().asArray();        },        max: function () {            return this.inject_into_(this.anyOne(), block(function (max, each) {                return max.max_(each);            }));        },        ceiling: function () {            return this.collect_(block(function (a) {                return a.ceiling();            }));        },        flattenOnStream_: function (aStream) {            return aStream.writeCollection_(this);        },        atRandom_: function (aGenerator) {            var randomIndex; var index;            this.emptyCheck();            randomIndex = aGenerator.nextInt_(this.size());            index = number(1);            this.do_(block(function (each) {                index._equals(randomIndex).ifTrue_(block(function () {                    nonLocalReturn(each);                }));                return index = index._plus(number(1));            }));            return this;        },        copyWithoutAll_: function (aCollection) {            return this.reject_(block(function (each) {                return aCollection.includes_(each);            }));        },        mergeIntoMetacelloRepositories_: function (aMetacelloRepositoriesSpec) {            this.do_(block(function (each) {                return each.mergeIntoMetacelloRepositories_(aMetacelloRepositoriesSpec);            }));            return this;        },        removeFromMetacelloPackages_: function (aMetacelloPackagesSpec) {            this.do_(block(function (each) {                return each.removeFromMetacelloPackages_(aMetacelloPackagesSpec);            }));            return this;        },        fusionWith_: function (aCollection) {            return aCollection.fusionWithCollection_(this);        },        addIfNotPresent_: function (anObject) {            (this.includes_(anObject)).ifFalse_(block(function () {                return this.add_(anObject);            }));            return anObject;        },        do_displayingProgress_: function (aBlock, aStringOrBlock) {            return this.do_displayingProgress_every_(aBlock, aStringOrBlock, number(20));        },        collect_thenDo_: function (collectBlock, doBlock) {            return (this.collect_(collectBlock)).do_(doBlock);        },        abs: function () {            return this.collect_(block(function (a) {                return a.abs();            }));        },        printOn_delimiter_: function (aStream, delimString) {            this.do_separatedBy_(block(function (elem) {                return aStream.print_(elem);            }), block(function () {                return aStream.print_(delimString);            }));            return this;        },        printElementsOn_: function (aStream) {            aStream.nextPut_(character("("));            this.do_separatedBy_(block(function (element) {                return aStream.print_(element);            }), block(function () {                return aStream.space();            }));            aStream.nextPut_(character(")"));            return this;        },        arcTan: function () {            return this.collect_(block(function (each) {                return each.arcTan();            }));        },        sin: function () {            return this.collect_(block(function (each) {                return each.sin();            }));        },        squared: function () {            return this.collect_(block(function (each) {                return each._times(each);            }));        },        printNameOn_: function (aStream) {            this._super.printOn_(aStream);            return this;        },        isEmpty: function () {            return this.size()._equals(number(0));        },        includesAnyOf_: function (aCollection) {            aCollection.do_(block(function (elem) {                return (this.includes_(elem)).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            return _false;        },        log: function () {            return this.collect_(block(function (each) {                return each.log();            }));        },        jsonOn_: function (aStream) {            JSJsonStream.encodeCollection_on_(this, aStream);            return this;        },        any: function () {            return this.anyOne();        },        reciprocal: function () {            return this.collect_(block(function (a) {                return a.reciprocal();            }));        },        _comma: function (aCollection) {            return (function () {                var cascadeReceiver$ = this.copy();                cascadeReceiver$.addAll_(aCollection);                return cascadeReceiver$.yourself();            }).apply(this);        },        fusionWithCollection_: function (aCollection) {            return (CommonCollection.on_(aCollection)).fusionWith_(this);        },        collect_: function (aBlock) {            var newCollection;            newCollection = this.species()._new();            this.do_(block(function (each) {                return newCollection.add_((aBlock.value_(each)));            }));            return newCollection;        },        ifNotEmptyDo_ifEmpty_: function (notEmptyBlock, emptyBlock) {            this.isEmpty().ifFalse_(block(function () {                nonLocalReturn(notEmptyBlock.value_(this));            }));            return emptyBlock.value();        },        recordRequiredForMetacelloMCVersion_: function (aMetacelloMCVersion) {            return aMetacelloMCVersion.doRecordRequiredFromArray_(this);        },        reduce_: function (binaryBlock) {            var first; var nextValue;            first = _true;            this.do_(block(function (each) {                return first.ifTrue_ifFalse_(block(function () {                    nextValue = each;                    return first = _false;                }), block(function () {                    return nextValue = binaryBlock.value_value_(nextValue, each);                }));            }));            first.ifTrue_(block(function () {                return this.errorEmptyCollection();            }));            return nextValue;        },        setIncludesInMetacelloPackage_: function (aMetacelloPackageSpec) {            aMetacelloPackageSpec.setIncludes_(this.asArray());            return this;        },        rounded: function () {            return this.collect_(block(function (a) {                return a.rounded();            }));        },        _slash: function (arg) {            return arg.adaptToCollection_andSend_(this, string("/"));        },        removeAll: function () {            this.do_(block(function (each) {                return this.remove_(each);            }));            return this;        },        detect_: function (aBlock) {            return this.detect_ifNone_(aBlock, block(function () {                return this.errorNotFound_(aBlock);            }));        },        write_: function (anObject) {            return this.add_(anObject);        },        copyWithout_: function (oldElement) {            return this.reject_(block(function (each) {                return each._equals(oldElement);            }));        },        detectSum_: function (aBlock) {            var sum;            sum = number(0);            this.do_(block(function (each) {                return sum = (aBlock.value_(each))._plus(sum);            }));            return sum;        },        arcCos: function () {            return this.collect_(block(function (each) {                return each.arcCos();            }));        },        anyOne: function () {            this.emptyCheck();            this.do_(block(function (each) {                nonLocalReturn(each);            }));            return this;        },        errorKeyNotFound_: function (key) {            return (KeyNotFound.key_(key)).signal();        },        do_displayingProgress_every_: function (aBlock, aStringOrBlock, msecs) {            var size; var labelBlock; var count; var oldLabel; var lastUpdate;            labelBlock = aStringOrBlock.isString().ifTrue_ifFalse_(block(function () {                return block(function (item) {                    return aStringOrBlock;                });            }), block(function () {                return aStringOrBlock;            }));            oldLabel = nil;            count = lastUpdate = number(0);            size = this.size();            string("").displayProgressAt_from_to_during_(Sensor.cursorPoint(), number(0), size, block(function (bar) {                return this.do_(block(function (each) {                    var newLabel;                    (count._equals(number(0)).or_(block(function () {                        return count._plus(number(1))._equals(size).or_(block(function () {                            return (Time.millisecondsSince_(lastUpdate))._greater_equals(msecs);                        }));                    }))).ifTrue_(block(function () {                        bar.value_(count);                        oldLabel._equals((newLabel = (labelBlock.value_(each)).ifNil_(block(function () {                            return oldLabel;                        })))).ifFalse_(block(function () {                            return ProgressNotification.signal_extra_(string(""), (oldLabel = newLabel));                        }));                        return lastUpdate = Time.millisecondClockValue();                    }));                    aBlock.value_(each);                    return count = count._plus(number(1));                }));            }));            return this;        },        associationsDo_: function (aBlock) {            this.do_(aBlock);            return this;        },        floor: function () {            return this.collect_(block(function (a) {                return a.floor();            }));        },        _minus: function (arg) {            return arg.adaptToCollection_andSend_(this, string("-"));        },        union_: function (aCollection) {            return (function () {                var cascadeReceiver$ = this.asSet();                cascadeReceiver$.addAll_(aCollection);                return cascadeReceiver$.yourself();            }).apply(this);        },        collect_into_: function (aBlock, aCollection) {            return aCollection.fillFrom_with_(this, aBlock);        },        cos: function () {            return this.collect_(block(function (each) {                return each.cos();            }));        },        add_: function (newObject) {            this.subclassResponsibility();            return this;        },        truncated: function () {            return this.collect_(block(function (a) {                return a.truncated();            }));        },        removeAll_: function (aCollection) {            aCollection._equals_equals(this).ifTrue_(block(function () {                nonLocalReturn(this.removeAll());            }));            aCollection.do_(block(function (each) {                return this.remove_(each);            }));            return aCollection;        },        asSortedCollection: function () {            return this.as_(SortedCollection);        },        collect_thenSelect_: function (collectBlock, selectBlock) {            return (this.collect_(collectBlock)).select_(selectBlock);        },        anySatisfy_: function (aBlock) {            this.do_(block(function (each) {                return (aBlock.value_(each)).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            return _false;        },        errorNotFound_: function (anObject) {            this.error_(string("Object is not in the collection."));            return this;        },        fillFrom_with_: function (aCollection, aBlock) {            aCollection.do_(block(function (each) {                return this.add_((aBlock.value_(each)));            }));            return this;        },        copyWith_: function (newElement) {            return (function () {                var cascadeReceiver$ = this.copy();                cascadeReceiver$.add_(newElement);                return cascadeReceiver$.yourself();            }).apply(this);        },        noneSatisfy_: function (aBlock) {            this.do_(block(function (item) {                return (aBlock.value_(item)).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        select_thenCollect_: function (selectBlock, collectBlock) {            return (this.select_(selectBlock)).collect_(collectBlock);        },        hash: function () {            var hash;            hash = this.species().hash();            this.size()._less_equals(number(10)).ifTrue_(block(function () {                return this.do_(block(function (elem) {                    return hash = hash.bitXor_(elem.hash());                }));            }));            return hash.bitXor_(this.size().hash());        },        ln: function () {            return this.collect_(block(function (each) {                return each.ln();            }));        },        asStringOn_delimiter_last_: function (aStream, delimString, lastDelimString) {            var n; var sz;            n = number(1);            sz = this.size();            this.do_separatedBy_(block(function (elem) {                n = n._plus(number(1));                return aStream.nextPutAll_(elem.asString());            }), block(function () {                return aStream.nextPutAll_((n._equals(sz).ifTrue_ifFalse_(block(function () {                    return lastDelimString;                }), block(function () {                    return delimString;                }))));            }));            return this;        },        ifNotEmpty_ifEmpty_: function (notEmptyBlock, emptyBlock) {            this.isEmpty().ifFalse_(block(function () {                nonLocalReturn(notEmptyBlock.valueWithPossibleArgument_(this));            }));            return emptyBlock.value();        },        gather_: function (aBlock) {            return _Array.streamContents_(block(function (stream) {                return this.do_(block(function (ea) {                    return stream.nextPutAll_((aBlock.value_(ea)));                }));            }));        },        findFirstInByteString_startingAt_: function (aByteString, start) {            start.to_do_(aByteString.size(), block(function (index) {                return (this.includes_((aByteString.at_(index)))).ifTrue_(block(function () {                    nonLocalReturn(index);                }));            }));            return number(0);        },        removeFromMetacelloRepositories_: function (aMetacelloRepositoriesSpec) {            this.do_(block(function (each) {                return each.removeFromMetacelloRepositories_(aMetacelloRepositoriesSpec);            }));            return this;        },        adaptToComplex_andSend_: function (rcvr, selector) {            return this.collect_(block(function (element) {                return rcvr.perform_with_(selector, element);            }));        },        arcSin: function () {            return this.collect_(block(function (each) {                return each.arcSin();            }));        },        setLoadsInMetacelloProject_: function (aMetacelloPackageSpec) {            aMetacelloPackageSpec.setLoads_(this.asArray());            return this;        },        removeAllFoundIn_: function (aCollection) {            aCollection.do_(block(function (each) {                return this.remove_ifAbsent_(each, block(function () {;                }));            }));            return aCollection;        },        sameElements_: function (aCollection) {            return (this.allSatisfy_(block(function (each) {                return aCollection.includes_(each);            }))).and_(block(function () {                return aCollection.allSatisfy_(block(function (each) {                    return this.includes_(each);                }));            }));        },        range: function () {            return this.max()._minus(this.min());        },        notEmpty: function () {            return this.isEmpty().not();        },        average: function () {            return this.sum()._slash(this.size());        },        select_: function (aBlock) {            var newCollection;            newCollection = this.species()._new();            this.do_(block(function (each) {                return (aBlock.value_(each)).ifTrue_(block(function () {                    return newCollection.add_(each);                }));            }));            return newCollection;        },        fold_: function (binaryBlock) {            return this.reduce_(binaryBlock);        },        do_: function (aBlock) {            this.subclassResponsibility();            return this;        },        asIpByteArray: function () {            (this.size()._equals(number(4))).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("Invalid IP Address")));            }));            return this.asByteArray();        },        remove_: function (oldObject) {            return this.remove_ifAbsent_(oldObject, block(function () {                return this.errorNotFound_(oldObject);            }));        },        inject_into_: function (thisValue, binaryBlock) {            var nextValue;            nextValue = thisValue;            this.do_(block(function (each) {                return nextValue = binaryBlock.value_value_(nextValue, each);            }));            return nextValue;        },        ifEmpty_ifNotEmpty_: function (emptyBlock, notEmptyBlock) {            this.isEmpty().ifTrue_(block(function () {                nonLocalReturn(emptyBlock.value());            }));            return notEmptyBlock.valueWithPossibleArgument_(this);        },        asBag: function () {            return Bag.withAll_(this);        },        isEmptyOrNil: function () {            return this.isEmpty();        },        contents: function () {            return this;        },        isZero: function () {            return _false;        },        do_separatedBy_: function (elementBlock, separatorBlock) {            var beforeFirst;            beforeFirst = _true;            this.do_(block(function (each) {                beforeFirst.ifTrue_ifFalse_(block(function () {                    return beforeFirst = _false;                }), block(function () {                    return separatorBlock.value();                }));                return elementBlock.value_(each);            }));            return this;        }    }});Class("SequenceableCollection", {    superclass: Collection,    classMethods: {        new_streamContents_: function (newSize, blockWithArg) {            var stream;            stream = WriteStream.on_((this.new_(newSize)));            blockWithArg.value_(stream);            stream.position()._equals(newSize).ifTrue_ifFalse_(block(function () {                nonLocalReturn(stream.originalContents());            }), block(function () {                nonLocalReturn(stream.contents());            }));            return this;        },        streamContents_: function (blockWithArg) {            return this.new_streamContents_(number(100), blockWithArg);        },        streamContents_limitedTo_: function (blockWithArg, sizeLimit) {            var stream;            stream = LimitedWriteStream.on_((this.new_((number(100).min_(sizeLimit)))));            stream.setLimit_limitBlock_(sizeLimit, block(function () {                nonLocalReturn(stream.contents());            }));            blockWithArg.value_(stream);            return stream.contents();        }    },    instanceMethods: {        copyFrom_to_: function (start, stop) {            var newSize;            newSize = stop._minus(start)._plus(number(1));            return (this.species().new_(newSize)).replaceFrom_to_with_startingAt_(number(1), newSize, this, start);        },        with_collect_: function (otherCollection, twoArgBlock) {            var result;            otherCollection.size()._equals(this.size()).ifFalse_(block(function () {                return this.error_(string("otherCollection must be the same size"));            }));            result = this.species().new_(this.size());            number(1).to_do_(this.size(), block(function (index) {                return result.at_put_(index, (twoArgBlock.value_value_((this.at_(index)), (otherCollection.at_(index)))));            }));            return result;        },        last: function () {            return this.at_(this.size());        },        overlappingPairsCollect_: function (aBlock) {            var retval;            retval = this.species().new_(this.size()._minus(number(1)));            number(1).to_do_(this.size()._minus(number(1)), block(function (i) {                return retval.at_put_(i, (aBlock.value_value_((this.at_(i)), (this.at_(i._plus(number(1)))))));            }));            return retval;        },        splitBy_: function (aCollection) {            return _Array.streamContents_(block(function (stream) {                return this.splitBy_do_(aCollection, block(function (each) {                    return stream.nextPut_(each);                }));            }));        },        copyWithoutIndex_: function (index) {            var copy;            copy = this.species().ofSize_(this.size()._minus(number(1)));            copy.replaceFrom_to_with_startingAt_(number(1), index._minus(number(1)), this, number(1));            copy.replaceFrom_to_with_startingAt_(index, copy.size(), this, index._plus(number(1)));            return copy;        },        indexOfAnyOf_ifAbsent_: function (aCollection, exceptionBlock) {            return this.indexOfAnyOf_startingAt_ifAbsent_(aCollection, number(1), exceptionBlock);        },        shuffled: function () {            return this.shuffledBy_(Collection.randomForPicking());        },        asCubic: function () {            this.assert_(block(function () {                return this.size()._equals(number(4));            }));            this.assert_(block(function () {                return this.allSatisfy_(block(function (each) {                    return each.isPoint();                }));            }));            return Cubic.withAll_(this);        },        copyLast_: function (num) {            return this.last_(num);        },        allButFirstDo_: function (block) {            number(2).to_do_(this.size(), block(function (index) {                return block.value_((this.at_(index)));            }));            return this;        },        changeOfChangesInSlopes_: function (slopes) {            var n; var changes;            n = this.size();            n._equals(slopes.size()).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("vertices and slopes differ in number")));            }));            changes = _Array.new_(n);            (number(1).to_(n)).do_(block(function (i) {                return changes.at_put_(i, (this.at_(i))._minus((this.atWrap_(i._plus(number(1)))))._times(number(2))._plus((slopes.at_(i)))._plus((slopes.atWrap_(i._plus(number(1))))));            }));            return changes;        },        atLast_: function (indexFromEnd) {            return this.atLast_ifAbsent_(indexFromEnd, block(function () {                return this.error_(string("index out of range"));            }));        },        findBinary_: function (aBlock) {            return this.findBinary_do_ifNone_(aBlock, block(function (found) {                return found;            }), block(function () {                return this.errorNotFound_(aBlock);            }));        },        sorted: function () {            return this.sorted_(block(function (a, b) {                return a._less_equals(b);            }));        },        copyWithFirst_: function (newElement) {            var newIC;            newIC = this.species().ofSize_(this.size()._plus(number(1)));            newIC.replaceFrom_to_with_startingAt_(number(2), this.size()._plus(number(1)), this, number(1));            newIC.at_put_(number(1), newElement);            return newIC;        },        hasEqualElements_: function (otherCollection) {            var size;            (otherCollection.isKindOf_(SequenceableCollection)).ifFalse_(block(function () {                nonLocalReturn(_false);            }));            (size = this.size())._equals(otherCollection.size()).ifFalse_(block(function () {                nonLocalReturn(_false);            }));            number(1).to_do_(size, block(function (index) {                return (this.at_(index))._equals((otherCollection.at_(index))).ifFalse_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        asFloatArray: function () {            var floatArray;            floatArray = FloatArray.new_(this.size());            number(1).to_do_(this.size(), block(function (i) {                return floatArray.at_put_(i, (this.at_(i)).asFloat());            }));            return floatArray;        },        beginsWithSubCollection_: function (aSequenceableCollection) {            return this.beginsWith_(aSequenceableCollection);        },        second: function () {            return this.at_(number(2));        },        sixth: function () {            return this.at_(number(6));        },        identityIndexOf_ifAbsent_: function (anElement, exceptionBlock) {            number(1).to_do_(this.size(), block(function (i) {                return (this.at_(i))._equals_equals(anElement).ifTrue_(block(function () {                    nonLocalReturn(i);                }));            }));            return exceptionBlock.value();        },        after_ifAbsent_: function (target, exceptionBlock) {            var index;            index = this.indexOf_(target);            return (index._equals(number(0)).or_(block(function () {                return index._equals(this.size());            }))).ifTrue_ifFalse_(block(function () {                return exceptionBlock.value();            }), block(function () {                return this.at_(index._plus(number(1)));            }));        },        findBinary_ifNone_: function (aBlock, exceptionBlock) {            return this.findBinary_do_ifNone_(aBlock, block(function (found) {                return found;            }), exceptionBlock);        },        lastIndexOf_: function (anElement) {            return this.lastIndexOf_startingAt_ifAbsent_(anElement, this.size(), block(function () {                return number(0);            }));        },        endsWith_: function (aSequenceableCollection) {            var start;            (aSequenceableCollection.isEmpty().or_(block(function () {                return this.size()._less(aSequenceableCollection.size());            }))).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            start = this.size()._minus(aSequenceableCollection.size());            aSequenceableCollection.withIndexDo_(block(function (each, index) {                return (this.at_(start._plus(index)))._tilde_equals(each).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        sorted_: function (sortBlock) {            return this.sortBy_(sortBlock);        },        asn1Tag: function () {            return number(48);        },        identityIndexOf_: function (anElement) {            return this.identityIndexOf_ifAbsent_(anElement, block(function () {                return number(0);            }));        },        asArray: function () {            return _Array.withAll_(this);        },        allButLast: function () {            return this.allButLast_(number(1));        },        before_: function (target) {            return this.before_ifAbsent_(target, block(function () {                return this.errorNotFound_(target);            }));        },        closedCubicSlopes_: function (clampedSlopes) {            var slopes; var tripleKnots; var list;            (list = clampedSlopes.closedFillinList())._equals(array([number(0).to_(this.size())])).ifTrue_(block(function () {                nonLocalReturn(this.closedCubicSlopes());            }));            tripleKnots = this._times(number(3.0));            slopes = clampedSlopes.copy();            list.do_(block(function (r) {                return slopes.slopesWith_from_to_(tripleKnots, r.first(), r.last());            }));            return slopes;        },        permutationsStartingAt_do_: function (anInteger, aBlock) {            anInteger._greater(this.size()).ifTrue_(block(function () {                nonLocalReturn(this);            }));            anInteger._equals(this.size()).ifTrue_(block(function () {                nonLocalReturn(aBlock.value_(this));            }));            anInteger.to_do_(this.size(), block(function (i) {                this.swap_with_(anInteger, i);                this.permutationsStartingAt_do_(anInteger._plus(number(1)), aBlock);                return this.swap_with_(anInteger, i);            }));            return this;        },        replaceAll_with_: function (oldObject, newObject) {            var index;            index = this.indexOf_startingAt_ifAbsent_(oldObject, number(1), block(function () {                return number(0);            }));            block(function () {                return index._equals(number(0));            }).whileFalse_(block(function () {                this.at_put_(index, newObject);                return index = this.indexOf_startingAt_ifAbsent_(oldObject, index._plus(number(1)), block(function () {                    return number(0);                }));            }));            return this;        },        copyUpTo_: function (anElement) {            return this.first_((this.indexOf_ifAbsent_(anElement, block(function () {                nonLocalReturn(this.copy());            })))._minus(number(1)));        },        endsWithAnyOf_: function (aCollection) {            return aCollection.anySatisfy_(block(function (suffix) {                return this.endsWith_(suffix);            }));        },        shuffledBy_: function (aRandom) {            return this.copy().shuffleBy_(aRandom);        },        with_do_: function (otherCollection, twoArgBlock) {            otherCollection.size()._equals(this.size()).ifFalse_(block(function () {                return this.error_(string("otherCollection must be the same size"));            }));            number(1).to_do_(this.size(), block(function (index) {                return twoArgBlock.value_value_((this.at_(index)), (otherCollection.at_(index)));            }));            return this;        },        asIntegerArray: function () {            var intArray;            intArray = IntegerArray.new_(this.size());            number(1).to_do_(this.size(), block(function (i) {                return intArray.at_put_(i, (this.at_(i)));            }));            return intArray;        },        replaceFrom_to_with_startingAt_: function (start, stop, replacement, repStart) {            var index; var repOff;            repOff = repStart._minus(start);            index = start._minus(number(1));            block(function () {                return (index = index._plus(number(1)))._less_equals(stop);            }).whileTrue_(block(function () {                return this.at_put_(index, (replacement.at_(repOff._plus(index))));            }));            return this;        },        atAllPut_: function (anObject) {            var size;            (size = this.size())._greater(number(26)).ifTrue_ifFalse_(block(function () {                return this.from_to_put_(number(1), size, anObject);            }), block(function () {                return number(1).to_do_(size, block(function (index) {                    return this.at_put_(index, anObject);                }));            }));            return this;        },        middle: function () {            return this.at_(this.size()._slash_slash(number(2))._plus(number(1)));        },        sortBy_: function (aBlock) {            return (function () {                var cascadeReceiver$ = this.asOrderedCollection();                cascadeReceiver$.sort_(aBlock);                return cascadeReceiver$.yourself();            }).apply(this);        },        indexOfSubCollection_startingAt_: function (aSubCollection, anIndex) {            return this.indexOfSubCollection_startingAt_ifAbsent_(aSubCollection, anIndex, block(function () {                return number(0);            }));        },        asByteArray: function () {            return ByteArray.withAll_(this);        },        indexOf_ifAbsent_: function (anElement, exceptionBlock) {            return this.indexOf_startingAt_ifAbsent_(anElement, number(1), exceptionBlock);        },        beginsWith_: function (aSequenceableCollection) {            (aSequenceableCollection.isEmpty().or_(block(function () {                return this.size()._less(aSequenceableCollection.size());            }))).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            aSequenceableCollection.withIndexDo_(block(function (each, index) {                return (this.at_(index))._tilde_equals(each).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        allButFirst_: function (n) {            return this.copyFrom_to_(n._plus(number(1)), this.size());        },        withIndexDo_: function (elementAndIndexBlock) {            number(1).to_do_(this.size(), block(function (index) {                return elementAndIndexBlock.value_value_((this.at_(index)), index);            }));            return this;        },        findBinaryIndex_: function (aBlock) {            return this.findBinaryIndex_do_ifNone_(aBlock, block(function (found) {                return found;            }), block(function () {                return this.errorNotFound_(aBlock);            }));        },        integerAt_put_: function (index, value) {            return this.at_put_(index, value);        },        atPin_: function (index) {            index._less(number(1)).ifTrue_(block(function () {                nonLocalReturn(this.first());            }));            index._greater(this.size()).ifTrue_(block(function () {                nonLocalReturn(this.last());            }));            return this.at_(index);        },        atLast_put_: function (indexFromEnd, obj) {            return this.at_put_(this.size()._plus(number(1))._minus(indexFromEnd), obj);        },        reversed: function () {            var n; var result; var src;            n = this.size();            result = this.species().new_(n);            src = n._plus(number(1));            number(1).to_do_(n, block(function (i) {                return result.at_put_(i, (this.at_((src = src._minus(number(1))))));            }));            return result;        },        from_to_do_: function (start, stop, aBlock) {            start.to_do_(stop, block(function (index) {                return aBlock.value_((this.at_(index)));            }));            return this;        },        permutationsDo_: function (aBlock) {            this.shallowCopy().permutationsStartingAt_do_(number(1), aBlock);            return this;        },        at_ifAbsent_: function (index, exceptionBlock) {            (index._less_equals(this.size()).and_(block(function () {                return number(1)._less_equals(index);            }))).ifTrue_(block(function () {                nonLocalReturn(this.at_(index));            }));            return exceptionBlock.value();        },        withIndexCollect_: function (elementAndIndexBlock) {            var result;            result = this.species().new_(this.size());            number(1).to_do_(this.size(), block(function (index) {                return result.at_put_(index, (elementAndIndexBlock.value_value_((this.at_(index)), index)));            }));            return result;        },        nilTransitions: function () {            var changes; var nilSkip;            changes = OrderedCollection._new();            nilSkip = _true;            number(1).to_do_(this.size(), block(function (i) {                return (this.atWrap_(i)).isNil()._equals_equals(nilSkip).ifFalse_(block(function () {                    changes.add_(i);                    return nilSkip = nilSkip.not();                }));            }));            return changes;        },        asDigitsToPower_do_: function (anInteger, aBlock) {            var aCollection;            aCollection = _Array.new_(anInteger);            this.asDigitsAt_in_do_(number(1), aCollection, aBlock);            return this;        },        indexOfAnyOf_startingAt_: function (aCollection, start) {            return this.indexOfAnyOf_startingAt_ifAbsent_(aCollection, start, block(function () {                return number(0);            }));        },        findLast_: function (aBlock) {            var index;            index = this.size()._plus(number(1));            block(function () {                return (index = index._minus(number(1)))._greater_equals(number(1));            }).whileTrue_(block(function () {                return (aBlock.value_((this.at_(index)))).ifTrue_(block(function () {                    nonLocalReturn(index);                }));            }));            return number(0);        },        reverse: function () {            this.deprecated_(string("Use #reversed"));            return this.reversed();        },        splitBy_do_: function (aCollection, aBlock) {            var lastIndex; var nextIndex;            lastIndex = number(1);            block(function () {                nextIndex = this.indexOfSubCollection_startingAt_(aCollection, lastIndex);                return nextIndex._equals(number(0));            }).whileFalse_(block(function () {                aBlock.value_((this.copyFrom_to_(lastIndex, nextIndex._minus(number(1)))));                return lastIndex = nextIndex._plus(aCollection.size());            }));            aBlock.value_((this.copyFrom_to_(lastIndex, this.size())));            return this;        },        grownBy_: function (length) {            var newCollection;            newCollection = this.species().ofSize_(this.size()._plus(length));            newCollection.replaceFrom_to_with_startingAt_(number(1), this.size(), this, number(1));            return newCollection;        },        swap_with_: function (oneIndex, anotherIndex) {            var element;            element = this.at_(oneIndex);            this.at_put_(oneIndex, (this.at_(anotherIndex)));            this.at_put_(anotherIndex, element);            return this;        },        replaceFrom_to_with_: function (start, stop, replacement) {            replacement.size()._equals((stop._minus(start)._plus(number(1)))).ifFalse_(block(function () {                return this.error_(string("Size of replacement doesnt match"));            }));            return this.replaceFrom_to_with_startingAt_(start, stop, replacement, number(1));        },        groupsOf_atATimeCollect_: function (n, aBlock) {            var passArray;            passArray = aBlock.numArgs()._equals(number(1));            return (n.to_by_(this.size(), n)).collect_(block(function (index) {                var args;                args = (this.copyFrom_to_(index._minus(n)._plus(number(1)), index)).asArray();                return passArray.ifTrue_ifFalse_(block(function () {                    return aBlock.value_(args);                }), block(function () {                    return aBlock.valueWithArguments_(args);                }));            }));        },        remove_ifAbsent_: function (oldObject, anExceptionBlock) {            this.shouldNotImplement();            return this;        },        allButFirst: function () {            return this.allButFirst_(number(1));        },        copyUpToLast_: function (anElement) {            return this.first_((this.lastIndexOf_ifAbsent_(anElement, block(function () {                nonLocalReturn(this.copy());            })))._minus(number(1)));        },        copyEmpty: function () {            return this.species().new_(number(0));        },        groupsOf_atATimeDo_: function (n, aBlock) {            var passArray;            passArray = (aBlock.numArgs()._equals(number(1)));            n.to_by_do_(this.size(), n, block(function (index) {                var args;                args = (this.copyFrom_to_(index._minus(n)._plus(number(1)), index)).asArray();                return passArray.ifTrue_ifFalse_(block(function () {                    return aBlock.value_(args);                }), block(function () {                    return aBlock.valueWithArguments_(args);                }));            }));            return this;        },        closedCubicSlopes: function () {            var v; var w; var x; var y; var z; var n1; var D; var F; var G; var H;            n1 = this.size();            n1._less(number(3)).ifTrue_(block(function () {                return this.error_(string("Less than 3 points makes a poor curve"));            }));            v = _Array.new_(n1);            w = _Array.new_(n1);            y = _Array.new_(n1);            D = _Array.new_(n1);            x = this;            z = number(1.0)._slash(number(4.0));            v.at_put_(number(2), z);            w.at_put_(number(2), z);            y.at_put_(number(1), z._times(number(3.0))._times(((x.at_(number(2)))._minus((x.at_(n1))))));            H = number(4.0);            F = number(3)._times(((x.at_(number(1)))._minus((x.at_(n1._minus(number(1)))))));            G = number(1);            number(2).to_do_(n1._minus(number(1)), block(function (k) {                z = number(1.0)._slash((number(4.0)._minus((v.at_(k)))));                v.at_put_(k._plus(number(1)), z);                w.at_put_(k._plus(number(1)), z.negated()._times((w.at_(k))));                y.at_put_(k, z._times((number(3.0)._times(((x.at_(k._plus(number(1))))._minus((x.at_(k._minus(number(1)))))))._minus((y.at_(k._minus(number(1))))))));                H = H._minus((G._times((w.at_(k)))));                F = F._minus((G._times((y.at_(k._minus(number(1)))))));                return G = (v.at_(k)).negated()._times(G);            }));            H = H._minus((G._plus(number(1))._times(((v.at_(n1))._plus((w.at_(n1)))))));            y.at_put_(n1, F._minus((G._plus(number(1))._times((y.at_(n1._minus(number(1))))))));            D.at_put_(n1, (y.at_(n1))._slash(H));            D.at_put_(n1._minus(number(1)), (y.at_(n1._minus(number(1))))._minus(((v.at_(n1))._plus((w.at_(n1)))._times((D.at_(n1))))));            (number(1).to_(n1._minus(number(2)))).reverseDo_(block(function (k) {                return D.at_put_(k, (y.at_(k))._minus(((v.at_(k._plus(number(1))))._times((D.at_(k._plus(number(1)))))))._minus(((w.at_(k._plus(number(1))))._times((D.at_(n1))))));            }));            return D;        },        errorOutOfBounds: function () {            this.error_(string("indices are out of bounds"));            return this;        },        reverseWith_do_: function (aSequenceableCollection, aBlock) {            this.size()._tilde_equals(aSequenceableCollection.size()).ifTrue_(block(function () {                nonLocalReturn(this.errorNoMatch());            }));            this.size().to_by_do_(number(1), number(-1), block(function (index) {                return aBlock.value_value_((this.at_(index)), (aSequenceableCollection.at_(index)));            }));            return this;        },        fifth: function () {            return this.at_(number(5));        },        includes_: function (anObject) {            return (this.indexOf_(anObject))._tilde_equals(number(0));        },        ninth: function () {            return this.at_(number(9));        },        _equals: function (otherCollection) {            this._equals_equals(otherCollection).ifTrue_(block(function () {                nonLocalReturn(_true);            }));            this.species()._equals_equals(otherCollection.species()).ifFalse_(block(function () {                nonLocalReturn(_false);            }));            return this.hasEqualElements_(otherCollection);        },        copyReplaceAll_with_asTokens_: function (oldSubstring, newSubstring, ifTokens) {            var aString; var startSearch; var currentIndex; var endIndex;            (ifTokens.and_(block(function () {                return (this.isString()).not();            }))).ifTrue_(block(function () {                return (this.isKindOf_(Text)).ifFalse_(block(function () {                    return this.error_(string("Token replacement only valid for Strings"));                }));            }));            aString = this;            startSearch = number(1);            block(function () {                return (currentIndex = aString.indexOfSubCollection_startingAt_(oldSubstring, startSearch))._greater(number(0));            }).whileTrue_(block(function () {                endIndex = currentIndex._plus(oldSubstring.size())._minus(number(1));                return (ifTokens.not().or_(block(function () {                    return (currentIndex._equals(number(1)).or_(block(function () {                        return (aString.at_(currentIndex._minus(number(1)))).isAlphaNumeric().not();                    }))).and_(block(function () {                        return endIndex._equals(aString.size()).or_(block(function () {                            return (aString.at_(endIndex._plus(number(1)))).isAlphaNumeric().not();                        }));                    }));                }))).ifTrue_ifFalse_(block(function () {                    aString = aString.copyReplaceFrom_to_with_(currentIndex, endIndex, newSubstring);                    return startSearch = currentIndex._plus(newSubstring.size());                }), block(function () {                    return ifTokens.ifTrue_ifFalse_(block(function () {                        return startSearch = currentIndex._plus(number(1));                    }), block(function () {                        return startSearch = currentIndex._plus(newSubstring.size());                    }));                }));            }));            return aString;        },        closedFillinList: function () {            var changes; var n;            changes = this.nilTransitions();            changes.isEmpty().ifTrue_(block(function () {                nonLocalReturn(array([number(0).to_(this.size())]));            }));            changes._equals(array([number(1)])).ifTrue_(block(function () {                nonLocalReturn(array([]));            }));            changes._equals(array([n = this.size()])).ifTrue_(block(function () {                nonLocalReturn(array([n.to_(n._plus(n))]));            }));            changes.size().even().ifTrue_ifFalse_(block(function () {                return changes.add_(this.size()._plus((changes.at_(number(1)))));            }), block(function () {                return changes.first()._equals(number(1)).ifFalse_(block(function () {                    return (function () {                        var cascadeReceiver$ = changes;                        cascadeReceiver$.add_(this.size()._plus(number(1)));                        return cascadeReceiver$.add_(this.size()._plus(changes.first()));                    }).apply(this);                }));            }));            return changes.allButFirst().pairsCollect_(block(function (s, e) {                return (s._minus(number(1)).to_(e));            }));        },        replace_: function (aBlock) {            number(1).to_do_(this.size(), block(function (index) {                return this.at_put_(index, (aBlock.value_((this.at_(index)))));            }));            return this;        },        transitions_: function (aSelectBlock) {            var changes; var boolSkip;            changes = OrderedCollection._new();            boolSkip = _true;            this.withIndexDo_(block(function (e, i) {                return (aSelectBlock.value_(e))._equals_equals(boolSkip).ifFalse_(block(function () {                    changes.add_(i);                    return boolSkip = boolSkip.not();                }));            }));            return changes;        },        upTo_: function (anObject) {            this.deprecated_(string("Use #copyUpTo:"));            return this.copyUpTo_(anObject);        },        copyUpThrough_: function (anElement) {            return this.first_((this.indexOf_ifAbsent_(anElement, block(function () {                nonLocalReturn(this.copy());            }))));        },        cubicPointPolynomialAt_: function (vIndex) {            return ((number(1).to_(number(4))).collect_(block(function (i) {                return ((this.at_(i)).at_(vIndex))._at(((this.at_(number(4)._plus(i))).at_(vIndex)));            }))).asCubic();        },        assertSlopesWith_from_to_: function (knots, start, end) {            this.assert_(block(function () {                return this.size()._equals(knots.size());            }));            this.assert_(block(function () {                return end._greater(start);            }));            this.assert_(block(function () {                return number(0)._less(start).and_(block(function () {                    return start._less_equals(knots.size());                }));            }));            this.assert_(block(function () {                return end._less_equals(knots.size())._plus(start);            }));            array([start, end]).do_(block(function (index) {                var slope;                slope = (this.at_(index));                return this.assert_(block(function () {                    return slope.isNil().or_(block(function () {                        return slope.isNumber().or_(block(function () {                            return slope.isPoint();                        }));                    }));                }));            }));            return _true;        },        atWrap_: function (index) {            return this.at_(index._minus(number(1))._backslash_backslash(this.size())._plus(number(1)));        },        do_without_: function (aBlock, anItem) {            number(1).to_do_(this.size(), block(function (index) {                return anItem._equals((this.at_(index))).ifFalse_(block(function () {                    return aBlock.value_((this.at_(index)));                }));            }));            return this;        },        collectWithIndex_: function (elementAndIndexBlock) {            return this.withIndexCollect_(elementAndIndexBlock);        },        polynomialEval_: function (thisX) {            var sum; var valToPower;            sum = this.first();            valToPower = thisX;            number(2).to_do_(this.size(), block(function (ind) {                sum = sum._plus(((this.at_(ind))._times(valToPower)));                return valToPower = valToPower._times(thisX);            }));            return sum;        },        isSequenceable: function () {            return _true;        },        asColorArray: function () {            return ColorArray.withAll_(this);        },        nextToLast: function () {            return this.at_(this.size()._minus(number(1)));        },        pairsCollect_: function (aBlock) {            return (number(1).to_(this.size()._slash_slash(number(2)))).collect_(block(function (index) {                return aBlock.value_value_((this.at_(number(2)._times(index)._minus(number(1)))), (this.at_(number(2)._times(index))));            }));        },        findBinaryIndex_ifNone_: function (aBlock, exceptionBlock) {            return this.findBinaryIndex_do_ifNone_(aBlock, block(function (found) {                return found;            }), exceptionBlock);        },        paddedWith_do_: function (otherCollection, twoArgBlock) {            number(1).to_do_((this.size().max_(otherCollection.size())), block(function (index) {                return twoArgBlock.value_value_((this.at_ifAbsent_(index, block(function () {;                }))), (otherCollection.at_ifAbsent_(index, block(function () {;                }))));            }));            return this;        },        forceTo_paddingStartWith_: function (length, elem) {            var newCollection; var padLen;            newCollection = this.species().ofSize_(length);            padLen = length._minus(this.size()).max_(number(0));            newCollection.from_to_put_(number(1), padLen, elem);            newCollection.replaceFrom_to_with_startingAt_(padLen._plus(number(1)), ((padLen._plus(this.size())).min_(length)), this, number(1));            return newCollection;        },        explorerContents: function () {            return _Array.new_streamContents_(this.size(), block(function (stream) {                return number(1).to_do_(this.size(), block(function (index) {                    return stream.nextPut_((ObjectExplorerWrapper.with_name_model_((this.at_(index)), index.printString(), this)));                }));            }));        },        endsWithSubCollection_: function (aSequenceableCollection) {            return this.endsWith_(aSequenceableCollection);        },        atRandom_: function (aGenerator) {            return this.at_((aGenerator.nextInt_(this.size())));        },        after_: function (target) {            return this.after_ifAbsent_(target, block(function () {                return this.errorNotFound_(target);            }));        },        copyAfterLast_: function (anElement) {            return this.allButFirst_((this.lastIndexOf_ifAbsent_(anElement, block(function () {                nonLocalReturn(this.copyEmpty());            }))));        },        flipRotated_: function (flipIndex) {            var n; var result; var src; var twist;            n = this.size();            flipIndex._backslash_backslash((n._times(number(2))))._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            result = this.species().new_(n);            twist = flipIndex._slash_slash(number(2))._backslash_backslash(n);            src = number(0);            (flipIndex.even().ifTrue_ifFalse_(block(function () {                return number(1)._plus(twist).to_(n._plus(twist));            }), block(function () {                return n._minus(number(1))._minus(twist).to_by_(twist.negated(), number(-1));            }))).do_(block(function (i) {                return result.at_put_((src = src._plus(number(1))), (this.atWrap_(i)));            }));            return result;        },        doWithIndex_: function (elementAndIndexBlock) {            return this.withIndexDo_(elementAndIndexBlock);        },        putOn_: function (aStream) {            this.do_(block(function (each) {                return each.putOn_(aStream);            }));            return this;        },        transitions: function () {            var changes; var boolSkip;            changes = OrderedCollection._new();            boolSkip = _true;            this.withIndexDo_(block(function (truth, i) {                return truth._equals_equals(boolSkip).ifFalse_(block(function () {                    changes.add_(i);                    return boolSkip = boolSkip.not();                }));            }));            return changes;        },        shuffleBy_: function (aRandom) {            this.size().to_by_do_(number(2), number(-1), block(function (i) {                return this.swap_with_(i, (aRandom.nextInt_(i)));            }));            return this;        },        before_ifAbsent_: function (target, exceptionBlock) {            var index;            index = this.indexOf_(target);            return (index._equals(number(0)).or_(block(function () {                return index._equals(number(1));            }))).ifTrue_ifFalse_(block(function () {                return exceptionBlock.value();            }), block(function () {                return this.at_(index._minus(number(1)));            }));        },        _at: function (aCollection) {            return this.with_collect_(aCollection, block(function (a, b) {                return a._at(b);            }));        },        atAll_: function (indexArray) {            var newCollection;            newCollection = this.species().ofSize_(indexArray.size());            number(1).to_do_(indexArray.size(), block(function (index) {                return newCollection.at_put_(index, (this.at_((indexArray.at_(index)))));            }));            return newCollection;        },        indexOf_startingAt_: function (anElement, start) {            return this.indexOf_startingAt_ifAbsent_(anElement, start, number(0));        },        startsWith_: function (start) {            var comp;            this.deprecated_(string("Use #beginsWith:"));            this.size()._less(start.size()).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            comp = _true;            (this.first_(start.size())).with_do_(start, block(function (ea, ea2) {                return ea._equals(ea2).ifFalse_(block(function () {                    return comp = _false;                }));            }));            return comp;        },        last_: function (n) {            var size;            size = this.size();            return this.copyFrom_to_(size._minus(n)._plus(number(1)), size);        },        atAll_put_: function (aCollection, anObject) {            aCollection.do_(block(function (index) {                return this.at_put_(index, anObject);            }));            return anObject;        },        asWordArray: function () {            var wordArray;            wordArray = WordArray.new_(this.size());            number(1).to_do_(this.size(), block(function (i) {                return wordArray.at_put_(i, (this.at_(i)));            }));            return wordArray;        },        lastIndexOfAnyOf_startingAt_ifAbsent_: function (aCollection, lastIndex, exceptionBlock) {            lastIndex.to_by_do_(number(1), number(-1), block(function (index) {                return (aCollection.includes_((this.at_(index)))).ifTrue_(block(function () {                    nonLocalReturn(index);                }));            }));            return exceptionBlock.value();        },        indexOf_startingAt_ifAbsent_: function (anElement, start, exceptionBlock) {            start.to_do_(this.size(), block(function (index) {                return (this.at_(index))._equals(anElement).ifTrue_(block(function () {                    nonLocalReturn(index);                }));            }));            return exceptionBlock.value();        },        segmentedSlopes: function () {            return this.collectWithIndex_(block(function (x, i) {                return (this.atWrap_(i._plus(number(1))))._minus(x);            }));        },        copyReplaceFrom_to_with_: function (start, stop, replacementCollection) {            var newSequenceableCollection; var newSize; var endReplacement;            newSize = this.size()._minus((stop._minus(start)._plus(number(1))))._plus(replacementCollection.size());            endReplacement = start._minus(number(1))._plus(replacementCollection.size());            newSequenceableCollection = this.species().new_(newSize);            start._greater(number(1)).ifTrue_(block(function () {                return newSequenceableCollection.replaceFrom_to_with_startingAt_(number(1), start._minus(number(1)), this, number(1));            }));            start._less_equals(endReplacement).ifTrue_(block(function () {                return newSequenceableCollection.replaceFrom_to_with_startingAt_(start, endReplacement, replacementCollection, number(1));            }));            endReplacement._less(newSize).ifTrue_(block(function () {                return newSequenceableCollection.replaceFrom_to_with_startingAt_(endReplacement._plus(number(1)), newSize, this, stop._plus(number(1)));            }));            return newSequenceableCollection;        },        checkedAt_: function (index) {            index._greater(this.size()).ifTrue_(block(function () {                return this.error_(string("not enough elements"));            }));            return this.at_(index);        },        shuffle: function () {            return this.shuffleBy_(Collection.randomForPicking());        },        copyWithoutFirst: function () {            return this.allButFirst();        },        pairsDo_: function (aBlock) {            number(1).to_do_(this.size()._slash_slash(number(2)), block(function (index) {                return aBlock.value_value_((this.at_(number(2)._times(index)._minus(number(1)))), (this.at_(number(2)._times(index))));            }));            return this;        },        _comma: function (otherCollection) {            return this.copyReplaceFrom_to_with_(this.size()._plus(number(1)), this.size(), otherCollection);        },        lastIndexOf_startingAt_ifAbsent_: function (anElement, lastIndex, exceptionBlock) {            lastIndex.to_by_do_(number(1), number(-1), block(function (index) {                return (this.at_(index))._equals(anElement).ifTrue_(block(function () {                    nonLocalReturn(index);                }));            }));            return exceptionBlock.value();        },        errorFirstObject_: function (anObject) {            this.error_(string("specified object is first object"));            return this;        },        atAll_putAll_: function (indexArray, valueArray) {            indexArray.with_do_(valueArray, block(function (index, value) {                return this.at_put_(index, value);            }));            return valueArray;        },        collect_: function (aBlock) {            var newCollection;            newCollection = this.species().new_(this.size());            number(1).to_do_(this.size(), block(function (index) {                return newCollection.at_put_(index, (aBlock.value_((this.at_(index)))));            }));            return newCollection;        },        writeStream: function () {            return WriteStream.on_(this);        },        concatenation: function () {            var result; var index;            result = _Array.new_((this.inject_into_(number(0), block(function (sum, each) {                return sum._plus(each.size());            }))));            index = number(0);            this.do_(block(function (each) {                return each.do_(block(function (item) {                    return result.at_put_((index = index._plus(number(1))), item);                }));            }));            return result;        },        reverseDo_: function (aBlock) {            this.size().to_by_do_(number(1), number(-1), block(function (index) {                return aBlock.value_((this.at_(index)));            }));            return this;        },        naturalCubicSlopes: function () {            var x; var gamma; var delta; var D; var n1;            n1 = this.size();            n1._less(number(3)).ifTrue_(block(function () {                return this.error_(string("Less than 3 points makes a poor curve"));            }));            x = this;            gamma = _Array.new_(n1);            delta = _Array.new_(n1);            D = _Array.new_(n1);            gamma.at_put_(number(1), number(1.0)._slash(number(2.0)));            (number(2).to_(n1._minus(number(1)))).do_(block(function (i) {                return gamma.at_put_(i, number(1.0)._slash((number(4.0)._minus((gamma.at_(i._minus(number(1))))))));            }));            gamma.at_put_(n1, number(1.0)._slash((number(2.0)._minus((gamma.at_(n1._minus(number(1))))))));            delta.at_put_(number(1), number(3.0)._times(((x.at_(number(2)))._minus((x.at_(number(1))))))._times((gamma.at_(number(1)))));            (number(2).to_(n1._minus(number(1)))).do_(block(function (i) {                return delta.at_put_(i, number(3.0)._times(((x.at_(i._plus(number(1))))._minus((x.at_(i._minus(number(1)))))))._minus((delta.at_(i._minus(number(1)))))._times((gamma.at_(i))));            }));            delta.at_put_(n1, number(3.0)._times(((x.at_(n1))._minus((x.at_(n1._minus(number(1)))))))._minus((delta.at_(n1._minus(number(1)))))._times((gamma.at_(n1))));            D.at_put_(n1, (delta.at_(n1)));            (number(1).to_(n1._minus(number(1)))).reverseDo_(block(function (i) {                return D.at_put_(i, (delta.at_(i))._minus(((gamma.at_(i))._times((D.at_(i._plus(number(1))))))));            }));            return D;        },        naturalCubicSlopes_: function (clampedSlopes) {            var slopes; var tripleKnots;            tripleKnots = this._times(number(3.0));            slopes = clampedSlopes.copy();            clampedSlopes.naturalFillinList().do_(block(function (r) {                return slopes.slopesWith_from_to_(tripleKnots, r.first(), r.last());            }));            return slopes;        },        beginsWithAnyOf_: function (aCollection) {            return aCollection.anySatisfy_(block(function (prefix) {                return this.beginsWith_(prefix);            }));        },        findBinaryIndex_do_ifNone_: function (aBlock, actionBlock, exceptionBlock) {            var index; var low; var high;            low = number(1);            high = this.size();            block(function () {                index = high._plus(low)._slash_slash(number(2));                return low._greater(high);            }).whileFalse_(block(function () {                var test;                test = aBlock.value_((this.at_(index)));                return test._equals(number(0)).ifTrue_ifFalse_(block(function () {                    nonLocalReturn(actionBlock.value_(index));                }), block(function () {                    return test._greater(number(0)).ifTrue_ifFalse_(block(function () {                        return low = index._plus(number(1));                    }), block(function () {                        return high = index._minus(number(1));                    }));                }));            }));            return exceptionBlock.cull_cull_(high, low);        },        allButLast_: function (n) {            return this.copyFrom_to_(number(1), this.size()._minus(n));        },        asPointArray: function () {            var pointArray;            pointArray = PointArray.new_(this.size());            number(1).to_do_(this.size(), block(function (i) {                return pointArray.at_put_(i, (this.at_(i)));            }));            return pointArray;        },        indexOf_: function (anElement) {            return this.indexOf_ifAbsent_(anElement, block(function () {                return number(0);            }));        },        overlappingPairsDo_: function (aBlock) {            number(1).to_do_(this.size()._minus(number(1)), block(function (i) {                return aBlock.value_value_((this.at_(i)), (this.at_(i._plus(number(1)))));            }));            return this;        },        at_incrementBy_: function (index, value) {            return this.at_put_(index, (this.at_(index))._plus(value));        },        asAsn1Bytes: function () {            return ASN1Stream.encode_(this);        },        asTraitComposition: function () {            return this.isEmpty().ifFalse_ifTrue_(block(function () {                return this.size()._equals(number(1)).ifTrue_ifFalse_(block(function () {                    return this.first().asTraitComposition();                }), block(function () {                    return this.copyWithoutFirst().inject_into_(this.first(), block(function (left, right) {                        return left._plus(right);                    }));                }));            }), block(function () {                return ClassDescription.newTraitComposition();            }));        },        first: function () {            return this.at_(number(1));        },        combinationsAt_in_after_do_: function (jj, aCollection, nn, aBlock) {            nn._plus(number(1)).to_do_(this.size(), block(function (index) {                aCollection.at_put_(jj, (this.at_(index)));                return jj._equals(aCollection.size()).ifTrue_ifFalse_(block(function () {                    return aBlock.value_(aCollection);                }), block(function () {                    return this.combinationsAt_in_after_do_(jj._plus(number(1)), aCollection, index, aBlock);                }));            }));            return this;        },        lastIndexOf_ifAbsent_: function (anElement, exceptionBlock) {            return this.lastIndexOf_startingAt_ifAbsent_(anElement, this.size(), exceptionBlock);        },        allButLastDo_: function (block) {            number(1).to_do_(this.size()._minus(number(1)), block(function (index) {                return block.value_((this.at_(index)));            }));            return this;        },        indexOfAnyOf_: function (aCollection) {            return this.indexOfAnyOf_startingAt_ifAbsent_(aCollection, number(1), block(function () {                return number(0);            }));        },        anyOne: function () {            return this.first();        },        indexOfSubCollection_startingAt_ifAbsent_: function (sub, start, exceptionBlock) {            var first; var index;            sub.isEmpty().ifTrue_(block(function () {                nonLocalReturn(exceptionBlock.value());            }));            first = sub.first();            start.to_do_(this.size()._minus(sub.size())._plus(number(1)), block(function (startIndex) {                return (this.at_(startIndex))._equals(first).ifTrue_(block(function () {                    index = number(1);                    return block(function () {                        return (this.at_(startIndex._plus(index)._minus(number(1))))._equals((sub.at_(index)));                    }).whileTrue_(block(function () {                        index._equals(sub.size()).ifTrue_(block(function () {                            nonLocalReturn(startIndex);                        }));                        return index = index._plus(number(1));                    }));                }));            }));            return exceptionBlock.value();        },        naturalFillinList: function () {            var changes;            changes = this.nilTransitions();            changes.isEmpty().ifTrue_(block(function () {                nonLocalReturn(array([number(1).to_(this.size())]));            }));            changes._equals(array([number(1)])).ifTrue_(block(function () {                nonLocalReturn(array([]));            }));            changes.size().even().ifTrue_(block(function () {                return changes.add_(this.size());            }));            changes.first()._equals(number(1)).ifTrue_(block(function () {                nonLocalReturn(changes.allButFirst().pairsCollect_(block(function (s, e) {                    return (s._minus(number(1)).to_(e));                })));            }));            return array([number(1).to_(changes.first())])._comma((changes.allButFirst().pairsCollect_(block(function (s, e) {                return ((s._minus(number(1))).to_(e));            }))));        },        first_: function (n) {            return this.copyFrom_to_(number(1), n);        },        findFirst_: function (aBlock) {            var index;            index = number(0);            block(function () {                return (index = index._plus(number(1)))._less_equals(this.size());            }).whileTrue_(block(function () {                return (aBlock.value_((this.at_(index)))).ifTrue_(block(function () {                    nonLocalReturn(index);                }));            }));            return number(0);        },        errorLastObject_: function (anObject) {            this.error_(string("specified object is last object"));            return this;        },        integerAt_: function (index) {            return this.at_(index);        },        copyAfter_: function (anElement) {            return this.allButFirst_((this.indexOf_ifAbsent_(anElement, block(function () {                nonLocalReturn(this.copyEmpty());            }))));        },        atWrap_put_: function (index, value) {            return this.at_put_(index._minus(number(1))._backslash_backslash(this.size())._plus(number(1)), value);        },        seventh: function () {            return this.at_(number(7));        },        fourth: function () {            return this.at_(number(4));        },        copyReplaceAll_with_: function (oldSubstring, newSubstring) {            return this.copyReplaceAll_with_asTokens_(oldSubstring, newSubstring, _false);        },        overlappingPairsWithIndexDo_: function (aBlock) {            number(1).to_do_(this.size()._minus(number(1)), block(function (i) {                return aBlock.value_value_value_((this.at_(i)), (this.at_(i._plus(number(1)))), i);            }));            return this;        },        copyWith_: function (newElement) {            var newIC;            newIC = this.species().new_(this.size()._plus(number(1)));            newIC.replaceFrom_to_with_startingAt_(number(1), this.size(), this, number(1));            newIC.at_put_(newIC.size(), newElement);            return newIC;        },        atLast_ifAbsent_: function (indexFromEnd, block) {            return this.at_ifAbsent_(this.size()._plus(number(1))._minus(indexFromEnd), block);        },        hash: function () {            var hash;            hash = this.species().hash();            number(1).to_do_(this.size(), block(function (i) {                return hash = (hash._plus((this.at_(i)).hash())).hashMultiply();            }));            return hash;        },        changeInSlopes_: function (slopes) {            var n; var slopeChanges;            n = this.size();            n._equals(slopes.size()).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("vertices and slopes differ in number")));            }));            slopeChanges = _Array.new_(n);            (number(1).to_(n)).do_(block(function (i) {                return slopeChanges.at_put_(i, (this.atWrap_(i._plus(number(1))))._minus((this.at_(i)))._times(number(3))._minus(((slopes.at_(i))._times(number(2))))._minus((slopes.atWrap_(i._plus(number(1))))));            }));            return slopeChanges;        },        findBinary_do_ifNone_: function (aBlock, actionBlock, exceptionBlock) {            return this.findBinaryIndex_do_ifNone_(aBlock, block(function (foundIndex) {                return actionBlock.value_((this.at_(foundIndex)));            }), block(function (prevIndex, nextIndex) {                return exceptionBlock.cull_cull_((prevIndex._greater(number(0)).ifTrue_(block(function () {                    return this.at_(prevIndex);                }))), (nextIndex._less_equals(this.size()).ifTrue_(block(function () {                    return this.at_(nextIndex);                }))));            }));        },        third: function () {            return this.at_(number(3));        },        from_to_put_: function (startIndex, endIndex, anObject) {            var written; var toWrite; var thisWrite;            startIndex._greater(endIndex).ifTrue_(block(function () {                nonLocalReturn(this);            }));            this.at_put_(startIndex, anObject);            written = number(1);            toWrite = endIndex._minus(startIndex)._plus(number(1));            block(function () {                return written._less(toWrite);            }).whileTrue_(block(function () {                thisWrite = written.min_(toWrite._minus(written));                this.replaceFrom_to_with_startingAt_(startIndex._plus(written), startIndex._plus(written)._plus(thisWrite)._minus(number(1)), this, startIndex);                return written = written._plus(thisWrite);            }));            return anObject;        },        combinations_atATimeDo_: function (kk, aBlock) {            var aCollection;            aCollection = _Array.new_(kk);            this.combinationsAt_in_after_do_(number(1), aCollection, number(0), aBlock);            return this;        },        collect_from_to_: function (aBlock, firstIndex, lastIndex) {            var size; var result;            size = lastIndex._minus(firstIndex)._plus(number(1));            result = this.species().new_(size);            number(1).to_do_(size, block(function (index) {                return result.at_put_(index, (aBlock.value_((this.at_(index._plus(firstIndex)._minus(number(1)))))));            }));            return result;        },        readStream: function () {            return ReadStream.on_(this);        },        eighth: function () {            return this.at_(number(8));        },        asStringWithCr: function () {            var labelStream;            labelStream = WriteStream.on_((String.new_(number(200))));            this.do_(block(function (each) {                return each.isString().ifTrue_ifFalse_(block(function () {                    return (function () {                        var cascadeReceiver$ = labelStream;                        cascadeReceiver$.nextPutAll_(each);                        return cascadeReceiver$.cr();                    }).apply(this);                }), block(function () {                    each.printOn_(labelStream);                    return labelStream.cr();                }));            }));            this.size()._greater(number(0)).ifTrue_(block(function () {                return labelStream.skip_(number(-1));            }));            return labelStream.contents();        },        forceTo_paddingWith_: function (length, elem) {            var newCollection;            newCollection = this.species().new_withAll_(length, elem);            newCollection.replaceFrom_to_with_startingAt_(number(1), (this.size().min_(length)), this, number(1));            return newCollection;        },        select_: function (aBlock) {            var aStream;            aStream = WriteStream.on_((this.species().new_(this.size())));            number(1).to_do_(this.size(), block(function (index) {                return (aBlock.value_((this.at_(index)))).ifTrue_(block(function () {                    return aStream.nextPut_((this.at_(index)));                }));            }));            return aStream.contents();        },        do_: function (aBlock) {            number(1).to_do_(this.size(), block(function (index) {                return aBlock.value_((this.at_(index)));            }));            return this;        },        indexOfAnyOf_startingAt_ifAbsent_: function (aCollection, start, exceptionBlock) {            start.to_do_(this.size(), block(function (index) {                return (aCollection.includes_((this.at_(index)))).ifTrue_(block(function () {                    nonLocalReturn(index);                }));            }));            return exceptionBlock.value();        },        asDigitsAt_in_do_: function (anInteger, aCollection, aBlock) {            this.do_(block(function (each) {                aCollection.at_put_(anInteger, each);                return anInteger._equals(aCollection.size()).ifTrue_ifFalse_(block(function () {                    return aBlock.value_(aCollection);                }), block(function () {                    return this.asDigitsAt_in_do_(anInteger._plus(number(1)), aCollection, aBlock);                }));            }));            return this;        },        slopesWith_from_to_: function (tripleKnots, start, end) {            var gamma; var delta; var n; var range; var isOpenRange;            n = this.size();            gamma = _Array.new_(n);            delta = _Array.new_(n);            isOpenRange = end._less((start._plus(this.size())));            (this.at_(start)).ifNotNil_ifNil_(block(function () {                gamma.at_put_(start, number(0.0));                delta.at_put_(start, (this.at_(start)));                return range = (start._plus(number(1)).to_(end._minus(number(1))));            }), block(function () {                return isOpenRange.ifTrue_ifFalse_(block(function () {                    gamma.at_put_(start, number(2.0).reciprocal());                    delta.at_put_(start, ((tripleKnots.atWrap_(start._plus(number(1))))._minus(tripleKnots).at_(start))._times((gamma.at_(start))));                    return range = (start.to_(end._minus(number(1))));                }), block(function () {                    gamma.at_put_(start, number(4.0).reciprocal());                    delta.at_put_(start, ((tripleKnots.atWrap_(start._plus(number(1))))._minus(tripleKnots).atWrap_(start._minus(number(1))))._times((gamma.at_(start))));                    return range = (start._plus(number(1)).to_(end._minus(number(1))));                }));            }));            (start._plus(number(1)).to_(end._minus(number(1)))).do_(block(function (i) {                return gamma.atWrap_put_(i, number(1.0)._slash((number(4.0)._minus((gamma.atWrap_(i._minus(number(1))))))));            }));            (start._plus(number(1)).to_(end._minus(number(1)))).do_(block(function (i) {                return delta.atWrap_put_(i, ((tripleKnots.atWrap_(i._plus(number(1))))._minus((tripleKnots.atWrap_(i._minus(number(1))))))._minus((delta.atWrap_(i._minus(number(1)))))._times((gamma.atWrap_(i))));            }));            (this.atWrap_(end)).ifNil_ifNotNil_(block(function () {                isOpenRange.ifTrue_ifFalse_(block(function () {                    gamma.atWrap_put_(end, number(1.0)._slash((number(2.0)._minus((gamma.atWrap_(end._minus(number(1))))))));                    return delta.atWrap_put_(end, ((tripleKnots.atWrap_(end))._minus(tripleKnots).atWrap_(end._minus(number(1))))._minus((delta.at_(end._minus(number(1)))))._times((gamma.atWrap_(end))));                }), block(function () {                    gamma.atWrap_put_(end, number(1.0)._slash((number(4.0)._minus((gamma.atWrap_(end._minus(number(1))))))));                    return delta.atWrap_put_(end, ((tripleKnots.atWrap_(end._plus(number(1))))._minus(tripleKnots).atWrap_(end._minus(number(1))))._minus((delta.at_(end._minus(number(1)))))._times((gamma.atWrap_(end))));                }));                return this.atWrap_put_(end, (delta.atWrap_(end)));            }), block(function () {                gamma.atWrap_put_(end, number(0.0));                return delta.atWrap_put_(end, (this.atWrap_(end)));            }));            range.reverseDo_(block(function (i) {                return this.atWrap_put_(i, (delta.atWrap_(i))._minus(((gamma.atWrap_(i))._times((this.atWrap_(i._plus(number(1))))))));            }));            return this;        },        keysAndValuesDo_: function (aBlock) {            number(1).to_do_(this.size(), block(function (index) {                return aBlock.value_value_(index, (this.at_(index)));            }));            return this;        },        do_separatedBy_: function (elementBlock, separatorBlock) {            number(1).to_do_(this.size(), block(function (index) {                index._equals(number(1)).ifFalse_(block(function () {                    return separatorBlock.value();                }));                return elementBlock.value_((this.at_(index)));            }));            return this;        }    }});Class("ArrayedCollection", {    superclass: SequenceableCollection,    classMethods: {        with_with_with_with_with_with_: function (firstObject, secondObject, thirdObject, fourthObject, fifthObject, sixthObject) {            var newCollection;            newCollection = this.new_(number(6));            newCollection.at_put_(number(1), firstObject);            newCollection.at_put_(number(2), secondObject);            newCollection.at_put_(number(3), thirdObject);            newCollection.at_put_(number(4), fourthObject);            newCollection.at_put_(number(5), fifthObject);            newCollection.at_put_(number(6), sixthObject);            return newCollection;        },        with_with_with_with_: function (firstObject, secondObject, thirdObject, fourthObject) {            var newCollection;            newCollection = this.new_(number(4));            newCollection.at_put_(number(1), firstObject);            newCollection.at_put_(number(2), secondObject);            newCollection.at_put_(number(3), thirdObject);            newCollection.at_put_(number(4), fourthObject);            return newCollection;        },        with_with_with_: function (firstObject, secondObject, thirdObject) {            var newCollection;            newCollection = this.new_(number(3));            newCollection.at_put_(number(1), firstObject);            newCollection.at_put_(number(2), secondObject);            newCollection.at_put_(number(3), thirdObject);            return newCollection;        },        _new: function () {            return this.new_(number(0));        },        newFrom_: function (aCollection) {            var newArray;            newArray = this.new_(aCollection.size());            number(1).to_do_(aCollection.size(), block(function (i) {                return newArray.at_put_(i, (aCollection.at_(i)));            }));            return newArray;        },        with_with_: function (firstObject, secondObject) {            var newCollection;            newCollection = this.new_(number(2));            newCollection.at_put_(number(1), firstObject);            newCollection.at_put_(number(2), secondObject);            return newCollection;        },        with_: function (anObject) {            var newCollection;            newCollection = this.new_(number(1));            newCollection.at_put_(number(1), anObject);            return newCollection;        },        newFromStream_: function (s) {            var len;            (this.isPointers().or_(block(function () {                return this.isWords().not();            }))).ifTrue_(block(function () {                nonLocalReturn(this);            }));            s.next()._equals(number(128)).ifTrue_(block(function () {                nonLocalReturn(this.error_(string("not implemented")));            }));            s.skip_(number(-1));            len = s.nextInt32();            return s.nextWordsInto_((this.basicNew_(len)));        },        new_withAll_: function (size, value) {            return (this.new_(size)).atAllPut_(value);        },        with_with_with_with_with_: function (firstObject, secondObject, thirdObject, fourthObject, fifthObject) {            var newCollection;            newCollection = this.new_(number(5));            newCollection.at_put_(number(1), firstObject);            newCollection.at_put_(number(2), secondObject);            newCollection.at_put_(number(3), thirdObject);            newCollection.at_put_(number(4), fourthObject);            newCollection.at_put_(number(5), fifthObject);            return newCollection;        },        withAll_: function (aCollection) {            return (this.new_(aCollection.size())).replaceFrom_to_with_(number(1), aCollection.size(), aCollection);        }    },    instanceMethods: {        mergeFirst_middle_last_into_by_: function (first, middle, last, dst, aBlock) {            var i1; var i2; var val1; var val2; var out;            i1 = first;            i2 = middle._plus(number(1));            val1 = this.at_(i1);            val2 = this.at_(i2);            out = first._minus(number(1));            block(function () {                return (i1._less_equals(middle)).and_(block(function () {                    return i2._less_equals(last);                }));            }).whileTrue_(block(function () {                return (aBlock.ifNil_ifNotNil_(block(function () {                    return val1._less_equals(val2);                }), block(function () {                    return aBlock.value_value_(val1, val2);                }))).ifTrue_ifFalse_(block(function () {                    dst.at_put_((out = out._plus(number(1))), val1);                    return val1 = this.at_((i1 = i1._plus(number(1))));                }), block(function () {                    dst.at_put_((out = out._plus(number(1))), val2);                    return (i2 = i2._plus(number(1)))._less_equals(last).ifTrue_(block(function () {                        return val2 = this.at_(i2);                    }));                }));            }));            i1._less_equals(middle).ifTrue_ifFalse_(block(function () {                return dst.replaceFrom_to_with_startingAt_(out._plus(number(1)), last, this, i1);            }), block(function () {                return dst.replaceFrom_to_with_startingAt_(out._plus(number(1)), last, this, i2);            }));            return this;        },        size: function () {            primitiveDeclaration();            return this.basicSize();        },        flattenOnStream_: function (aStream) {            aStream.writeArrayedCollection_(this);            return this;        },        storeOn_: function (aStream) {            aStream.nextPutAll_(string("(("));            aStream.nextPutAll_(this._class().name());            aStream.nextPutAll_(string(" new: "));            aStream.store_(this.size());            aStream.nextPut_(character(")"));            (this.storeElementsFrom_to_on_(number(1), this.size(), aStream)).ifFalse_(block(function () {                return aStream.nextPutAll_(string("; yourself"));            }));            aStream.nextPut_(character(")"));            return this;        },        asSortedArray: function () {            this.isSorted().ifTrue_(block(function () {                nonLocalReturn(this.asArray());            }));            return this._super.asSortedArray();        },        restoreEndianness: function () {            this._class().isPointers()._pipe(this._class().isWords().not()).ifTrue_(block(function () {                nonLocalReturn(this);            }));            SmalltalkImage.current().isLittleEndian().ifTrue_(block(function () {                return Bitmap.swapBytesIn_from_to_(this, number(1), this.basicSize());            }));            return this;        },        writeOn_: function (aStream) {            (this._class().isPointers().or_(block(function () {                return this._class().isWords().not();            }))).ifTrue_(block(function () {                nonLocalReturn(this);            }));            aStream.nextInt32Put_(this.basicSize());            aStream.nextWordsPutAll_(this);            return this;        },        sort: function () {            this.sort_(nil);            return this;        },        mergeSortFrom_to_src_dst_by_: function (first, last, src, dst, aBlock) {            var middle;            first._equals(last).ifTrue_(block(function () {                nonLocalReturn(this);            }));            middle = (first._plus(last))._slash_slash(number(2));            this.mergeSortFrom_to_src_dst_by_(first, middle, dst, src, aBlock);            this.mergeSortFrom_to_src_dst_by_(middle._plus(number(1)), last, dst, src, aBlock);            src.mergeFirst_middle_last_into_by_(first, middle, last, dst, aBlock);            return this;        },        isSortedBy_: function (aBlock) {            var lastElm; var elm;            this.isEmpty().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            lastElm = this.first();            number(2).to_do_(this.size(), block(function (index) {                elm = this.at_(index);                (aBlock.value_value_(lastElm, elm)).ifFalse_(block(function () {                    nonLocalReturn(_false);                }));                return lastElm = elm;            }));            return _true;        },        byteSize: function () {            return this.basicSize()._times(this.bytesPerBasicElement());        },        isSorted: function () {            var lastElm; var elm;            this.isEmpty().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            lastElm = this.first();            number(2).to_do_(this.size(), block(function (index) {                elm = this.at_(index);                lastElm._less_equals(elm).ifFalse_(block(function () {                    nonLocalReturn(_false);                }));                return lastElm = elm;            }));            return _true;        },        defaultElement: function () {            return nil;        },        add_: function (newObject) {            this.shouldNotImplement();            return this;        },        inject_into_: function (anObject, aBlock) {            var result;            result = anObject;            number(1).to_do_(this.size(), block(function (i) {                return result = aBlock.value_value_(result, (this.at_(i)));            }));            return result;        },        mergeSortFrom_to_by_: function (startIndex, stopIndex, aBlock) {            this.size()._less_equals(number(1)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            startIndex._equals(stopIndex).ifTrue_(block(function () {                nonLocalReturn(this);            }));            this.assert_(block(function () {                return startIndex._greater_equals(number(1)).and_(block(function () {                    return startIndex._less(stopIndex);                }));            }));            this.assert_(block(function () {                return stopIndex._less_equals(this.size());            }));            this.mergeSortFrom_to_src_dst_by_(startIndex, stopIndex, this.clone(), this, aBlock);            return this;        },        bytesPerElement: function () {            return this._class().isBytes().ifTrue_ifFalse_(block(function () {                return number(1);            }), block(function () {                return number(4);            }));        },        storeElementsFrom_to_on_: function (firstIndex, lastIndex, aStream) {            var noneYet; var defaultElement; var arrayElement;            noneYet = _true;            defaultElement = this.defaultElement();            firstIndex.to_do_(lastIndex, block(function (index) {                arrayElement = this.at_(index);                return arrayElement._equals(defaultElement).ifFalse_(block(function () {                    noneYet.ifTrue_ifFalse_(block(function () {                        return noneYet = _false;                    }), block(function () {                        return aStream.nextPut_(character(";"));                    }));                    aStream.nextPutAll_(string(" at: "));                    aStream.store_(index);                    aStream.nextPutAll_(string(" put: "));                    return aStream.store_(arrayElement);                }));            }));            return noneYet;        },        sort_: function (aSortBlock) {            this.mergeSortFrom_to_by_(number(1), this.size(), aSortBlock);            return this;        },        bytesPerBasicElement: function () {            return this._class().isBytes().ifTrue_ifFalse_(block(function () {                return number(1);            }), block(function () {                return number(4);            }));        },        swapHalves: function () {            var hack; var blt;            hack = Form._new().hackBits_(this);            blt = (BitBlt.toForm_(hack)).sourceForm_(hack);            blt.combinationRule_(Form.reverse());            (function () {                var cascadeReceiver$ = blt;                cascadeReceiver$.sourceY_(number(0));                cascadeReceiver$.destY_(number(0));                cascadeReceiver$.height_(this.size());                return cascadeReceiver$.width_(number(2));            }).apply(this);            (function () {                var cascadeReceiver$ = blt;                cascadeReceiver$.sourceX_(number(0));                cascadeReceiver$.destX_(number(2));                return cascadeReceiver$.copyBits();            }).apply(this);            (function () {                var cascadeReceiver$ = blt;                cascadeReceiver$.sourceX_(number(2));                cascadeReceiver$.destX_(number(0));                return cascadeReceiver$.copyBits();            }).apply(this);            (function () {                var cascadeReceiver$ = blt;                cascadeReceiver$.sourceX_(number(0));                cascadeReceiver$.destX_(number(2));                return cascadeReceiver$.copyBits();            }).apply(this);            return this;        },        fillFrom_with_: function (aCollection, aBlock) {            var index;            index = number(0);            aCollection.do_(block(function (each) {                return this.at_put_((index = index._plus(number(1))), (aBlock.value_(each)));            }));            return this;        },        writeOnGZIPByteStream_: function (aStream) {            (this._class().isPointers().or_(block(function () {                return this._class().isWords().not();            }))).ifTrue_(block(function () {                nonLocalReturn(this);            }));            aStream.nextPutAllWordArray_(this);            return this;        },        removeAll: function () {            this.shouldNotImplement();            return this;        }    }});Class("String", {    superclass: ArrayedCollection,    classVariables: [ "$AsciiOrder", "$CSLineEnders", "$CSNonSeparators", "$CSSeparators", "$CaseInsensitiveOrder", "$CaseSensitiveOrder", "$CrLfExchangeTable", "$HtmlEntities", "$LowercasingTable", "$Tokenish", "$UppercasingTable" ],    classMethods: {        new_: function (sizeRequested) {            this._equals_equals(String).ifTrue_ifFalse_(block(function () {                nonLocalReturn(ByteString.new_(sizeRequested));            }), block(function () {                nonLocalReturn(this.basicNew_(sizeRequested));            }));            return this;        },        findFirstInString_inSet_startingAt_: function (aString, inclusionMap, start) {            var i; var stringSize; var ascii; var more;            inclusionMap.size()._tilde_equals(number(256)).ifTrue_(block(function () {                nonLocalReturn(number(0));            }));            stringSize = aString.size();            more = _true;            i = start._minus(number(1));            block(function () {                return more.and_(block(function () {                    return (i = i._plus(number(1)))._less_equals(stringSize);                }));            }).whileTrue_(block(function () {                ascii = aString.basicAt_(i);                return more = ascii._less(number(256)).ifTrue_ifFalse_(block(function () {                    return (inclusionMap.at_(ascii._plus(number(1))))._equals(number(0));                }), block(function () {                    return _true;                }));            }));            i._greater(stringSize).ifTrue_(block(function () {                nonLocalReturn(number(0));            }));            return i;        },        readFrom_: function (inStream) {            var outStream; var _char; var done;            outStream = WriteStream.on_((this.new_(number(16))));            inStream.skipTo_(character("'"));            done = _false;            block(function () {                return done.or_(block(function () {                    return inStream.atEnd();                }));            }).whileFalse_(block(function () {                _char = inStream.next();                return _char._equals(character("'")).ifTrue_ifFalse_(block(function () {                    _char = inStream.next();                    return _char._equals(character("'")).ifTrue_ifFalse_(block(function () {                        return outStream.nextPut_(_char);                    }), block(function () {                        return done = _true;                    }));                }), block(function () {                    return outStream.nextPut_(_char);                }));            }));            return outStream.contents();        },        crlf: function () {            return this.with_with_(Character.cr(), Character.lf());        },        expandMacro_argument_withExpansions_: function (macroType, argument, expansions) {            macroType._equals(character("s")).ifTrue_(block(function () {                nonLocalReturn(expansions.at_(argument));            }));            macroType._equals(character("p")).ifTrue_(block(function () {                nonLocalReturn((expansions.at_(argument)).printString());            }));            macroType._equals(character("n")).ifTrue_(block(function () {                nonLocalReturn(String.cr());            }));            macroType._equals(character("t")).ifTrue_(block(function () {                nonLocalReturn(String.tab());            }));            this.error_(string("unknown expansion type"));            return this;        },        noSeparatorMap: function () {            return CSNonSeparators.byteArrayMap();        },        translate_from_to_table_: function (aString, start, stop, table) {            start.to_do_(stop, block(function (i) {                var _char;                return (_char = aString.basicAt_(i))._less(number(256)).ifTrue_(block(function () {                    return aString.at_put_(i, (table.at_(_char._plus(number(1)))));                }));            }));            return this;        },        crLfExchangeTable: function () {            return CrLfExchangeTable;        },        fromPacked_: function (aLong) {            var s;            s = this.new_(number(4));            s.at_put_(number(1), (aLong.digitAt_(number(4))).asCharacter());            s.at_put_(number(2), (aLong.digitAt_(number(3))).asCharacter());            s.at_put_(number(3), (aLong.digitAt_(number(2))).asCharacter());            s.at_put_(number(4), (aLong.digitAt_(number(1))).asCharacter());            return s;        },        initialize: function () {            var order;            AsciiOrder = (number(0).to_(number(255))).as_(ByteArray);            CaseInsensitiveOrder = AsciiOrder.copy();            (character("a").to_(character("z"))).do_(block(function (c) {                return CaseInsensitiveOrder.at_put_(c.asciiValue()._plus(number(1)), (CaseInsensitiveOrder.at_(c.asUppercase().asciiValue()._plus(number(1)))));            }));            CaseSensitiveOrder = ByteArray.new_withAll_(number(256), number(255));            order = number(-1);            string(" 0123456789").do_(block(function (c) {                return CaseSensitiveOrder.at_put_(c.asciiValue()._plus(number(1)), (order = order._plus(number(1))));            }));            (character("a").to_(character("z"))).do_(block(function (c) {                CaseSensitiveOrder.at_put_(c.asUppercase().asciiValue()._plus(number(1)), (order = order._plus(number(1))));                return CaseSensitiveOrder.at_put_(c.asciiValue()._plus(number(1)), (order = order._plus(number(1))));            }));            number(1).to_do_(CaseSensitiveOrder.size(), block(function (i) {                return (CaseSensitiveOrder.at_(i))._equals(number(255)).ifTrue_(block(function () {                    return CaseSensitiveOrder.at_put_(i, (order = order._plus(number(1))));                }));            }));            order._equals(number(255)).ifFalse_(block(function () {                return this.error_(string("order problem"));            }));            LowercasingTable = String.withAll_((Character.allByteCharacters().collect_(block(function (c) {                return c.asLowercase();            }))));            UppercasingTable = String.withAll_((Character.allByteCharacters().collect_(block(function (c) {                return c.asUppercase();            }))));            Tokenish = String.withAll_((Character.allByteCharacters().collect_(block(function (c) {                return c.tokenish().ifTrue_ifFalse_(block(function () {                    return c;                }), block(function () {                    return character("~");                }));            }))));            CSLineEnders = CharacterSet.crlf();            CSSeparators = CharacterSet.separators();            CSNonSeparators = CSSeparators.complement();            CrLfExchangeTable = Character.allByteCharacters().collect_(block(function (each) {                return each.caseOf_otherwise_(array([block(function () {                    return Character.cr();                })._minus_greater(block(function () {                    return Character.lf();                })), block(function () {                    return Character.lf();                })._minus_greater(block(function () {                    return Character.cr();                }))]), block(function () {                    return each;                }));            }));            return this;        },        value_: function (anInteger) {            return this.with_((Character.value_(anInteger)));        },        empty: function () {            return string("");        },        indexOfAscii_inString_startingAt_: function (anInteger, aString, start) {            start.to_do_(aString.size(), block(function (index) {                return (aString.basicAt_(index))._equals(anInteger).ifTrue_(block(function () {                    nonLocalReturn(index);                }));            }));            return number(0);        },        crlfcrlf: function () {            return this.crlf()._comma(this.crlf());        },        initializeHtmlEntities: function () {            HtmlEntities = (function () {                var cascadeReceiver$ = (Dictionary.new_(number(128)));                cascadeReceiver$.at_put_(string("amp"), character("&"));                cascadeReceiver$.at_put_(string("lt"), character("<"));                cascadeReceiver$.at_put_(string("gt"), character(">"));                cascadeReceiver$.at_put_(string("quot"), character("\""));                cascadeReceiver$.at_put_(string("euro"), Character.euro());                return cascadeReceiver$.yourself();            }).apply(this);            array([string("nbsp"), string("iexcl"), string("cent"), string("pound"), string("curren"), string("yen"), string("brvbar"), string("sect"), string("uml"), string("copy"), string("ordf"), string("laquo"), string("not"), string("shy"), string("reg"), string("hibar"), string("deg"), string("plusmn"), string("sup2"), string("sup3"), string("acute"), string("micro"), string("para"), string("middot"), string("cedil"), string("sup1"), string("ordm"), string("raquo"), string("frac14"), string("frac12"), string("frac34"), string("iquest"), string("Agrave"), string("Aacute"), string("Acirc"), string("Atilde"), string("Auml"), string("Aring"), string("AElig"), string("Ccedil"), string("Egrave"), string("Eacute"), string("Ecirc"), string("Euml"), string("Igrave"), string("Iacute"), string("Icirc"), string("Iuml"), string("ETH"), string("Ntilde"), string("Ograve"), string("Oacute"), string("Ocirc"), string("Otilde"), string("Ouml"), string("times"), string("Oslash"), string("Ugrave"), string("Uacute"), string("Ucirc"), string("Uuml"), string("Yacute"), string("THORN"), string("szlig"), string("agrave"), string("aacute"), string("acirc"), string("atilde"), string("auml"), string("aring"), string("aelig"), string("ccedil"), string("egrave"), string("eacute"), string("ecirc"), string("euml"), string("igrave"), string("iacute"), string("icirc"), string("iuml"), string("eth"), string("ntilde"), string("ograve"), string("oacute"), string("ocirc"), string("otilde"), string("ouml"), string("divide"), string("oslash"), string("ugrave"), string("uacute"), string("ucirc"), string("uuml"), string("yacute"), string("thorn"), string("yuml")]).withIndexDo_(block(function (each, index) {                return HtmlEntities.at_put_(each, (index._plus(number(159))).asCharacter());            }));            return this;        },        compare_with_collated_: function (string1, string2, order) {            var len1; var len2; var c1; var c2;            order._equals_equals(nil).ifTrue_(block(function () {                len1 = string1.size();                len2 = string2.size();                number(1).to_do_((len1.min_(len2)), block(function (i) {                    c1 = string1.basicAt_(i);                    c2 = string2.basicAt_(i);                    return c1._equals(c2).ifFalse_(block(function () {                        return c1._less(c2).ifTrue_ifFalse_(block(function () {                            nonLocalReturn(number(1));                        }), block(function () {                            nonLocalReturn(number(3));                        }));                    }));                }));                len1._equals(len2).ifTrue_(block(function () {                    nonLocalReturn(number(2));                }));                return len1._less(len2).ifTrue_ifFalse_(block(function () {                    nonLocalReturn(number(1));                }), block(function () {                    nonLocalReturn(number(3));                }));            }));            len1 = string1.size();            len2 = string2.size();            number(1).to_do_((len1.min_(len2)), block(function (i) {                c1 = string1.basicAt_(i);                c2 = string2.basicAt_(i);                c1._less(number(256)).ifTrue_(block(function () {                    return c1 = order.at_(c1._plus(number(1)));                }));                c2._less(number(256)).ifTrue_(block(function () {                    return c2 = order.at_(c2._plus(number(1)));                }));                return c1._equals(c2).ifFalse_(block(function () {                    return c1._less(c2).ifTrue_ifFalse_(block(function () {                        nonLocalReturn(number(1));                    }), block(function () {                        nonLocalReturn(number(3));                    }));                }));            }));            len1._equals(len2).ifTrue_(block(function () {                nonLocalReturn(number(2));            }));            len1._less(len2).ifTrue_ifFalse_(block(function () {                nonLocalReturn(number(1));            }), block(function () {                nonLocalReturn(number(3));            }));            return this;        },        cr: function () {            return this.with_(Character.cr());        },        tab: function () {            return this.with_(Character.tab());        },        fromByteArray_: function (aByteArray) {            return aByteArray.asString();        },        lf: function () {            return this.with_(Character.lf());        },        with_: function (aCharacter) {            var newCollection;            aCharacter.asInteger()._less(number(256)).ifTrue_ifFalse_(block(function () {                return newCollection = ByteString.new_(number(1));            }), block(function () {                return newCollection = WideString.new_(number(1));            }));            newCollection.at_put_(number(1), aCharacter);            return newCollection;        },        space: function () {            return this.with_(character(" "));        },        browserIcon: function () {            return string("string");        },        stringHash_initialHash_: function (aString, speciesHash) {            var stringSize; var hash; var low;            stringSize = aString.size();            hash = speciesHash.bitAnd_(number(268435455));            number(1).to_do_(stringSize, block(function (pos) {                hash = hash._plus((aString.basicAt_(pos)));                low = hash.bitAnd_(number(16383));                return hash = (number(9741)._times(low)._plus(((number(9741)._times((hash._slash_slash(number(16384))))._plus((number(101)._times(low))).bitAnd_(number(16383)))._times(number(16384))))).bitAnd_(number(268435455));            }));            return hash;        },        example: function () {            string("this is some text").displayOn_at_(Display, Sensor.waitButton());            return this;        },        fromString_: function (aString) {            return aString.copyFrom_to_(number(1), aString.size());        },        separatorMap: function () {            return CSSeparators.byteArrayMap();        }    },    instanceMethods: {        openInWorkspaceWithTitle_: function (aTitle) {            UIManager._default().edit_label_(this, aTitle);            return this;        },        addToMetacelloRepositories_: function (aMetacelloRepositoriesSpec) {            var spec;            spec = (function () {                var cascadeReceiver$ = (aMetacelloRepositoriesSpec.project().repositorySpec());                cascadeReceiver$.description_(this);                return cascadeReceiver$.yourself();            }).apply(this);            aMetacelloRepositoriesSpec.addMember_(((function () {                var cascadeReceiver$ = aMetacelloRepositoriesSpec.addMember();                cascadeReceiver$.name_(spec.name());                cascadeReceiver$.spec_(spec);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        translateFrom_to_table_: function (start, stop, table) {            this._class().translate_from_to_table_(this, start, stop, table);            return this;        },        occursInWithEmpty_caseSensitive_: function (prefix, aBoolean) {            var matchTable;            prefix.isEmpty().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            this.size()._less(prefix.size()).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            matchTable = aBoolean.ifTrue_ifFalse_(block(function () {                return CaseSensitiveOrder;            }), block(function () {                return CaseInsensitiveOrder;            }));            return (this.findSubstring_in_startingAt_matchTable_(prefix, this, number(1), matchTable))._greater(number(0));        },        extractNumber: function () {            return (string("0")._comma(this).select_(block(function (ea) {                return ea.isDigit();            }))).asNumber();        },        asSmalltalkComment: function () {            return String.streamContents_(block(function (str) {                var quoteCount; var first;                str.nextPut_(character("\""));                quoteCount = number(0);                first = _true;                this.do_(block(function (_char) {                    _char._equals(character("\"")).ifTrue_ifFalse_(block(function () {                        return first.ifFalse_(block(function () {                            str.nextPut_(_char);                            return quoteCount = quoteCount._plus(number(1));                        }));                    }), block(function () {                        quoteCount.odd().ifTrue_(block(function () {                            return str.nextPut_(character("\""));                        }));                        quoteCount = number(0);                        return str.nextPut_(_char);                    }));                    return first = _false;                }));                quoteCount.odd().ifTrue_(block(function () {                    return str.nextPut_(character("\""));                }));                return str.nextPut_(character("\""));            }));        },        endsWithAColon: function () {            return this.size()._greater(number(0)).and_(block(function () {                return this.last()._equals_equals(character(":"));            }));        },        lineCorrespondingToIndex_: function (anIndex) {            this.lineIndicesDo_(block(function (start, endWithoutDelimiters, end) {                return anIndex._less_equals(end).ifTrue_(block(function () {                    nonLocalReturn(this.copyFrom_to_(start, endWithoutDelimiters));                }));            }));            return string("");        },        match_: function (text) {            return this.startingAt_match_startingAt_(number(1), text, number(1));        },        _backslash_backslash: function (arg) {            return arg.adaptToString_andSend_(this, string("\\\\"));        },        trimRight_: function (aBlock) {            return this.trimLeft_right_(block(function (_char) {                return _false;            }), aBlock);        },        sansPeriodSuffix: function () {            var likely;            likely = this.copyUpTo_(character("."));            return likely.size()._equals(number(0)).ifTrue_ifFalse_(block(function () {                return this;            }), block(function () {                return likely;            }));        },        findDelimiters_startingAt_: function (delimiters, start) {            start.to_do_(this.size(), block(function (i) {                return delimiters.do_(block(function (delim) {                    return delim._equals((this.at_(i))).ifTrue_(block(function () {                        nonLocalReturn(i);                    }));                }));            }));            return this.size()._plus(number(1));        },        _slash_slash: function (arg) {            return arg.adaptToString_andSend_(this, string("//"));        },        metacelloIntegerLessThanSelf_: function (anInteger) {            return _false;        },        putInteger32_at_: function (anInteger, location) {            primitiveDeclaration();            var integer;            integer = anInteger;            integer._less(number(0)).ifTrue_(block(function () {                return integer = number(1073741824)._minus(integer);            }));            this.at_put_(location._plus(number(3)), (Character.value_((integer._backslash_backslash(number(256))))));            this.at_put_(location._plus(number(2)), (Character.value_((integer.bitShift_(number(-8)))._backslash_backslash(number(256)))));            this.at_put_(location._plus(number(1)), (Character.value_((integer.bitShift_(number(-16)))._backslash_backslash(number(256)))));            this.at_put_(location, (Character.value_((integer.bitShift_(number(-24)))._backslash_backslash(number(256)))));            return this;        },        do_toFieldNumber_: function (aBlock, aNumber) {            var start; var end; var index;            start = number(1);            index = number(1);            block(function () {                return start._less_equals(this.size());            }).whileTrue_(block(function () {                end = this.indexOf_startingAt_ifAbsent_(Character.tab(), start, block(function () {                    return this.size()._plus(number(1));                }));                end = end._minus(number(1));                aNumber._equals(index).ifTrue_(block(function () {                    aBlock.value_((this.copyFrom_to_(start, end)));                    nonLocalReturn(this);                }));                index = index._plus(number(1));                return start = end._plus(number(2));            }));            return this;        },        asLegalSelector: function () {            var toUse;            toUse = this.select_(block(function (_char) {                return _char.isAlphaNumeric();            }));            (toUse.size()._equals(number(0)).or_(block(function () {                return toUse.first().isLetter().not();            }))).ifTrue_(block(function () {                return toUse = string("v")._comma(toUse);            }));            return toUse.withFirstCharacterDownshifted();        },        includesSubstring_caseSensitive_: function (aString, caseSensitive) {            return (this.findString_startingAt_caseSensitive_(aString, number(1), caseSensitive))._greater(number(0));        },        asDecomposedUnicode: function () {            var lastIndex; var nextIndex; var out; var decomposed;            lastIndex = number(1);            nextIndex = number(0);            block(function () {                return (nextIndex = nextIndex._plus(number(1)))._less_equals(this.size());            }).whileTrue_(block(function () {                decomposed = Unicode.decompose_((this.at_(nextIndex)));                return decomposed.ifNotNil_(block(function () {                    lastIndex._equals(number(1)).ifTrue_(block(function () {                        return out = WriteStream.on_((String.new_(this.size())));                    }));                    out.nextPutAll_((this.copyFrom_to_(lastIndex, nextIndex._minus(number(1)))));                    out.nextPutAll_(decomposed);                    return lastIndex = nextIndex._plus(number(1));                }));            }));            return out.ifNil_ifNotNil_(block(function () {                return this;            }), block(function () {                out.nextPutAll_((this.copyFrom_to_(lastIndex, this.size())));                return out.contents();            }));        },        compare_caseSensitive_: function (aString, aBool) {            var map;            map = aBool.ifTrue_ifFalse_(block(function () {                return CaseSensitiveOrder;            }), block(function () {                return CaseInsensitiveOrder;            }));            return this.compare_with_collated_(this, aString, map);        },        isoToUtf8: function () {            var s;            s = WriteStream.on_((String.new_(this.size())));            this.do_(block(function (c) {                var v;                v = c.asciiValue();                return (v._greater(number(128))).ifFalse_ifTrue_(block(function () {                    return s.nextPut_(c);                }), block(function () {                    s.nextPut_((number(192)._plus((v._greater_greater(number(6))))).asCharacter());                    return s.nextPut_((number(128)._plus((v.bitAnd_(number(63))))).asCharacter());                }));            }));            return s.contents();        },        translateToUppercase: function () {            this.translateWith_(UppercasingTable);            return this;        },        findWordStart_startingAt_: function (key, start) {            var ind;            ind = start;            block(function () {                ind = this.findString_startingAt_caseSensitive_(key, ind, _false);                ind._equals(number(0)).ifTrue_(block(function () {                    nonLocalReturn(number(0));                }));                ind._equals(number(1)).ifTrue_(block(function () {                    nonLocalReturn(number(1));                }));                return (this.at_(ind._minus(number(1)))).isSeparator();            }).whileFalse_(block(function () {                return ind = ind._plus(number(1));            }));            return ind;        },        endsWithAnyOf_: function (aCollection) {            aCollection.do_(block(function (suffix) {                return (this.endsWith_(suffix)).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            return _false;        },        packageFileSpecFor_: function (aMetacelloPackagesSpec) {            return (function () {                var cascadeReceiver$ = (aMetacelloPackagesSpec.project().packageSpec());                cascadeReceiver$.file_(this);                return cascadeReceiver$.yourself();            }).apply(this);        },        expandMacrosWith_with_with_: function (anObject, anotherObject, thirdObject) {            return this.expandMacrosWithArguments_((_Array.with_with_with_(anObject, anotherObject, thirdObject)));        },        asPluralBasedOn_: function (aNumberOrCollection) {            return (aNumberOrCollection._equals(number(1)).or_(block(function () {                return aNumberOrCollection.isCollection().and_(block(function () {                    return aNumberOrCollection.size()._equals(number(1));                }));            }))).ifTrue_ifFalse_(block(function () {                return this;            }), block(function () {                return this._comma(string("s"));            }));        },        fetchRequiredForMetacelloMCVersion_: function (aMetacelloMCVersion) {            return aMetacelloMCVersion.doFetchRequiredFromArray_((_Array.with_(this)));        },        unescapePercents: function () {            return this.unescapePercentsWithTextEncoding_(string("utf-8"));        },        urlEncoded: function () {            return this.asUrl().asString();        },        macToSqueak: function () {            return this.collect_(block(function (each) {                return each.macToSqueak();            }));        },        addToMetacelloPackages_: function (aMetacelloPackagesSpec) {            var spec;            spec = (function () {                var cascadeReceiver$ = (aMetacelloPackagesSpec.project().packageSpec());                cascadeReceiver$.file_(this);                return cascadeReceiver$.yourself();            }).apply(this);            aMetacelloPackagesSpec.addMember_(((function () {                var cascadeReceiver$ = aMetacelloPackagesSpec.addMember();                cascadeReceiver$.name_(spec.name());                cascadeReceiver$.spec_(spec);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        adaptToNumber_andSend_: function (rcvr, selector) {            return rcvr.perform_with_(selector, this.asNumber());        },        findTokens_keep_: function (delimiters, keepers) {            var tokens; var keyStart; var keyStop;            tokens = OrderedCollection._new();            keyStop = number(1);            block(function () {                return keyStop._less_equals(this.size());            }).whileTrue_(block(function () {                keyStart = this.skipDelimiters_startingAt_(delimiters, keyStop);                keyStop.to_do_(keyStart._minus(number(1)), block(function (ii) {                    return (keepers.includes_((this.at_(ii)))).ifTrue_(block(function () {                        return tokens.add_((this.copyFrom_to_(ii, ii)));                    }));                }));                keyStop = this.findDelimiters_startingAt_(delimiters, keyStart);                return keyStart._less(keyStop).ifTrue_(block(function () {                    return tokens.add_((this.copyFrom_to_(keyStart, (keyStop._minus(number(1))))));                }));            }));            return tokens;        },        findSelector: function () {            var sel; var possibleParens;            sel = this.withBlanksTrimmed();            (sel.includes_(character(":"))).ifTrue_(block(function () {                sel = sel.copyReplaceAll_with_(string(":"), string(": "));                possibleParens = sel.findTokens_(Character.separators());                return sel = this._class().streamContents_(block(function (s) {                    var level;                    level = number(0);                    return possibleParens.do_(block(function (token) {                        var n;                        return (level._equals(number(0)).and_(block(function () {                            return token.endsWith_(string(":"));                        }))).ifTrue_ifFalse_(block(function () {                            return s.nextPutAll_(token);                        }), block(function () {                            (n = token.occurrencesOf_(character("(")))._greater(number(0)).ifTrue_(block(function () {                                return level = level._plus(n);                            }));                            (n = token.occurrencesOf_(character("[")))._greater(number(0)).ifTrue_(block(function () {                                return level = level._plus(n);                            }));                            (n = token.occurrencesOf_(character("]")))._greater(number(0)).ifTrue_(block(function () {                                return level = level._minus(n);                            }));                            return (n = token.occurrencesOf_(character(")")))._greater(number(0)).ifTrue_(block(function () {                                return level = level._minus(n);                            }));                        }));                    }));                }));            }));            sel.isEmpty().ifTrue_(block(function () {                nonLocalReturn(nil);            }));            sel.isOctetString().ifTrue_(block(function () {                return sel = sel.asOctetString();            }));            Symbol.hasInterned_ifTrue_(sel, block(function (aSymbol) {                nonLocalReturn(aSymbol);            }));            return nil;        },        asStringMorph: function () {            return StringMorph.contents_(this);        },        trimLeft: function () {            return this.trimLeft_(block(function (_char) {                return _char.isSeparator();            }));        },        isWideString: function () {            return _false;        },        squeakToIso: function () {            return this;        },        crc16: function () {            var crc;            crc = number(0);            number(1).to_do_(this.byteSize(), block(function (i) {                return crc = (crc.bitShift_(number(-8))).bitXor_((array([number(0), number(49345), number(49537), number(320), number(49921), number(960), number(640), number(49729), number(50689), number(1728), number(1920), number(51009), number(1280), number(50625), number(50305), number(1088), number(52225), number(3264), number(3456), number(52545), number(3840), number(53185), number(52865), number(3648), number(2560), number(51905), number(52097), number(2880), number(51457), number(2496), number(2176), number(51265), number(55297), number(6336), number(6528), number(55617), number(6912), number(56257), number(55937), number(6720), number(7680), number(57025), number(57217), number(8000), number(56577), number(7616), number(7296), number(56385), number(5120), number(54465), number(54657), number(5440), number(55041), number(6080), number(5760), number(54849), number(53761), number(4800), number(4992), number(54081), number(4352), number(53697), number(53377), number(4160), number(61441), number(12480), number(12672), number(61761), number(13056), number(62401), number(62081), number(12864), number(13824), number(63169), number(63361), number(14144), number(62721), number(13760), number(13440), number(62529), number(15360), number(64705), number(64897), number(15680), number(65281), number(16320), number(16000), number(65089), number(64001), number(15040), number(15232), number(64321), number(14592), number(63937), number(63617), number(14400), number(10240), number(59585), number(59777), number(10560), number(60161), number(11200), number(10880), number(59969), number(60929), number(11968), number(12160), number(61249), number(11520), number(60865), number(60545), number(11328), number(58369), number(9408), number(9600), number(58689), number(9984), number(59329), number(59009), number(9792), number(8704), number(58049), number(58241), number(9024), number(57601), number(8640), number(8320), number(57409), number(40961), number(24768), number(24960), number(41281), number(25344), number(41921), number(41601), number(25152), number(26112), number(42689), number(42881), number(26432), number(42241), number(26048), number(25728), number(42049), number(27648), number(44225), number(44417), number(27968), number(44801), number(28608), number(28288), number(44609), number(43521), number(27328), number(27520), number(43841), number(26880), number(43457), number(43137), number(26688), number(30720), number(47297), number(47489), number(31040), number(47873), number(31680), number(31360), number(47681), number(48641), number(32448), number(32640), number(48961), number(32000), number(48577), number(48257), number(31808), number(46081), number(29888), number(30080), number(46401), number(30464), number(47041), number(46721), number(30272), number(29184), number(45761), number(45953), number(29504), number(45313), number(29120), number(28800), number(45121), number(20480), number(37057), number(37249), number(20800), number(37633), number(21440), number(21120), number(37441), number(38401), number(22208), number(22400), number(38721), number(21760), number(38337), number(38017), number(21568), number(39937), number(23744), number(23936), number(40257), number(24320), number(40897), number(40577), number(24128), number(23040), number(39617), number(39809), number(23360), number(39169), number(22976), number(22656), number(38977), number(34817), number(18624), number(18816), number(35137), number(19200), number(35777), number(35457), number(19008), number(19968), number(36545), number(36737), number(20288), number(36097), number(19904), number(19584), number(35905), number(17408), number(33985), number(34177), number(17728), number(34561), number(18368), number(18048), number(34369), number(33281), number(17088), number(17280), number(33601), number(16640), number(33217), number(32897), number(16448)]).at_(((crc.bitXor_((this.byteAt_(i)))).bitAnd_(number(255)))._plus(number(1)))));            }));            return crc;        },        withBlanksCondensed: function () {            return String.streamContents_(block(function (stream) {                var trimmed; var lastBlank;                trimmed = this.withBlanksTrimmed();                lastBlank = _false;                return trimmed.do_(block(function (c) {                    (c.isSeparator().and_(block(function () {                        return lastBlank;                    }))).ifFalse_(block(function () {                        return stream.nextPut_(c);                    }));                    return lastBlank = c.isSeparator();                }));            }));        },        adaptToString_andSend_: function (rcvr, selector) {            return (rcvr.asNumber().perform_with_(selector, this.asNumber())).printString();        },        metacelloStringLessThanSelf_: function (aString) {            return aString._less(this);        },        isAllDigits: function () {            this.do_(block(function (c) {                return c.isDigit().ifFalse_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        byteSize: function () {            return this.subclassResponsibility();        },        lines: function () {            return _Array.new_streamContents_((this.size()._slash_slash(number(60)).max_(number(16))), block(function (lines) {                return this.linesDo_(block(function (aLine) {                    return lines.nextPut_(aLine);                }));            }));        },        javascriptOn_: function (aStream) {            JSStream.encodeString_on_(this, aStream);            return this;        },        setBlessingInMetacelloConfig_: function (aMetacelloConfig) {            aMetacelloConfig.setBlessingWithString_(this);            return this;        },        _plus: function (arg) {            return arg.adaptToString_andSend_(this, string("+"));        },        findTokens_: function (delimiters) {            var tokens; var keyStart; var keyStop; var separators;            tokens = OrderedCollection._new();            separators = delimiters.isCharacter().ifTrue_ifFalse_(block(function () {                return _Array.with_(delimiters);            }), block(function () {                return delimiters;            }));            keyStop = number(1);            block(function () {                return keyStop._less_equals(this.size());            }).whileTrue_(block(function () {                keyStart = this.skipDelimiters_startingAt_(separators, keyStop);                keyStop = this.findDelimiters_startingAt_(separators, keyStart);                return keyStart._less(keyStop).ifTrue_(block(function () {                    return tokens.add_((this.copyFrom_to_(keyStart, (keyStop._minus(number(1))))));                }));            }));            return tokens;        },        asWideString: function () {            this.isWideString().ifTrue_ifFalse_(block(function () {                nonLocalReturn(this);            }), block(function () {                nonLocalReturn(WideString.from_(this));            }));            return this;        },        correctAgainst_: function (wordList) {            var results;            results = this.correctAgainst_continuedFrom_(wordList, nil);            results = this.correctAgainst_continuedFrom_(nil, results);            return results;        },        convertToSystemString: function () {            return this.convertToWithConverter_(LanguageEnvironment.defaultSystemConverter());        },        loadRequiredForMetacelloMCVersion_: function (aMetacelloMCVersion) {            return aMetacelloMCVersion.doLoadRequiredFromArray_((_Array.with_(this)));        },        adaptToPoint_andSend_: function (rcvr, selector) {            return rcvr.perform_with_(selector, this.asNumber());        },        print_on_: function (anObject, aStream) {            aStream.nextPutAll_(this);            return this;        },        convertFromEncoding_: function (encodingName) {            return this.convertFromWithConverter_((TextConverter.newForEncoding_(encodingName)));        },        compare_: function (aString) {            return this.compare_caseSensitive_(aString, _false);        },        expandMacrosWith_with_: function (anObject, anotherObject) {            return this.expandMacrosWithArguments_((_Array.with_with_(anObject, anotherObject)));        },        mergeIntoMetacelloPackages_: function (aMetacelloPackagesSpec) {            var spec;            spec = (function () {                var cascadeReceiver$ = (aMetacelloPackagesSpec.project().packageSpec());                cascadeReceiver$.file_(this);                return cascadeReceiver$.yourself();            }).apply(this);            aMetacelloPackagesSpec.addMember_(((function () {                var cascadeReceiver$ = aMetacelloPackagesSpec.mergeMember();                cascadeReceiver$.name_(spec.name());                cascadeReceiver$.spec_(spec);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        seasideMimeType: function () {            return WAMimeType.fromString_(this);        },        isLiteral: function () {            return _true;        },        formatASN1TabLevel_: function (aTabLevel) {            var aReadStream; var aWriteStream;            aReadStream = ((this.copyWithoutAll_(array([character(" "), Character.tab(), Character.cr()]))).divideBySize_(number(2))).readStream();            aWriteStream = String._new().writeStream();            aWriteStream.nextPutAll_((aReadStream.formatASN1TabLevel_(aTabLevel)));            return aWriteStream.contents();        },        alike_: function (aString) {            var i; var j; var k; var minSize; var bonus;            minSize = (j = this.size()).min_((k = aString.size()));            bonus = (j._minus(k)).abs()._less(number(2)).ifTrue_ifFalse_(block(function () {                return number(1);            }), block(function () {                return number(0);            }));            i = number(1);            block(function () {                return (i._less_equals(minSize)).and_(block(function () {                    return ((this._super.at_(i)).bitAnd_(number(223)))._equals(((aString.at_(i)).asciiValue().bitAnd_(number(223))));                }));            }).whileTrue_(block(function () {                return i = i._plus(number(1));            }));            block(function () {                return (j._greater(number(0))).and_(block(function () {                    return (k._greater(number(0))).and_(block(function () {                        return ((this._super.at_(j)).bitAnd_(number(223)))._equals(((aString.at_(k)).asciiValue().bitAnd_(number(223))));                    }));                }));            }).whileTrue_(block(function () {                j = j._minus(number(1));                return k = k._minus(number(1));            }));            return i._minus(number(1))._plus(this.size())._minus(j)._plus(bonus);        },        serviceOrNil: function () {            return ServiceRegistry.current().serviceWithId_(this.asSymbol());        },        startsWithDigit: function () {            return this.size()._greater(number(0)).and_(block(function () {                return this.first().isDigit();            }));        },        encodeOn_: function (aDocument) {            aDocument.xmlEncoder().nextPutAll_(this);            return this;        },        format_: function (aCollection) {            return String.new_streamContents_(this.size(), block(function (result) {                var stream; var currentChar;                stream = this.readStream();                return block(function () {                    return (currentChar = stream.next())._equals_equals(nil);                }).whileFalse_(block(function () {                    return currentChar._equals_equals(character("{")).ifTrue_ifFalse_(block(function () {                        return result.nextPutAll_((this.evaluateExpression_parameters_((stream.upTo_(character("}"))).withBlanksTrimmed(), aCollection)));                    }), block(function () {                        return currentChar._equals_equals(character("\\")).ifFalse_ifTrue_(block(function () {                            return result.nextPut_(currentChar);                        }), block(function () {                            return (currentChar = stream.next()).ifNotNil_(block(function () {                                return result.nextPut_(currentChar);                            }));                        }));                    }));                }));            }));        },        withSeparatorsCompacted: function () {            var out; var _in; var next; var isSeparator;            this.isEmpty().ifTrue_(block(function () {                nonLocalReturn(this);            }));            out = WriteStream.on_((String.new_(this.size())));            _in = this.readStream();            isSeparator = block(function (_char) {                return _char.asciiValue()._less(number(256)).and_(block(function () {                    return CSSeparators.includes_(_char);                }));            });            block(function () {                return _in.atEnd();            }).whileFalse_(block(function () {                next = _in.next();                return (isSeparator.value_(next)).ifTrue_ifFalse_(block(function () {                    out.nextPut_(character(" "));                    return block(function () {                        return _in.atEnd().or_(block(function () {                            next = _in.next();                            return (isSeparator.value_(next)).ifTrue_ifFalse_(block(function () {                                return _false;                            }), block(function () {                                out.nextPut_(next);                                return _true;                            }));                        }));                    }).whileFalse();                }), block(function () {                    return out.nextPut_(next);                }));            }));            return out.contents();        },        uversionLessThan_: function (anObject) {            return anObject.isInteger().or_(block(function () {                return this._less(anObject);            }));        },        suggestedTypeNames: function () {            return _Array.streamContents_(block(function (stream) {                return this.withIndexDo_(block(function (eachChar, index) {                    return eachChar.isUppercase().ifTrue_(block(function () {                        stream.nextPut_((this.copyFrom_to_(index, this.size())).withBlanksTrimmed());                        return this.last()._equals(character("s")).ifTrue_(block(function () {                            return stream.nextPut_((this.copyFrom_to_(index, this.size()._minus(number(1)))).withBlanksTrimmed());                        }));                    }));                }));            }));        },        metacelloVersionComponentLessThan_: function (aMetacelloVersonComponent) {            return aMetacelloVersonComponent.metacelloStringLessThanSelf_(this);        },        translatedTo_: function (localeID) {            return localeID.translator().translate_(this);        },        contractTo_: function (smallSize) {            var leftSize;            this.size()._less_equals(smallSize).ifTrue_(block(function () {                nonLocalReturn(this);            }));            smallSize._less(number(5)).ifTrue_(block(function () {                nonLocalReturn(this.copyFrom_to_(number(1), smallSize));            }));            leftSize = smallSize._minus(number(2))._slash_slash(number(2));            return this.copyReplaceFrom_to_with_(leftSize._plus(number(1)), this.size()._minus((smallSize._minus(leftSize)._minus(number(3)))), string("..."));        },        findLastOccuranceOfString_startingAt_: function (subString, start) {            this.deprecated_(string("Use instead #findLastOccurrenceOfString:startingAt:"));            return this.findLastOccurrenceOfString_startingAt_(subString, start);        },        encodeForHTTPWithTextEncoding_conditionBlock_: function (encodingName, conditionBlock) {            var httpSafeStream; var encodedStream;            httpSafeStream = WriteStream.on_((String._new()));            encodedStream = MultiByteBinaryOrTextStream.on_((String.new_(number(6))));            encodedStream.converter_((TextConverter.newForEncoding_(encodingName)));            this.do_(block(function (c) {                var cont;                return (conditionBlock.value_(c)).ifTrue_ifFalse_(block(function () {                    return httpSafeStream.nextPut_((Character.value_(c.charCode())));                }), block(function () {                    (function () {                        var cascadeReceiver$ = encodedStream;                        cascadeReceiver$.text();                        return cascadeReceiver$.resetToStart();                    }).apply(this);                    encodedStream.nextPut_(c);                    encodedStream.position_(number(0));                    encodedStream.binary();                    cont = encodedStream.contents();                    return cont.do_(block(function (_byte) {                        httpSafeStream.nextPut_(character("%"));                        httpSafeStream.nextPut_((_byte._slash_slash(number(16))).asHexDigit());                        return httpSafeStream.nextPut_((_byte._backslash_backslash(number(16))).asHexDigit());                    }));                }));            }));            return httpSafeStream.contents();        },        adaptToCollection_andSend_: function (rcvr, selector) {            return rcvr.perform_with_(selector, this.asNumber());        },        withoutQuoting: function () {            var quote;            this.size()._less(number(2)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            quote = this.first();            (quote._equals(this.last()).and_(block(function () {                return quote._equals(character("'")).or_(block(function () {                    return quote._equals(character("\""));                }));            }))).ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.copyFrom_to_(number(2), this.size()._minus(number(1))));            }), block(function () {                nonLocalReturn(this);            }));            return this;        },        findBetweenSubStrs_: function (delimiters) {            var tokens; var keyStart; var keyStop;            tokens = OrderedCollection._new();            keyStop = number(1);            block(function () {                return keyStop._less_equals(this.size());            }).whileTrue_(block(function () {                keyStart = this.skipAnySubStr_startingAt_(delimiters, keyStop);                keyStop = this.findAnySubStr_startingAt_(delimiters, keyStart);                return keyStart._less(keyStop).ifTrue_(block(function () {                    return tokens.add_((this.copyFrom_to_(keyStart, (keyStop._minus(number(1))))));                }));            }));            return tokens;        },        asUppercase: function () {            return this.copy().asString().translateToUppercase();        },        asDuration: function () {            return Duration.fromString_(this);        },        asCapitalizedPhrase: function () {            var read; var words; var currentWord; var capitalizedWord;            (this.noneSatisfy_(block(function (ea) {                return ea.isLowercase();            }))).ifTrue_(block(function () {                nonLocalReturn(this);            }));            words = WriteStream.on_(String._new());            read = ReadStream.on_(this);            block(function () {                return read.atEnd();            }).whileFalse_(block(function () {                currentWord = WriteStream.on_(String._new());                currentWord.nextPut_(read.next());                block(function () {                    var x;                    x = read.peek();                    return x.isNil().or_(block(function () {                        return x.isUppercase();                    }));                }).whileFalse_(block(function () {                    return currentWord.nextPut_(read.next());                }));                capitalizedWord = currentWord.contents().capitalized();                (array([string("Of"), string("In"), string("At"), string("A"), string("Or"), string("To"), string("By")]).includes_(capitalizedWord)).ifTrue_(block(function () {                    return capitalizedWord = capitalizedWord.asLowercase();                }));                words.nextPutAll_(capitalizedWord);                return words.nextPutAll_(string(" "));            }));            words.skip_(number(-1));            return words.contents();        },        lineNumber_: function (anIndex) {            var lineCount;            lineCount = number(0);            this.lineIndicesDo_(block(function (start, endWithoutDelimiters, end) {                return (lineCount = lineCount._plus(number(1)))._equals(anIndex).ifTrue_(block(function () {                    nonLocalReturn(this.copyFrom_to_(start, endWithoutDelimiters));                }));            }));            return nil;        },        mergeIntoMetacelloRepositories_: function (aMetacelloRepositoriesSpec) {            var spec;            spec = (function () {                var cascadeReceiver$ = (aMetacelloRepositoriesSpec.project().repositorySpec());                cascadeReceiver$.description_(this);                return cascadeReceiver$.yourself();            }).apply(this);            aMetacelloRepositoriesSpec.addMember_(((function () {                var cascadeReceiver$ = aMetacelloRepositoriesSpec.mergeMember();                cascadeReceiver$.name_(spec.name());                cascadeReceiver$.spec_(spec);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        removeFromMetacelloPackages_: function (aMetacelloPackagesSpec) {            aMetacelloPackagesSpec.addMember_(((function () {                var cascadeReceiver$ = aMetacelloPackagesSpec.removeMember();                cascadeReceiver$.name_(this);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        putOn_: function (aStream) {            return aStream.nextPutAll_(this);        },        findString_startingAt_: function (subString, start) {            return this.findString_startingAt_caseSensitive_(subString, start, _true);        },        onlyLetters: function () {            return this.select_(block(function (each) {                return each.isLetter();            }));        },        excerpt_: function (aString) {            return this.excerpt_radius_(aString, number(100));        },        asMorph: function () {            return StringMorph.contents_(this);        },        caseInsensitiveLessOrEqual_: function (aString) {            return (this.compare_caseSensitive_(aString, _false))._less_equals(number(2));        },        asMetacelloVersionNumber: function () {            return MetacelloVersionNumber.fromString_(this);        },        indexOf_startingAt_: function (aCharacter, start) {            (aCharacter.isCharacter()).ifFalse_(block(function () {                nonLocalReturn(number(0));            }));            return this._class().indexOfAscii_inString_startingAt_(aCharacter.asciiValue(), this, start);        },        asHex: function () {            var stream;            stream = WriteStream.on_((String.new_(this.size()._times(number(4)))));            this.do_(block(function (ch) {                return stream.nextPutAll_(ch.hex());            }));            return stream.contents();        },        truncate: function () {            return this.truncate_(number(30));        },        surroundedBySingleQuotes: function () {            return character("'").asString()._comma(this)._comma(character("'").asString());        },        unparenthetically: function () {            var curr;            curr = this;            block(function () {                return ((curr.first()._equals(character("("))).and_(block(function () {                    return curr.last()._equals(character(")"));                })));            }).whileTrue_(block(function () {                return curr = curr.copyFrom_to_(number(2), (curr.size()._minus(number(1))));            }));            return curr;        },        asPacked: function () {            return this.inject_into_(number(0), block(function (pack, next) {                return pack._times(number(256))._plus(next.asInteger());            }));        },        asCharacter: function () {            return this.size()._greater(number(0)).ifTrue_ifFalse_(block(function () {                return this.first();            }), block(function () {                return character("Â·");            }));        },        unzipped: function () {            var magic1; var magic2;            magic1 = (this.at_(number(1))).asInteger();            magic2 = (this.at_(number(2))).asInteger();            (magic1._equals(number(31)).and_(block(function () {                return magic2._equals(number(139));            }))).ifFalse_(block(function () {                nonLocalReturn(this);            }));            return (GZipReadStream.on_(this)).upToEnd();        },        setDescriptionInMetacelloConfig_: function (aMetacelloConfig) {            aMetacelloConfig.setDescriptionWithString_(this);            return this;        },        indexOf_startingAt_ifAbsent_: function (aCharacter, start, aBlock) {            var ans;            (aCharacter.isCharacter()).ifFalse_(block(function () {                nonLocalReturn(aBlock.value());            }));            ans = this._class().indexOfAscii_inString_startingAt_(aCharacter.asciiValue(), this, start);            ans._equals(number(0)).ifTrue_ifFalse_(block(function () {                nonLocalReturn(aBlock.value());            }), block(function () {                nonLocalReturn(ans);            }));            return this;        },        expandMacrosWithArguments_: function (anArray) {            var newStream; var readStream; var _char; var index;            newStream = WriteStream.on_((String.new_(this.size())));            readStream = ReadStream.on_(this);            block(function () {                return readStream.atEnd();            }).whileFalse_(block(function () {                _char = readStream.next();                return _char._equals_equals(character("<")).ifTrue_ifFalse_(block(function () {                    var nextChar;                    nextChar = readStream.next().asUppercase();                    nextChar._equals_equals(character("N")).ifTrue_(block(function () {                        return newStream.cr();                    }));                    nextChar._equals_equals(character("T")).ifTrue_(block(function () {                        return newStream.tab();                    }));                    nextChar.isDigit().ifTrue_(block(function () {                        index = nextChar.digitValue();                        return block(function () {                            return readStream.atEnd().or_(block(function () {                                return (nextChar = readStream.next().asUppercase()).isDigit().not();                            }));                        }).whileFalse_(block(function () {                            return index = index._times(number(10))._plus(nextChar.digitValue());                        }));                    }));                    nextChar._equals_equals(character("?")).ifTrue_(block(function () {                        var trueString; var falseString;                        trueString = readStream.upTo_(character(":"));                        falseString = readStream.upTo_(character(">"));                        readStream.position_(readStream.position()._minus(number(1)));                        return newStream.nextPutAll_(((anArray.at_(index)).ifTrue_ifFalse_(block(function () {                            return trueString;                        }), block(function () {                            return falseString;                        }))));                    }));                    nextChar._equals_equals(character("P")).ifTrue_(block(function () {                        return newStream.nextPutAll_((anArray.at_(index)).printString());                    }));                    nextChar._equals_equals(character("S")).ifTrue_(block(function () {                        return newStream.nextPutAll_((anArray.at_(index)));                    }));                    return readStream.skipTo_(character(">"));                }), block(function () {                    return newStream.nextPut_((_char._equals_equals(character("%")).ifTrue_ifFalse_(block(function () {                        return readStream.next();                    }), block(function () {                        return _char;                    }))));                }));            }));            return newStream.contents();        },        asByteString: function () {            return this.asOctetString();        },        base64Encoded: function () {            return (Base64MimeConverter.mimeEncode_((ReadStream.on_(this)))).contents();        },        caseSensitiveLessOrEqual_: function (aString) {            return (this.compare_caseSensitive_(aString, _true))._less_equals(number(2));        },        basicType: function () {            return string("String");        },        greaseInteger: function () {            var number; var stream; var negated; var _char;            number = nil;            stream = this.readStream();            negated = stream.peek()._equals(character("-"));            negated.ifTrue_(block(function () {                return stream.next();            }));            block(function () {                return stream.atEnd().not().and_(block(function () {                    return (_char = stream.next()).isDigit();                }));            }).whileTrue_(block(function () {                return number = (number.isNil().ifTrue_ifFalse_(block(function () {                    return number(0);                }), block(function () {                    return number(10)._times(number);                })))._plus((_char.greaseInteger()._minus(character("0").greaseInteger())));            }));            return (number.isNil().or_(block(function () {                return negated.not();            }))).ifFalse_ifTrue_(block(function () {                return number.negated();            }), block(function () {                return number;            }));        },        jsonOn_: function (aStream) {            this.javascriptOn_(aStream);            return this;        },        _comma: function (anObject) {            return this.copyReplaceFrom_to_with_(this.size()._plus(number(1)), this.size(), anObject.asString());        },        asFileName: function () {            var string; var checkedString;            string = FileDirectory.checkName_fixErrors_(this, _true);            checkedString = (FilePath.pathName_(string)).asVmPathName();            return (FilePath.pathName_isEncoded_(checkedString, _true)).asSqueakPathName();        },        romanNumber: function () {            var value; var v1; var v2;            value = v1 = v2 = number(0);            this.reverseDo_(block(function (each) {                v1 = array([number(1), number(5), number(10), number(50), number(100), number(500), number(1000)]).at_((string("IVXLCDM").indexOf_(each)));                v1._greater_equals(v2).ifTrue_ifFalse_(block(function () {                    return value = value._plus(v1);                }), block(function () {                    return value = value._minus(v1);                }));                return v2 = v1;            }));            return value;        },        trimLeft_: function (aBlock) {            return this.trimLeft_right_(aBlock, block(function (_char) {                return _false;            }));        },        expandMacrosWith_: function (anObject) {            return this.expandMacrosWithArguments_((_Array.with_(anObject)));        },        asURI: function () {            return URI.fromString_(this);        },        pluralize: function () {            return GRInflector.pluralize_(this);        },        destroy: function () {            number(1).to_do_(this.size(), block(function (n) {                return this.at_put_(n, (Character.value_(number(0))));            }));            return this;        },        asDateAndTime: function () {            return DateAndTime.fromString_(this);        },        asOctetString: function () {            var string;            string = String.new_(this.size());            number(1).to_do_(this.size(), block(function (i) {                return string.at_put_(i, (this.at_(i)));            }));            return string;        },        recordRequiredForMetacelloMCVersion_: function (aMetacelloMCVersion) {            return aMetacelloMCVersion.doRecordRequiredFromArray_((_Array.with_(this)));        },        setIncludesInMetacelloPackage_: function (aMetacelloPackageSpec) {            aMetacelloPackageSpec.setIncludes_(array([this]));            return this;        },        asTimeStamp: function () {            return TimeStamp.fromString_(this);        },        newTileMorphRepresentative: function () {            return (function () {                var cascadeReceiver$ = TileMorph._new();                cascadeReceiver$.setLiteral_(this);                return cascadeReceiver$.addSuffixIfCan();            }).apply(this);        },        setAuthorInMetacelloVersion_: function (aMetacelloVersionSpec) {            aMetacelloVersionSpec.setAuthor_(((function () {                var cascadeReceiver$ = aMetacelloVersionSpec.project().valueHolderSpec();                cascadeReceiver$.value_(this);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        _slash: function (arg) {            return arg.adaptToString_andSend_(this, string("/"));        },        correctAgainstEnumerator_continuedFrom_: function (wordBlock, oldCollection) {            var choices; var results; var maxChoices; var scoreMin;            scoreMin = this.size()._slash_slash(number(2)).min_(number(3));            maxChoices = number(10);            oldCollection.isNil().ifTrue_ifFalse_(block(function () {                return choices = SortedCollection.sortBlock_(block(function (x, y) {                    return x.value()._greater(y.value());                }));            }), block(function () {                return choices = oldCollection;            }));            wordBlock.isNil().ifTrue_ifFalse_(block(function () {                results = OrderedCollection._new();                return number(1).to_do_((maxChoices.min_(choices.size())), block(function (i) {                    return results.add_((choices.at_(i)).key());                }));            }), block(function () {                wordBlock.value_(block(function (word) {                    var score;                    return (score = this.alike_(word))._greater_equals(scoreMin).ifTrue_(block(function () {                        choices.add_((Association.key_value_(word, score)));                        return (choices.size()._greater_equals(maxChoices)).ifTrue_(block(function () {                            return scoreMin = (choices.at_(maxChoices)).value();                        }));                    }));                }));                return results = choices;            }));            return results;        },        withLineEndings_: function (lineEndingString) {            var stream;            stream = nil;            this.lineIndicesDo_(block(function (start, endWithoutDelimiters, end) {                (stream.isNil().and_(block(function () {                    return endWithoutDelimiters._tilde_equals(end);                }))).ifTrue_(block(function () {                    return (this.copyFrom_to_(endWithoutDelimiters._plus(number(1)), end))._equals(lineEndingString).ifFalse_(block(function () {                        stream = WriteStream.with_(this.copy());                        return stream.position_(start._minus(number(1)));                    }));                }));                return stream.ifNotNil_(block(function () {                    stream.next_putAll_startingAt_(endWithoutDelimiters._minus(start)._plus(number(1)), this, start);                    return endWithoutDelimiters._equals(end).ifFalse_(block(function () {                        return stream.nextPutAll_(lineEndingString);                    }));                }));            }));            return stream.ifNil_ifNotNil_(block(function () {                return this;            }), block(function () {                return stream.position()._equals(this.size()).ifTrue_ifFalse_(block(function () {                    return stream.originalContents();                }), block(function () {                    return stream.contents();                }));            }));        },        indexOfSubCollection_: function (sub) {            string("Collectn");            return this.indexOfSubCollection_startingAt_ifAbsent_(sub, number(1), block(function () {                return number(0);            }));        },        tabDelimitedFieldsDo_: function (aBlock) {            var start; var end;            start = number(1);            block(function () {                return start._less_equals(this.size());            }).whileTrue_(block(function () {                end = this.indexOf_startingAt_ifAbsent_(Character.tab(), start, block(function () {                    return this.size()._plus(number(1));                }));                end = end._minus(number(1));                aBlock.value_((this.copyFrom_to_(start, end)));                return start = end._plus(number(2));            }));            return this;        },        isPositiveInteger: function () {            this.isEmpty().ifTrue_(block(function () {                nonLocalReturn(_false);            }));            this.detect_ifNone_(block(function (letter) {                return letter.isDigit().not();            }), block(function () {                nonLocalReturn(_true);            }));            return _false;        },        _minus: function (arg) {            return arg.adaptToString_andSend_(this, string("-"));        },        writeLeadingCharRunsOn_: function (stream) {            var runLength; var runValues; var runStart; var leadingChar;            this.isEmpty().ifTrue_(block(function () {                nonLocalReturn(this);            }));            runLength = OrderedCollection._new();            runValues = OrderedCollection._new();            runStart = number(1);            leadingChar = (this.at_(runStart)).leadingChar();            number(2).to_do_(this.size(), block(function (index) {                return (this.at_(index)).leadingChar()._equals(leadingChar).ifFalse_(block(function () {                    runValues.add_(leadingChar);                    runLength.add_((index._minus(runStart)));                    leadingChar = (this.at_(index)).leadingChar();                    return runStart = index;                }));            }));            runValues.add_((this.last()).leadingChar());            runLength.add_(this.size()._plus(number(1))._minus(runStart));            stream.nextPut_(character("("));            runLength.do_(block(function (rr) {                rr.printOn_(stream);                return stream.space();            }));            (function () {                var cascadeReceiver$ = stream;                cascadeReceiver$.skip_(number(-1));                return cascadeReceiver$.nextPut_(character(")"));            }).apply(this);            runValues.do_(block(function (vv) {                vv.printOn_(stream);                return stream.nextPut_(character(","));            }));            stream.skip_(number(-1));            return this;        },        asFunction_: function (aCollection) {            return (JSStream.on_(this)).asFunction_(aCollection);        },        truncateWithElipsisTo_: function (maxLength) {            return this.size()._less_equals(maxLength).ifTrue_ifFalse_(block(function () {                return this;            }), block(function () {                return (this.copyFrom_to_(number(1), (maxLength._minus(number(3)))))._comma(string("..."));            }));        },        asDate: function () {            return Date.fromString_(this);        },        utf8ToIso: function () {            var s; var i; var c; var v; var c2; var v2;            s = WriteStream.on_((String.new_(this.size())));            i = number(1);            block(function () {                return i._less_equals(this.size());            }).whileTrue_(block(function () {                c = this.at_(i);                i = i._plus(number(1));                v = c.asciiValue();                return (v._greater(number(128))).ifFalse_ifTrue_(block(function () {                    return s.nextPut_(c);                }), block(function () {                    return ((v.bitAnd_(number(252)))._equals(number(192))).ifFalse_ifTrue_(block(function () {                        return this.error_(string("illegal UTF-8 ISO character"));                    }), block(function () {                        (i._greater(this.size())).ifTrue_(block(function () {                            return this.error_(string("illegal end-of-string, expected 2nd byte of UTF-8"));                        }));                        c2 = this.at_(i);                        i = i._plus(number(1));                        v2 = c2.asciiValue();                        ((v2.bitAnd_(number(192)))._equals(number(128))).ifFalse_(block(function () {                            return this.error_(string("illegal 2nd UTF-8 char"));                        }));                        return s.nextPut_(((v2.bitAnd_(number(63))).bitOr_(((v._less_less(number(6))).bitAnd_(number(192))))).asCharacter());                    }));                }));            }));            return s.contents();        },        withBlanksTrimmed: function () {            var first; var last;            first = this.indexOfAnyOf_startingAt_ifAbsent_(CSNonSeparators, number(1), block(function () {                return number(0);            }));            first._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(string(""));            }));            last = this.lastIndexOfAnyOf_startingAt_ifAbsent_(CSNonSeparators, this.size(), block(function () {                return this.size();            }));            (first._equals(number(1)).and_(block(function () {                return last._equals(this.size());            }))).ifTrue_(block(function () {                nonLocalReturn(this.copy());            }));            return this.copyFrom_to_(first, last);        },        convertToSuperSwikiServerString: function () {            return this.convertToEncoding_(string("shift_jis"));        },        asUrlRelativeTo_: function (aUrl) {            return aUrl.newFromRelativeText_(this);        },        findTokens_includes_: function (delimiters, subString) {            return (this.findTokens_(delimiters)).detect_ifNone_(block(function (str) {                return (str.includesSubString_(subString));            }), block(function () {                return nil;            }));        },        translateToLowercase: function () {            this.translateWith_(LowercasingTable);            return this;        },        asUnsignedInteger: function () {            var start; var stream;            start = this.findFirst_(block(function (_char) {                return _char.isDigit();            }));            start.isZero().ifTrue_(block(function () {                nonLocalReturn(nil);            }));            stream = (ReadStream.on_(this)).position_(start._minus(number(1)));            return Integer.readFrom_(stream);        },        setLoadsInMetacelloProject_: function (aMetacelloPackageSpec) {            aMetacelloPackageSpec.setLoads_(array([this]));            return this;        },        _greater: function (aString) {            return (this.compare_with_collated_(this, aString, AsciiOrder))._equals(number(3));        },        utf8ToSqueak: function () {            return this.convertFromWithConverter_(UTF8TextConverter._new());        },        asUnHtml: function () {            var _in; var out; var _char; var rest;            _in = ReadStream.on_(this);            out = WriteStream.on_((String.new_(this.size())));            block(function () {                return _in.atEnd();            }).whileFalse_(block(function () {                return _in.peek()._equals(character("<")).ifTrue_ifFalse_(block(function () {                    return _in.unCommand();                }), block(function () {                    return (_char = _in.next())._equals(character("&")).ifTrue_ifFalse_(block(function () {                        rest = _in.upTo_(character(";"));                        return out.nextPut_((HtmlEntities.at_ifAbsent_(rest, block(function () {                            return character(" ");                        }))));                    }), block(function () {                        return out.nextPut_(_char);                    }));                }));            }));            return out.contents();        },        deepCopy: function () {            return this.shallowCopy();        },        unescapePercentsWithTextEncoding_: function (encodingName) {            var unescaped; var _char; var asciiVal; var specialChars; var oldPos; var pos; var converter;            unescaped = ReadWriteStream.on_(String._new());            specialChars = string("+%").asCharacterSet();            oldPos = number(1);            block(function () {                pos = this.indexOfAnyOf_startingAt_(specialChars, oldPos);                return pos._greater(number(0));            }).whileTrue_(block(function () {                unescaped.nextPutAll_((this.copyFrom_to_(oldPos, pos._minus(number(1)))));                _char = this.at_(pos);                return (_char._equals(character("%")).and_(block(function () {                    return pos._plus(number(2))._less_equals(this.size());                }))).ifTrue_ifFalse_(block(function () {                    asciiVal = (this.at_(pos._plus(number(1)))).asUppercase().digitValue()._times(number(16))._plus((this.at_(pos._plus(number(2)))).asUppercase().digitValue());                    asciiVal._greater(number(255)).ifTrue_(block(function () {                        nonLocalReturn(this);                    }));                    unescaped.nextPut_((Character.value_(asciiVal)));                    pos = pos._plus(number(3));                    pos._less_equals(this.size()).ifFalse_(block(function () {                        return _char = nil;                    }));                    return oldPos = pos;                }), block(function () {                    _char._equals(character("+")).ifTrue_ifFalse_(block(function () {                        return unescaped.nextPut_(character(" "));                    }), block(function () {                        return unescaped.nextPut_(_char);                    }));                    return oldPos = pos._plus(number(1));                }));            }));            oldPos._less_equals(this.size()).ifTrue_(block(function () {                return unescaped.nextPutAll_((this.copyFrom_to_(oldPos, this.size())));            }));            converter = (TextConverter.newForEncoding_(encodingName)).ifNil_(block(function () {                return TextConverter.newForEncoding_(nil);            }));            return block(function () {                return unescaped.contents().convertFromWithConverter_(converter);            }).on_do_(Error, block(function () {                return unescaped.contents();            }));        },        removeFromMetacelloRepositories_: function (aMetacelloRepositoriesSpec) {            aMetacelloRepositoriesSpec.addMember_(((function () {                var cascadeReceiver$ = aMetacelloRepositoriesSpec.removeMember();                cascadeReceiver$.name_(this);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        decodeQuotedPrintable: function () {            return QuotedPrintableMimeConverter.mimeDecode_as_(this, this._class());        },        expandMacrosWith_with_with_with_: function (anObject, anotherObject, thirdObject, fourthObject) {            return this.expandMacrosWithArguments_((_Array.with_with_with_with_(anObject, anotherObject, thirdObject, fourthObject)));        },        setBlessingInMetacelloVersion_: function (aMetacelloVersionSpec) {            aMetacelloVersionSpec.setBlessing_(((function () {                var cascadeReceiver$ = aMetacelloVersionSpec.project().valueHolderSpec();                cascadeReceiver$.value_(this);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        wordBefore_: function (anIndex) {            var sep; var tok;            tok = _false;            sep = anIndex;            block(function () {                return sep._greater(number(0)).and_(block(function () {                    return (this.at_(sep)).tokenish();                }));            }).whileTrue_(block(function () {                tok = _true;                return sep = sep._minus(number(1));            }));            return tok.ifTrue_ifFalse_(block(function () {                return this.copyFrom_to_(sep._plus(number(1)), anIndex);            }), block(function () {                return String._new();            }));        },        padded_to_with_: function (leftOrRight, length, _char) {            leftOrRight._equals(string("left")).ifTrue_(block(function () {                nonLocalReturn((String.new_withAll_((length._minus(this.size()).max_(number(0))), _char))._comma(this));            }));            leftOrRight._equals(string("right")).ifTrue_(block(function () {                nonLocalReturn(this._comma((String.new_withAll_((length._minus(this.size()).max_(number(0))), _char))));            }));            return this;        },        escapeEntities: function () {            return this.species().streamContents_(block(function (s) {                return this.do_(block(function (c) {                    return s.nextPutAll_(c.escapeEntities());                }));            }));        },        encodeForHTTP: function () {            return this.encodeForHTTPWithTextEncoding_conditionBlock_(string("utf-8"), block(function (c) {                return c.isSafeForHTTP();            }));        },        numArgs: function () {            var firstChar; var numColons; var excess; var start; var ix;            this.size()._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(number(-1));            }));            firstChar = this.at_(number(1));            (firstChar.isLetter().or_(block(function () {                return firstChar._equals(character(":"));            }))).ifTrue_(block(function () {                this._class().isBytes().ifTrue_ifFalse_(block(function () {                    return (this.findSubstring_in_startingAt_matchTable_(string("~"), this, number(1), Tokenish))._greater(number(0)).ifTrue_(block(function () {                        nonLocalReturn(number(-1));                    }));                }), block(function () {                    return number(2).to_do_(this.size(), block(function (i) {                        return (this.at_(i)).tokenish().ifFalse_(block(function () {                            nonLocalReturn(number(-1));                        }));                    }));                }));                numColons = number(0);                start = number(1);                block(function () {                    return (ix = this.indexOf_startingAt_(character(":"), start))._greater(number(0));                }).whileTrue_(block(function () {                    numColons = numColons._plus(number(1));                    return start = ix._plus(number(1));                }));                numColons._equals(number(0)).ifTrue_(block(function () {                    nonLocalReturn(number(0));                }));                firstChar._equals(character(":")).ifTrue_ifFalse_(block(function () {                    return excess = number(2);                }), block(function () {                    return excess = number(0);                }));                return this.last()._equals(character(":")).ifTrue_ifFalse_(block(function () {                    nonLocalReturn(numColons._minus(excess));                }), block(function () {                    nonLocalReturn(numColons._minus(excess)._minus(number(1)));                }));            }));            firstChar.isSpecial().ifTrue_(block(function () {                this.size()._equals(number(1)).ifTrue_(block(function () {                    nonLocalReturn(number(1));                }));                number(2).to_do_(this.size(), block(function (i) {                    return (this.at_(i)).isSpecial().ifFalse_(block(function () {                        nonLocalReturn(number(-1));                    }));                }));                nonLocalReturn(number(1));            }));            return number(-1);        },        lineCount: function () {            var lineCount;            lineCount = number(0);            this.lineIndicesDo_(block(function (start, endWithoutDelimiters, end) {                return lineCount = lineCount._plus(number(1));            }));            return lineCount;        },        withoutJustTrailingDigits: function () {            var firstDigit;            firstDigit = (this.findFirst_(block(function (m) {                return m.isDigit();            })));            return firstDigit._greater(number(0)).ifTrue_ifFalse_(block(function () {                return (this.copyFrom_to_(number(1), firstDigit._minus(number(1)))).withoutTrailingBlanks();            }), block(function () {                return this;            }));        },        charactersExactlyMatching_: function (aString) {            var count;            count = this.size().min_(aString.size());            number(1).to_do_(count, block(function (i) {                return (this.at_(i))._equals((aString.at_(i))).ifFalse_(block(function () {                    nonLocalReturn(i._minus(number(1)));                }));            }));            return count;        },        withCRs: function () {            return this.collect_(block(function (c) {                return c._equals(character("\\")).ifTrue_ifFalse_(block(function () {                    return Character.cr();                }), block(function () {                    return c;                }));            }));        },        findSubstring_in_startingAt_matchTable_: function (key, body, start, matchTable) {            var index; var c1; var c2;            matchTable._equals_equals(nil).ifTrue_(block(function () {                key.size()._equals(number(0)).ifTrue_(block(function () {                    nonLocalReturn(number(0));                }));                start.to_do_(body.size()._minus(key.size())._plus(number(1)), block(function (startIndex) {                    index = number(1);                    return block(function () {                        return (body.at_(startIndex._plus(index)._minus(number(1))))._equals((key.at_(index)));                    }).whileTrue_(block(function () {                        index._equals(key.size()).ifTrue_(block(function () {                            nonLocalReturn(startIndex);                        }));                        return index = index._plus(number(1));                    }));                }));                nonLocalReturn(number(0));            }));            key.size()._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(number(0));            }));            start.to_do_(body.size()._minus(key.size())._plus(number(1)), block(function (startIndex) {                index = number(1);                return block(function () {                    c1 = body.at_(startIndex._plus(index)._minus(number(1)));                    c2 = key.at_(index);                    return ((c1.leadingChar()._equals(number(0)).and_(block(function () {                        return c1.asciiValue()._less(matchTable.size());                    }))).ifTrue_ifFalse_(block(function () {                        return matchTable.at_(c1.asciiValue()._plus(number(1)));                    }), block(function () {                        return c1.asciiValue()._plus(number(1));                    })))._equals(((c2.leadingChar()._equals(number(0)).and_(block(function () {                        return c2.asciiValue()._less(matchTable.size());                    }))).ifTrue_ifFalse_(block(function () {                        return matchTable.at_(c2.asciiValue()._plus(number(1)));                    }), block(function () {                        return c2.asciiValue()._plus(number(1));                    }))));                }).whileTrue_(block(function () {                    index._equals(key.size()).ifTrue_(block(function () {                        nonLocalReturn(startIndex);                    }));                    return index = index._plus(number(1));                }));            }));            return number(0);        },        tokensBasedOn_: function (aChar) {            var result; var end; var begin;            result = WriteStream.on_((_Array.new_(number(10))));            begin = number(1);            block(function () {                end = this.indexOf_startingAt_ifAbsent_(aChar, begin, block(function () {                    return nil;                }));                return end._tilde_tilde(nil);            }).whileTrue_(block(function () {                result.nextPut_((this.copyFrom_to_(begin, end._minus(number(1)))));                return begin = end._plus(number(1));            }));            result.nextPut_((this.copyFrom_to_(begin, this.size())));            return result.contents();        },        setRequiresInMetacelloPackage_: function (aMetacelloPackageSpec) {            aMetacelloPackageSpec.setRequires_(array([this]));            return this;        },        _less: function (aString) {            return (this.compare_with_collated_(this, aString, AsciiOrder))._equals(number(1));        },        asText: function () {            return Text.fromString_(this);        },        evaluateExpression_parameters_: function (aString, aCollection) {            var index;            index = Integer.readFrom_base_(aString.readStream(), number(10));            index.isZero().ifTrue_(block(function () {                nonLocalReturn(string("[invalid subscript: {1}]").format_(array([aString])));            }));            index._greater(aCollection.size()).ifTrue_(block(function () {                nonLocalReturn(string("[subscript is out of bounds: {1}]").format_(array([aString])));            }));            return (aCollection.at_(index)).asString();        },        setDescriptionInMetacelloVersion_: function (aMetacelloVersionSpec) {            aMetacelloVersionSpec.setDescription_(((function () {                var cascadeReceiver$ = aMetacelloVersionSpec.project().valueHolderSpec();                cascadeReceiver$.value_(this);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        truncate_: function (anInteger) {            return this.truncate_ellipsis_(anInteger, string("..."));        },        asIdentifier_: function (shouldBeCapitalized) {            var aString; var firstChar; var firstLetterPosition;            aString = this.select_(block(function (el) {                return el.isAlphaNumeric();            }));            firstLetterPosition = aString.findFirst_(block(function (ch) {                return ch.isLetter();            }));            aString = firstLetterPosition._equals(number(0)).ifFalse_ifTrue_(block(function () {                return aString.copyFrom_to_(firstLetterPosition, aString.size());            }), block(function () {                return string("a")._comma(aString);            }));            firstChar = shouldBeCapitalized.ifTrue_ifFalse_(block(function () {                return aString.first().asUppercase();            }), block(function () {                return aString.first().asLowercase();            }));            return firstChar.asString()._comma((aString.copyFrom_to_(number(2), aString.size())));        },        excerpt_radius_: function (aString, anInteger) {            return this.excerpt_radius_ellipsis_(aString, anInteger, string("..."));        },        expandMacros: function () {            return this.expandMacrosWithArguments_(array([]));        },        linesDo_: function (aBlock) {            this.lineIndicesDo_(block(function (start, endWithoutDelimiters, end) {                return aBlock.value_((this.copyFrom_to_(start, endWithoutDelimiters)));            }));            return this;        },        asn1Tag: function () {            return number(12);        },        endsWith_: function (suffix) {            var extra;            (extra = this.size()._minus(suffix.size()))._less(number(0)).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            return (this.findString_startingAt_(suffix, extra._plus(number(1))))._greater(number(0));        },        encodeDoublingQuoteOn_: function (aStream) {            var x;            aStream.print_(character("'"));            number(1).to_do_(this.size(), block(function (i) {                aStream.print_((x = this.at_(i)));                return x._equals(character("'")).ifTrue_(block(function () {                    return aStream.print_(x);                }));            }));            aStream.print_(character("'"));            return this;        },        lastSpacePosition: function () {            this.size().to_by_do_(number(1), number(-1), block(function (i) {                return ((this.at_(i)).isSeparator()).ifTrue_(block(function () {                    nonLocalReturn(i);                }));            }));            return number(0);        },        splitInteger: function () {            var pos;            (pos = this.findFirst_(block(function (d) {                return d.isDigit().not();            })))._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(_Array.with_with_(string(""), this.asNumber()));            }));            this.first().isDigit().ifTrue_(block(function () {                nonLocalReturn(_Array.with_with_((this.copyFrom_to_(number(1), pos._minus(number(1)))).asNumber(), (this.copyFrom_to_(pos, this.size()))));            }));            (pos = this.findFirst_(block(function (d) {                return d.isDigit();            })))._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(_Array.with_with_(this, number(0)));            }));            return _Array.with_with_((this.copyFrom_to_(number(1), pos._minus(number(1)))), (this.copyFrom_to_(pos, this.size())).asNumber());        },        asParagraph: function () {            return Paragraph.withText_(this.asText());        },        stringRepresentation: function () {            return this;        },        hashWithInitialHash_: function (initialHash) {            return this._class().stringHash_initialHash_(this, initialHash);        },        _greater_equals: function (aString) {            return (this.compare_with_collated_(this, aString, AsciiOrder))._greater_equals(number(2));        },        resolvePackageSpecsNamedForMetacelloMCVersion_visited_ifAbsent_: function (aMetacelloMCVersion, visited, aBlock) {            return aMetacelloMCVersion.allPackagesForSpecs_visited_(array([aMetacelloMCVersion.spec().packageNamed_ifAbsent_(this, aBlock)]), visited);        },        asUrl: function () {            return Url.absoluteFromText_(this);        },        withoutLeadingDigits: function () {            var firstNonDigit;            firstNonDigit = (this.findFirst_(block(function (m) {                return m.isDigit().not().and_(block(function () {                    return m._tilde_equals(character(" "));                }));            })));            return firstNonDigit._greater(number(0)).ifTrue_ifFalse_(block(function () {                return this.copyFrom_to_(firstNonDigit, this.size());            }), block(function () {                return string("");            }));        },        translatedIfCorresponds: function () {            return (string("_*_").match_(this)).ifTrue_ifFalse_(block(function () {                return (this.copyFrom_to_(number(2), this.size()._minus(number(1)))).translated();            }), block(function () {                return this;            }));        },        initialIntegerOrNil: function () {            var firstNonDigit;            (this.size()._equals(number(0)).or_(block(function () {                return this.first().isDigit().not();            }))).ifTrue_(block(function () {                nonLocalReturn(nil);            }));            firstNonDigit = (this.findFirst_(block(function (m) {                return m.isDigit().not();            })));            firstNonDigit._equals(number(0)).ifTrue_(block(function () {                return firstNonDigit = this.size()._plus(number(1));            }));            return (this.copyFrom_to_(number(1), (firstNonDigit._minus(number(1))))).asNumber();        },        base64Decoded: function () {            return (Base64MimeConverter.mimeDecode_as_(this, this._class()));        },        hasContentsInExplorer: function () {            return _false;        },        skipDelimiters_startingAt_: function (delimiters, start) {            start.to_do_(this.size(), block(function (i) {                return (delimiters.includes_((this.at_(i)))).ifFalse_(block(function () {                    nonLocalReturn(i);                }));            }));            return this.size()._plus(number(1));        },        asPrecomposedUnicode: function () {            var lastIndex; var nextIndex; var composed; var out;            lastIndex = number(1);            nextIndex = number(0);            block(function () {                return (nextIndex = nextIndex._plus(number(1)))._less(this.size());            }).whileTrue_(block(function () {                composed = Unicode.compose_with_((this.at_(nextIndex)), (this.at_(nextIndex._plus(number(1)))));                return composed.ifNotNil_(block(function () {                    lastIndex._equals(number(1)).ifTrue_(block(function () {                        return out = WriteStream.on_((String.new_(this.size())));                    }));                    out.nextPutAll_((this.copyFrom_to_(lastIndex, nextIndex._minus(number(1)))));                    out.nextPut_(composed);                    nextIndex = nextIndex._plus(number(1));                    return lastIndex = nextIndex._plus(number(1));                }));            }));            return out.ifNil_ifNotNil_(block(function () {                return this;            }), block(function () {                out.nextPutAll_((this.copyFrom_to_(lastIndex, this.size())));                return out.contents();            }));        },        replaceFrom_to_with_startingAt_: function (start, stop, replacement, repStart) {            this._super.replaceFrom_to_with_startingAt_(start, stop, replacement, repStart);            return this;        },        convertToEncoding_: function (encodingName) {            return this.convertToWithConverter_((TextConverter.newForEncoding_(encodingName)));        },        setProject_withInMetacelloConfig_: function (aString, aMetacelloConfig) {            aMetacelloConfig.setProject_withString_(aString, this);            return this;        },        trimLeft_right_: function (aLeftBlock, aRightBlock) {            var left; var right;            left = number(1);            right = this.size();            block(function () {                return left._less_equals(right).and_(block(function () {                    return aLeftBlock.value_((this.at_(left)));                }));            }).whileTrue_(block(function () {                return left = left._plus(number(1));            }));            block(function () {                return left._less_equals(right).and_(block(function () {                    return aRightBlock.value_((this.at_(right)));                }));            }).whileTrue_(block(function () {                return right = right._minus(number(1));            }));            return this.copyFrom_to_(left, right);        },        lineIndicesDo_: function (aBlock) {            var cr; var lf; var start; var sz; var nextLF; var nextCR;            start = number(1);            sz = this.size();            cr = Character.cr();            nextCR = this.indexOf_startingAt_(cr, number(1));            lf = Character.lf();            nextLF = this.indexOf_startingAt_(lf, number(1));            block(function () {                return start._less_equals(sz);            }).whileTrue_(block(function () {                (nextLF._equals(number(0)).and_(block(function () {                    return nextCR._equals(number(0));                }))).ifTrue_(block(function () {                    aBlock.value_value_value_(start, sz, sz);                    nonLocalReturn(this);                }));                return (nextCR._equals(number(0)).or_(block(function () {                    return number(0)._less(nextLF).and_(block(function () {                        return nextLF._less(nextCR);                    }));                }))).ifTrue_ifFalse_(block(function () {                    aBlock.value_value_value_(start, nextLF._minus(number(1)), nextLF);                    start = number(1)._plus(nextLF);                    return nextLF = this.indexOf_startingAt_(lf, start);                }), block(function () {                    return number(1)._plus(nextCR)._equals(nextLF).ifTrue_ifFalse_(block(function () {                        aBlock.value_value_value_(start, nextCR._minus(number(1)), nextLF);                        start = number(1)._plus(nextLF);                        nextCR = this.indexOf_startingAt_(cr, start);                        return nextLF = this.indexOf_startingAt_(lf, start);                    }), block(function () {                        aBlock.value_value_value_(start, nextCR._minus(number(1)), nextCR);                        start = number(1)._plus(nextCR);                        return nextCR = this.indexOf_startingAt_(cr, start);                    }));                }));            }));            return this;        },        capitalized: function () {            var cap;            this.isEmpty().ifTrue_(block(function () {                nonLocalReturn(this.copy());            }));            cap = this.copy();            cap.at_put_(number(1), (cap.at_(number(1))).asUppercase());            return cap;        },        asByteArray: function () {            var b;            b = ByteArray.new_(this.byteSize());            number(1).to_do_(this.size()._times(number(4)), block(function (i) {                return b.at_put_(i, (this.byteAt_(i)));            }));            return b;        },        isByteString: function () {            return _false;        },        isAsciiString: function () {            var c;            c = this.detect_ifNone_(block(function (each) {                return each.asciiValue()._greater(number(127));            }), block(function () {                return nil;            }));            return c.isNil();        },        findAnySubStr_startingAt_: function (delimiters, start) {            return delimiters.inject_into_(number(1)._plus(this.size()), block(function (min, delim) {                var ind;                ind = delim.isCharacter().ifTrue_ifFalse_(block(function () {                    return this.indexOf_startingAt_ifAbsent_(delim, start, block(function () {                        return min;                    }));                }), block(function () {                    return this.indexOfSubCollection_startingAt_ifAbsent_(delim, start, block(function () {                        return min;                    }));                }));                return min.min_(ind);            }));        },        compressWithTable_: function (tokens) {            var str; var _null; var finalSize; var result; var ri; var c;            _null = Character.value_(number(0));            str = this.copyFrom_to_(number(1), this.size());            finalSize = str.size();            tokens.doWithIndex_(block(function (token, tIndex) {                var start; var ts;                start = number(1);                return block(function () {                    return (start = str.findString_startingAt_(token, start))._greater(number(0));                }).whileTrue_(block(function () {                    ts = token.size();                    ((start._plus(ts))._less_equals(str.size()).and_(block(function () {                        return (str.at_(start._plus(ts)))._equals(character(" ")).and_(block(function () {                            return tIndex._times(number(2))._less_equals(number(128));                        }));                    }))).ifTrue_ifFalse_(block(function () {                        ts = token.size()._plus(number(1));                        return str.at_put_(start, (Character.value_(tIndex._times(number(2))._plus(number(127)))));                    }), block(function () {                        return str.at_put_(start, (Character.value_(tIndex._plus(number(127)))));                    }));                    str.at_put_(start, (Character.value_(tIndex._plus(number(127)))));                    number(1).to_do_(ts._minus(number(1)), block(function (i) {                        return str.at_put_(start._plus(i), _null);                    }));                    finalSize = finalSize._minus((ts._minus(number(1))));                    return start = start._plus(ts);                }));            }));            result = String.new_(finalSize);            ri = number(0);            number(1).to_do_(str.size(), block(function (i) {                return (c = str.at_(i))._equals(_null).ifFalse_(block(function () {                    return result.at_put_((ri = ri._plus(number(1))), c);                }));            }));            return result;        },        truncate_ellipsis_: function (anInteger, aString) {            return anInteger._less(this.size()).ifTrue_ifFalse_(block(function () {                return (this.copyFrom_to_(number(1), anInteger))._comma(aString);            }), block(function () {                return this.copy();            }));        },        asDisplayText: function () {            return DisplayText.text_(this.asText());        },        correctAgainst_continuedFrom_: function (wordList, oldCollection) {            return wordList.isNil().ifTrue_ifFalse_(block(function () {                return this.correctAgainstEnumerator_continuedFrom_(nil, oldCollection);            }), block(function () {                return this.correctAgainstEnumerator_continuedFrom_(block(function (action) {                    return wordList.do_without_(action, nil);                }), oldCollection);            }));        },        string: function () {            return this;        },        setPackage_withInMetacelloConfig_: function (aString, aMetacelloConfig) {            aMetacelloConfig.setPackage_withString_(aString, this);            return this;        },        subStrings: function () {            string("Collectn");            return this.substrings();        },        asInteger: function () {            return this.asSignedInteger();        },        withFirstCharacterDownshifted: function () {            var answer;            this.ifEmpty_(block(function () {                nonLocalReturn(this.copy());            }));            answer = this.copy();            answer.at_put_(number(1), (answer.at_(number(1))).asLowercase());            return answer;        },        findTokens_escapedBy_: function (delimiters, quoteDelimiters) {            var tokens; var rs; var activeEscapeCharacter; var ts; var _char; var token; var delimiterChars; var quoteChars;            delimiterChars = (delimiters.isNil().ifTrue_ifFalse_(block(function () {                return string("");            }), block(function () {                return delimiters;            }))).asString();            quoteChars = (quoteDelimiters.isNil().ifTrue_ifFalse_(block(function () {                return string("");            }), block(function () {                return quoteDelimiters;            }))).asString();            tokens = OrderedCollection._new();            rs = ReadStream.on_(this);            activeEscapeCharacter = nil;            ts = WriteStream.on_(string(""));            block(function () {                return rs.atEnd();            }).whileFalse_(block(function () {                _char = rs.next();                return activeEscapeCharacter.isNil().ifTrue_ifFalse_(block(function () {                    return (quoteChars.includes_(_char)).ifTrue_ifFalse_(block(function () {                        return activeEscapeCharacter = _char;                    }), block(function () {                        return (delimiterChars.includes_(_char)).ifTrue_ifFalse_(block(function () {                            token = ts.contents();                            tokens.add_(token);                            return ts = WriteStream.on_(string(""));                        }), block(function () {                            return ts.nextPut_(_char);                        }));                    }));                }), block(function () {                    return _char._equals_equals(activeEscapeCharacter).ifTrue_ifFalse_(block(function () {                        return rs.peek()._equals_equals(activeEscapeCharacter).ifTrue_ifFalse_(block(function () {                            return ts.nextPut_(rs.next());                        }), block(function () {                            return activeEscapeCharacter = nil;                        }));                    }), block(function () {                        return ts.nextPut_(_char);                    }));                }));            }));            token = ts.contents();            (tokens.isEmpty().and_(block(function () {                return token.isEmpty();            }))).ifFalse_(block(function () {                return tokens.add_(token);            }));            return tokens;        },        renderOn_: function (aRenderer) {            aRenderer.text_(this);            return this;        },        printOn_: function (aStream) {            this.storeOn_(aStream);            return this;        },        askIfAddStyle_req_: function (priorMethod, requestor) {            return this;        },        asExplorerString: function () {            return this.printString();        },        leadingCharRunLengthAt_: function (index) {            var leadingChar;            leadingChar = (this.at_(index)).leadingChar();            index.to_do_(this.size(), block(function (i) {                return (this.at_(i)).leadingChar()._tilde_equals(leadingChar).ifTrue_(block(function () {                    nonLocalReturn(i._minus(index));                }));            }));            return this.size()._minus(index)._plus(number(1));        },        withInternetLineEndings: function () {            return this.withLineEndings_(String.crlf());        },        isAllSeparators: function () {            this.do_(block(function (c) {                return c.isSeparator().ifFalse_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        storeOn_: function (aStream) {            var x;            aStream.nextPut_(character("'"));            number(1).to_do_(this.size(), block(function (i) {                aStream.nextPut_((x = this.at_(i)));                return x._equals(character("'")).ifTrue_(block(function () {                    return aStream.nextPut_(x);                }));            }));            aStream.nextPut_(character("'"));            return this;        },        setTimestampInMetacelloVersion_: function (aMetacelloVersionSpec) {            aMetacelloVersionSpec.setTimestamp_(((function () {                var cascadeReceiver$ = aMetacelloVersionSpec.project().valueHolderSpec();                cascadeReceiver$.value_(this);                return cascadeReceiver$.yourself();            }).apply(this)));            return this;        },        asPostscript: function () {            var temp;            temp = this.asString().copyReplaceAll_with_(string("("), string("\\("));            temp = temp.copyReplaceAll_with_(string(")"), string("\\)"));            temp = temp.copyReplaceAll_with_(string("\r"), string(""));            return PostscriptEncoder.mapMacStringToPS_(temp);        },        asHtml: function () {            var temp;            temp = this.copyReplaceAll_with_(string("&"), string("&amp;"));            HtmlEntities.keysAndValuesDo_(block(function (entity, _char) {                return _char._equals(character("&")).ifFalse_(block(function () {                    return temp = temp.copyReplaceAll_with_(_char.asString(), string("&")._comma(entity)._comma(string(";")));                }));            }));            temp = temp.copyReplaceAll_with_(string("\t"), string("\t<IMG SRC=\"tab.gif\" ALT=\"    \">"));            temp = temp.copyReplaceAll_with_(string("\r"), string("\r<BR>"));            return temp;        },        findString_: function (subString) {            return this.findString_startingAt_(subString, number(1));        },        squeakToUtf8: function () {            return this.convertToWithConverter_(UTF8TextConverter._new());        },        withUnixLineEndings: function () {            (this.includes_(Character.cr())).ifFalse_(block(function () {                nonLocalReturn(this);            }));            (this.includes_(Character.lf())).ifFalse_(block(function () {                nonLocalReturn(this.translateWith_(String.crLfExchangeTable()));            }));            return this.withLineEndings_(String.lf());        },        copyReplaceTokens_with_: function (oldSubstring, newSubstring) {            return this.copyReplaceAll_with_asTokens_(oldSubstring, newSubstring, _true);        },        _equals: function (aString) {            aString.isString().ifFalse_(block(function () {                nonLocalReturn(_false);            }));            return (this.compare_with_collated_(this, aString, AsciiOrder))._equals(number(2));        },        beginsWithEmpty_caseSensitive_: function (prefix, aBoolean) {            var matchTable;            prefix.isEmpty().ifTrue_(block(function () {                nonLocalReturn(_true);            }));            this.size()._less(prefix.size()).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            matchTable = aBoolean.ifTrue_ifFalse_(block(function () {                return CaseSensitiveOrder;            }), block(function () {                return CaseInsensitiveOrder;            }));            return (this.findSubstring_in_startingAt_matchTable_(prefix, this, number(1), matchTable))._equals(number(1));        },        trimBoth: function () {            return this.trimBoth_(block(function (_char) {                return _char.isSeparator();            }));        },        seasideMimeDocument: function () {            return WAMimeDocument.on_mimeType_(this, WAMimeType.textPlain());        },        asVersion: function () {            return VersionNumber.fromString_(this);        },        endsWithDigit: function () {            return this.size()._greater(number(0)).and_(block(function () {                return this.last().isDigit();            }));        },        convertFromWithConverter_: function (converter) {            return (converter.ifNil_(block(function () {                nonLocalReturn(this);            }))).decodeString_(this);        },        asSqueakPathName: function () {            return this;        },        indentationIfBlank_: function (aBlock) {            var leadingTabs; var nonTab; var nonTabIndex; var nonSepIndex; var lineEndIndex;            nonTab = (CharacterSet.with_(Character.tab())).complement();            nonTabIndex = this.indexOfAnyOf_startingAt_(nonTab, number(1));            nonTabIndex._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(aBlock.value_(this.size()));            }));            leadingTabs = nonTabIndex._minus(number(1));            nonSepIndex = this.indexOfAnyOf_startingAt_(CSNonSeparators, number(1));            nonSepIndex._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(aBlock.value_(leadingTabs));            }));            lineEndIndex = this.indexOfAnyOf_startingAt_(CSLineEnders, number(1));            (lineEndIndex.between_and_(number(1), nonSepIndex)).ifTrue_(block(function () {                nonLocalReturn(aBlock.value_(leadingTabs));            }));            return leadingTabs;        },        decodeMimeHeader: function () {            var input; var output; var temp; var charset; var decoder; var encodedStream; var encoding; var pos;            input = ReadStream.on_(this);            output = WriteStream.on_(String._new());            block(function () {                output.nextPutAll_((input.upTo_(character("="))));                return input.atEnd();            }).whileFalse_(block(function () {                return (temp = input.next())._equals(character("?")).ifTrue_ifFalse_(block(function () {                    charset = input.upTo_(character("?"));                    encoding = (input.upTo_(character("?"))).asUppercase();                    temp = input.upTo_(character("?"));                    input.next();                    (charset.isNil().or_(block(function () {                        return charset.size()._equals(number(0));                    }))).ifTrue_(block(function () {                        return charset = string("LATIN-1");                    }));                    encodedStream = MultiByteBinaryOrTextStream.on_encoding_(String._new(), charset);                    decoder = encoding._equals(string("B")).ifTrue_ifFalse_(block(function () {                        return Base64MimeConverter._new();                    }), block(function () {                        return RFC2047MimeConverter._new();                    }));                    (function () {                        var cascadeReceiver$ = decoder;                        cascadeReceiver$.mimeStream_((ReadStream.on_(temp)));                        cascadeReceiver$.dataStream_(encodedStream);                        return cascadeReceiver$.mimeDecode();                    }).apply(this);                    output.nextPutAll_(encodedStream.reset().contents());                    pos = input.position();                    input.skipSeparators();                    return input.peek()._equals(character("=")).ifFalse_(block(function () {                        return input.position_(pos);                    }));                }), block(function () {                    return (function () {                        var cascadeReceiver$ = output;                        cascadeReceiver$.nextPut_(character("="));                        return cascadeReceiver$.nextPut_(temp);                    }).apply(this);                }));            }));            return output.contents();        },        _times: function (arg) {            return arg.adaptToString_andSend_(this, string("*"));        },        _less_equals: function (aString) {            return (this.compare_with_collated_(this, aString, AsciiOrder))._less_equals(number(2));        },        squeakToMac: function () {            return this.collect_(block(function (each) {                return each.squeakToMac();            }));        },        stemAndNumericSuffix: function () {            var stem; var suffix; var position;            stem = this;            suffix = number(0);            position = number(1);            block(function () {                return stem.endsWithDigit().and_(block(function () {                    return stem.size()._greater(number(1));                }));            }).whileTrue_(block(function () {                suffix = stem.last().digitValue()._times(position)._plus(suffix);                position = position._times(number(10));                return stem = stem.copyFrom_to_(number(1), stem.size()._minus(number(1)));            }));            return _Array.with_with_(stem, suffix);        },        displayOn_at_: function (aDisplayMedium, aPoint) {            this.displayOn_at_textColor_(aDisplayMedium, aPoint, Color.black());            return this;        },        seasideUrl: function () {            return WAUrl.absolute_(this);        },        zipped: function () {            var stream; var gzstream;            stream = RWBinaryOrTextStream.on_(String._new());            gzstream = GZipWriteStream.on_(stream);            gzstream.nextPutAll_(this);            gzstream.close();            stream.reset();            return stream.contents();        },        withoutLeadingBlanks: function () {            var first;            first = this.findFirst_(block(function (c) {                return c.isSeparator().not();            }));            first._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(string(""));            }));            return this.copyFrom_to_(first, this.size());        },        asHttpResponseTo_: function (request) {            return HttpResponse.fromString_(this);        },        byteEncode_: function (aStream) {            return aStream.writeString_(this);        },        startingAt_match_startingAt_: function (keyStart, text, textStart) {            var anyMatch; var matchStart; var matchEnd; var i; var matchStr; var j; var ii; var jj;            i = keyStart;            j = textStart;            block(function () {                i._greater(this.size()).ifTrue_(block(function () {                    nonLocalReturn(j._greater(text.size()));                }));                return (this.at_(i))._equals(character("#"));            }).whileTrue_(block(function () {                j._greater(text.size()).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                i = i._plus(number(1));                return j = j._plus(number(1));            }));            (this.at_(i))._equals(character("*")).ifTrue_ifFalse_(block(function () {                i._equals(this.size()).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));                anyMatch = _true;                return matchStart = i._plus(number(1));            }), block(function () {                anyMatch = _false;                return matchStart = i;            }));            matchEnd = this.size();            (ii = this.indexOf_startingAt_(character("*"), matchStart))._greater(number(0)).ifTrue_(block(function () {                ii._equals(matchStart).ifTrue_(block(function () {                    return this.error_(string("** not valid -- use * instead"));                }));                return matchEnd = ii._minus(number(1));            }));            (ii = this.indexOf_startingAt_(character("#"), matchStart))._greater(number(0)).ifTrue_(block(function () {                ii._equals(matchStart).ifTrue_(block(function () {                    return this.error_(string("*# not valid -- use #* instead"));                }));                return matchEnd = matchEnd.min_(ii._minus(number(1)));            }));            matchStr = this.copyFrom_to_(matchStart, matchEnd);            block(function () {                jj = text.findString_startingAt_caseSensitive_(matchStr, j, _false);                return anyMatch.ifTrue_ifFalse_(block(function () {                    return jj._greater(number(0));                }), block(function () {                    return jj._equals(j);                }));            }).whileTrue_(block(function () {                (this.startingAt_match_startingAt_(matchEnd._plus(number(1)), text, jj._plus(matchStr.size()))).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));                anyMatch.ifFalse_(block(function () {                    nonLocalReturn(_false);                }));                return j = j._plus(number(1));            }));            return _false;        },        findLastOccurrenceOfString_startingAt_: function (subString, start) {            var last; var now;            last = this.findString_startingAt_(subString, start);            last._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(number(0));            }));            block(function () {                return last._greater(number(0));            }).whileTrue_(block(function () {                now = last;                return last = this.findString_startingAt_(subString, last._plus(number(1)));            }));            return now;        },        isString: function () {            return _true;        },        skipAnySubStr_startingAt_: function (delimiters, start) {            var any; var _this; var ind; var ii;            ii = start._minus(number(1));            block(function () {                return (ii = ii._plus(number(1)))._less_equals(this.size());            }).whileTrue_(block(function () {                any = _false;                delimiters.do_(block(function (delim) {                    return delim.isCharacter().ifTrue_ifFalse_(block(function () {                        return (this.at_(ii))._equals_equals(delim).ifTrue_(block(function () {                            return any = _true;                        }));                    }), block(function () {                        return delim.size()._greater((this.size()._minus(ii)._plus(number(1)))).ifFalse_ifTrue_(block(function () {                            ind = number(0);                            _this = _true;                            delim.do_(block(function (dd) {                                dd._equals_equals((this.at_(ii._plus(ind)))).ifFalse_(block(function () {                                    return _this = _false;                                }));                                return ind = ind._plus(number(1));                            }));                            return _this.ifTrue_(block(function () {                                ii = ii._plus(delim.size())._minus(number(1));                                return any = _true;                            }));                        }), block(function () {                            return any = _false;                        }));                    }));                }));                return any.ifFalse_(block(function () {                    nonLocalReturn(ii);                }));            }));            return this.size()._plus(number(1));        },        findCloseParenthesisFor_: function (startIndex) {            var pos; var nestLevel;            pos = startIndex._plus(number(1));            nestLevel = number(1);            block(function () {                return pos._less_equals(this.size());            }).whileTrue_(block(function () {                (this.at_(pos))._equals(character("(")).ifTrue_(block(function () {                    return nestLevel = nestLevel._plus(number(1));                }));                (this.at_(pos))._equals(character(")")).ifTrue_(block(function () {                    return nestLevel = nestLevel._minus(number(1));                }));                nestLevel._equals(number(0)).ifTrue_(block(function () {                    nonLocalReturn(pos);                }));                return pos = pos._plus(number(1));            }));            return this.size()._plus(number(1));        },        isOctetString: function () {            number(1).to_do_(this.size(), block(function (pos) {                return (this.at_(pos)).asInteger()._greater_equals(number(256)).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        compare_with_collated_: function (string1, string2, order) {            (string1.isByteString().and_(block(function () {                return string2.isByteString();            }))).ifTrue_(block(function () {                nonLocalReturn(ByteString.compare_with_collated_(string1, string2, order));            }));            return String.compare_with_collated_(string1, string2, order);        },        correctAgainstDictionary_continuedFrom_: function (wordDict, oldCollection) {            return wordDict.isNil().ifTrue_ifFalse_(block(function () {                return this.correctAgainstEnumerator_continuedFrom_(nil, oldCollection);            }), block(function () {                return this.correctAgainstEnumerator_continuedFrom_(block(function (action) {                    return wordDict.keysDo_(action);                }), oldCollection);            }));        },        asString: function () {            return this;        },        byteAt_: function (index) {            return this.subclassResponsibility();        },        trimRight: function () {            return this.trimRight_(block(function (_char) {                return _char.isSeparator();            }));        },        uversionEqual_: function (anObject) {            return anObject.isString().and_(block(function () {                return this._equals(anObject);            }));        },        displayAt_: function (aPoint) {            this.displayOn_at_(Display, aPoint);            return this;        },        getInteger32_: function (location) {            primitiveDeclaration();            var integer;            integer = ((this.at_(location)).asInteger().bitShift_(number(24)))._plus(((this.at_(location._plus(number(1)))).asInteger().bitShift_(number(16))))._plus(((this.at_(location._plus(number(2)))).asInteger().bitShift_(number(8))))._plus((this.at_(location._plus(number(3)))).asInteger());            integer._greater(number(1073741824)).ifTrue_(block(function () {                nonLocalReturn(number(1073741824)._minus(integer));            }));            return integer;        },        includesSubString_: function (subString) {            return (this.findString_startingAt_(subString, number(1)))._greater(number(0));        },        asAlphaNumeric_extraChars_mergeUID_: function (totalSize, additionallyAllowed, minimalSizeOfRandomPart) {            var stream; var out; var sizeOfFirstPart; var index; var ascii; var ch; var skip; var array; var random;            totalSize._greater(minimalSizeOfRandomPart).ifFalse_(block(function () {                return this.errorOutOfBounds();            }));            stream = ReadStream.on_(this);            out = WriteStream.on_((String.new_(totalSize)));            index = number(0);            skip = _true;            sizeOfFirstPart = totalSize._minus(minimalSizeOfRandomPart)._minus(number(1));            block(function () {                return stream.atEnd().or_(block(function () {                    return index._greater_equals(sizeOfFirstPart);                }));            }).whileFalse_(block(function () {                return (((ascii = (ch = stream.next()).asciiValue())._greater_equals(number(65)).and_(block(function () {                    return ascii._less_equals(number(90));                }))).or_(block(function () {                    return (ascii._greater_equals(number(97)).and_(block(function () {                        return ascii._less_equals(number(122));                    }))).or_(block(function () {                        return ch.isDigit().or_(block(function () {                            return additionallyAllowed.notNil().and_(block(function () {                                return additionallyAllowed.includes_(ch);                            }));                        }));                    }));                }))).ifTrue_ifFalse_(block(function () {                    skip.ifTrue_ifFalse_(block(function () {                        return out.nextPut_(ch.asUppercase());                    }), block(function () {                        return out.nextPut_(ch);                    }));                    index = index._plus(number(1));                    return skip = _false;                }), block(function () {                    return skip = _true;                }));            }));            out.nextPut_(character("_"));            array = _Array.new_(number(62));            number(1).to_do_(number(26), block(function (i) {                array.at_put_(i, (i._plus(number(64))).asCharacter());                return array.at_put_(i._plus(number(26)), (i._plus(number(96))).asCharacter());            }));            number(53).to_do_(number(62), block(function (i) {                return array.at_put_(i, (i._minus(number(5))).asCharacter());            }));            random = UUIDGenerator._default().randomGenerator();            totalSize._minus(index)._minus(number(1)).timesRepeat_(block(function () {                return out.nextPut_((array.atRandom_(random)));            }));            return out.contents();        },        asSymbol: function () {            return Symbol.intern_(this);        },        service: function () {            return this.serviceOrNil().ifNil_(block(function () {                return ServiceCategory._new().id_(this.asSymbol());            }));        },        translated: function () {            return NaturalLanguageTranslator.current().translate_(this);        },        indexOfFirstUppercaseCharacter: function () {            var position; var found; var input;            position = number(0);            found = _false;            input = ReadStream.on_(this);            block(function () {                return input.atEnd()._pipe(found);            }).whileFalse_(block(function () {                input.next().isUppercase().ifTrue_(block(function () {                    return found = _true;                }));                return position = position._plus(number(1));            }));            found.ifTrue_ifFalse_(block(function () {                nonLocalReturn(position);            }), block(function () {                nonLocalReturn(number(0));            }));            return this;        },        asSignedInteger: function () {            var start;            start = this.findFirst_(block(function (_char) {                return _char.isDigit();            }));            start.isZero().ifTrue_(block(function () {                nonLocalReturn(nil);            }));            (start._greater(number(1)).and_(block(function () {                return this.at_(start._minus(number(1)));            })))._equals(character("-")).ifTrue_(block(function () {                return start = start._minus(number(1));            }));            return Integer.readFrom_((ReadStream.on_from_to_(this, start, this.size())));        },        convertToWithConverter_: function (converter) {            return (converter.ifNil_(block(function () {                nonLocalReturn(this);            }))).encodeString_(this);        },        withSqueakLineEndings: function () {            (this.includes_(Character.lf())).ifFalse_(block(function () {                nonLocalReturn(this);            }));            (this.includes_(Character.cr())).ifFalse_(block(function () {                nonLocalReturn(this.translateWith_(String.crLfExchangeTable()));            }));            return this.withLineEndings_(String.cr());        },        formatASN1: function () {            return this.formatASN1TabLevel_(number(0));        },        indexOf_: function (aCharacter) {            aCharacter.isCharacter().ifFalse_(block(function () {                nonLocalReturn(number(0));            }));            return this._class().indexOfAscii_inString_startingAt_(aCharacter.asciiValue(), this, number(1));        },        setTimestampInMetacelloConfig_: function (aMetacelloConfig) {            aMetacelloConfig.setTimestampWithString_(this);            return this;        },        excerpt_radius_ellipsis_: function (aString, anInteger, anEllipsisString) {            var index; var start; var stop;            (index = this.indexOfSubCollection_(aString))._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(nil);            }));            start = index._minus(anInteger).max_(number(1));            stop = index._plus(anInteger)._plus(aString.size())._minus(number(1)).min_(this.size());            return (start._greater(number(1)).ifTrue_ifFalse_(block(function () {                return anEllipsisString;            }), block(function () {                return string("");            })))._comma((this.copyFrom_to_(start, stop)))._comma((stop._less(this.size()).ifTrue_ifFalse_(block(function () {                return anEllipsisString;            }), block(function () {                return string("");            }))));        },        displayOn_: function (aDisplayMedium) {            this.displayOn_at_(aDisplayMedium, number(0)._at(number(0)));            return this;        },        howManyMatch_: function (string) {            var count; var shorterLength;            count = number(0);            shorterLength = ((this.size()).min_((string.size())));            (number(1).to_do_(shorterLength, block(function (index) {                return (((this.at_(index))._equals((string.at_(index)))).ifTrue_(block(function () {                    return count = (count._plus(number(1)));                })));            })));            return count;        },        isoToSqueak: function () {            return this;        },        openAsMorph: function () {            return this.asMorph().openInHand();        },        asSound: function () {            return SampledSound.soundNamed_ifAbsent_(this, block(function () {                return Beeper._default();            }));        },        substrings: function () {            var result; var end; var beginning;            result = WriteStream.on_((_Array.new_(number(10))));            end = number(0);            block(function () {                beginning = end._plus(number(1));                block(function () {                    return beginning._less_equals(this.size()).and_(block(function () {                        return (this.at_(beginning)).isSeparator();                    }));                }).whileTrue_(block(function () {                    return beginning = beginning._plus(number(1));                }));                return beginning._less_equals(this.size());            }).whileTrue_(block(function () {                end = beginning;                block(function () {                    return end._less_equals(this.size()).and_(block(function () {                        return (this.at_(end)).isSeparator().not();                    }));                }).whileTrue_(block(function () {                    return end = end._plus(number(1));                }));                end = end._minus(number(1));                return result.nextPut_((this.copyFrom_to_(beginning, end)));            }));            return result.contents();        },        withoutTrailingBlanks: function () {            var last;            last = this.findLast_(block(function (c) {                return c.isSeparator().not();            }));            last._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(string(""));            }));            return this.copyFrom_to_(number(1), last);        },        indexOfSubCollection_startingAt_ifAbsent_: function (sub, start, exceptionBlock) {            var index;            index = this.findString_startingAt_(sub, start);            index._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(exceptionBlock.value());            }));            return index;        },        asStringOrText: function () {            return this;        },        numericSuffix: function () {            return this.stemAndNumericSuffix().last();        },        translateWith_: function (table) {            return this.translateFrom_to_table_(number(1), this.size(), table);        },        seasideMimeDocumentType_: function (aMimeType) {            return (function () {                var cascadeReceiver$ = this.seasideMimeDocument();                cascadeReceiver$.mimeType_(aMimeType);                return cascadeReceiver$.yourself();            }).apply(this);        },        findString_startingAt_caseSensitive_: function (key, start, caseSensitive) {            return caseSensitive.ifTrue_ifFalse_(block(function () {                return (this._class().isBytes().and_(block(function () {                    return key._class().isBytes();                }))).ifTrue_ifFalse_(block(function () {                    return this.findSubstring_in_startingAt_matchTable_(key, this, start, CaseSensitiveOrder);                }), block(function () {                    return WideString._new().findSubstring_in_startingAt_matchTable_(key, this, start, nil);                }));            }), block(function () {                return (this._class().isBytes().and_(block(function () {                    return key._class().isBytes();                }))).ifTrue_ifFalse_(block(function () {                    return this.findSubstring_in_startingAt_matchTable_(key, this, start, CaseInsensitiveOrder);                }), block(function () {                    return WideString._new().findSubstring_in_startingAt_matchTable_(key, this, start, CaseInsensitiveOrder);                }));            }));        },        trimBoth_: function (aBlock) {            return this.trimLeft_right_(aBlock, aBlock);        },        truncateTo_: function (smallSize) {            return this.size()._less_equals(smallSize).ifTrue_ifFalse_(block(function () {                return this;            }), block(function () {                return this.copyFrom_to_(number(1), smallSize);            }));        },        asLowercase: function () {            return this.copy().asString().translateToLowercase();        },        asNumber: function () {            return _Number.readFromString_(this);        },        asTime: function () {            return Time.fromString_(this);        },        hash: function () {            return this._class().stringHash_initialHash_(this, ByteString.identityHash());        },        asVmPathName: function () {            return (FilePath.pathName_(this)).asVmPathName();        },        asIpByteArray: function () {            var ip; var tmp;            ip = this.findTokens_(string("."));            (ip.size()._equals(number(4))).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("Invalid IP Address")));            }));            ip.detect_ifNone_(block(function (ea) {                return ea.isPositiveInteger().and_(block(function () {                    return (ea.asNumber()._less_equals(number(255))).and_(block(function () {                        return ea.asNumber()._greater_equals(number(0));                    }));                }));            }), block(function () {                nonLocalReturn(this.error_(string("Invalid IP Address")));            }));            tmp = ByteArray.new_(number(4));            number(1).to_do_(number(4), block(function (_in) {                return tmp.at_put_(_in, (ip.at_(_in)).asNumber());            }));            return tmp;        },        asFourCode: function () {            var result;            this.size()._equals(number(4)).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("must be exactly four characters")));            }));            result = this.inject_into_(number(0), block(function (val, each) {                return number(256)._times(val)._plus(each.asciiValue());            }));            (result.bitAnd_(number(2147483648)))._equals(number(0)).ifFalse_(block(function () {                return this.error_(string("cannot resolve fourcode"));            }));            (result.bitAnd_(number(1073741824)))._equals(number(0)).ifFalse_(block(function () {                nonLocalReturn(result._minus(number(2147483648)));            }));            return result;        },        byteAt_put_: function (index, value) {            return this.subclassResponsibility();        },        convertFromSuperSwikiServerString: function () {            return this.convertFromEncoding_(string("shift_jis"));        },        displayProgressAt_from_to_during_: function (aPoint, minVal, maxVal, workBlock) {            return ProgressInitiationException.display_at_from_to_during_(this, aPoint, minVal, maxVal, workBlock);        },        withNoLineLongerThan_: function (aNumber) {            aNumber.isNumber().not()._pipe((aNumber._less(number(1)))).ifTrue_(block(function () {                return this.error_(string("too narrow"));            }));            return this._class().new_streamContents_(this.size()._times((aNumber._plus(number(1))))._slash_slash(aNumber), block(function (stream) {                return this.lineIndicesDo_(block(function (start, endWithoutDelimiters, end) {                    var lineStart;                    lineStart = (this.indexOfAnyOf_startingAt_ifAbsent_(CSNonSeparators, start, block(function () {                        return endWithoutDelimiters._plus(number(1));                    }))).min_(endWithoutDelimiters);                    block(function () {                        var lineStop; var lineEnd; var spacePosition;                        lineEnd = number(0);                        spacePosition = lineStart;                        lineStop = (lineStart._plus(aNumber)._minus(number(1))).min_(endWithoutDelimiters);                        block(function () {                            return spacePosition._less_equals(lineStop);                        }).whileTrue_(block(function () {                            spacePosition = this.indexOfAnyOf_startingAt_ifAbsent_(CSSeparators, spacePosition._plus(number(1)), block(function () {                                return endWithoutDelimiters._plus(number(1));                            }));                            return spacePosition._less_equals((lineStop._plus(number(1)))).ifTrue_(block(function () {                                return lineEnd = spacePosition;                            }));                        }));                        lineEnd._equals(number(0)).ifTrue_ifFalse_(block(function () {                            lineEnd = lineStart._plus(aNumber)._minus(number(1)).min_(endWithoutDelimiters);                            stream.nextPutAll_((this.copyFrom_to_(lineStart, lineEnd)));                            return lineStart = lineEnd._plus(number(1));                        }), block(function () {                            stream.nextPutAll_((this.copyFrom_to_(lineStart, lineEnd._minus(number(1)))));                            return lineStart = this.indexOfAnyOf_startingAt_ifAbsent_(CSNonSeparators, lineEnd._plus(number(1)), block(function () {                                return endWithoutDelimiters._plus(number(1));                            }));                        }));                        return lineStart._less_equals(endWithoutDelimiters);                    }).whileTrue_(block(function () {                        return stream.cr();                    }));                    return stream.nextPutAll_((this.copyFrom_to_(endWithoutDelimiters._plus(number(1)), end)));                }));            }));        },        encodeForHTTPWithTextEncoding_: function (encodingName) {            return this.encodeForHTTPWithTextEncoding_conditionBlock_(encodingName, block(function (c) {                return c.isSafeForHTTP();            }));        },        withoutTrailingDigits: function () {            var firstDigit;            firstDigit = (this.findFirst_(block(function (m) {                return m.isDigit().or_(block(function () {                    return m._equals(character(" "));                }));            })));            return firstDigit._greater(number(0)).ifTrue_ifFalse_(block(function () {                return this.copyFrom_to_(number(1), firstDigit._minus(number(1)));            }), block(function () {                return this;            }));        },        stringhash: function () {            return this.hash();        },        keywords: function () {            var keywords;            keywords = _Array.streamContents_(block(function (kwds) {                var kwd;                kwd = WriteStream.on_((String.new_(number(16))));                number(1).to_do_(this.size(), block(function (i) {                    var _char;                    kwd.nextPut_((_char = this.at_(i)));                    return _char._equals(character(":")).ifTrue_(block(function () {                        kwds.nextPut_(kwd.contents());                        return kwd.reset();                    }));                }));                return (kwd.position()._equals(number(0))).ifFalse_(block(function () {                    return kwds.nextPut_(kwd.contents());                }));            }));            (keywords.size()._greater_equals(number(1)).and_(block(function () {                return (keywords.at_(number(1)))._equals(string(":"));            }))).ifTrue_(block(function () {                return keywords = keywords.allButFirst();            }));            (keywords.size()._greater_equals(number(2)).and_(block(function () {                return (keywords.at_(keywords.size()._minus(number(1))))._equals(string(":"));            }))).ifTrue_(block(function () {                return keywords = keywords.copyReplaceFrom_to_with_(keywords.size()._minus(number(1)), keywords.size(), array([string(":")._comma(keywords.last())]));            }));            return keywords;        },        subStrings_: function (separators) {            var _char; var result; var sourceStream; var subString;            string("Collectn");            (separators.isString().or_(block(function () {                return separators.allSatisfy_(block(function (element) {                    return element.isKindOf_(Character);                }));            }))).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("separators must be Characters.")));            }));            sourceStream = ReadStream.on_(this);            result = OrderedCollection._new();            subString = String._new();            block(function () {                return sourceStream.atEnd();            }).whileFalse_(block(function () {                _char = sourceStream.next();                return (separators.includes_(_char)).ifTrue_ifFalse_(block(function () {                    return subString.notEmpty().ifTrue_(block(function () {                        result.add_(subString.copy());                        return subString = String._new();                    }));                }), block(function () {                    return subString = subString._comma((String.with_(_char)));                }));            }));            subString.notEmpty().ifTrue_(block(function () {                return result.add_(subString.copy());            }));            return result.asArray();        },        asUVersion: function () {            return UVersion.readFromString_(this);        },        displayOn_at_textColor_: function (aDisplayMedium, aPoint, aColor) {            (this.asDisplayText().foregroundColor_backgroundColor_((aColor.ifNil_(block(function () {                return Color.black();            }))), Color.white())).displayOn_at_(aDisplayMedium, aPoint);            return this;        },        sameAs_: function (aString) {            return (this.compare_caseSensitive_(aString, _false))._equals(number(2));        },        setAuthorInMetacelloConfig_: function (aMetacelloConfig) {            aMetacelloConfig.setAuthorWithString_(this);            return this;        },        applyLanguageInfomation_: function (languageEnvironment) {            var leadingChar;            leadingChar = languageEnvironment.leadingChar();            this.withIndexDo_(block(function (each, idx) {                return each.asciiValue()._greater(number(255)).ifTrue_(block(function () {                    return this.at_put_(idx, (Character.leadingChar_code_(leadingChar, each.asUnicode())));                }));            }));            return this;        },        includesUnifiedCharacter: function () {            return _false;        }    }});Class("ByteString", {    superclass: String,    classMethods: {        stringHash_initialHash_: function (aString, speciesHash) {            primitiveDeclaration();            primitiveDeclaration();            primitiveDeclaration();            var stringSize; var hash; var low;            stringSize = aString.size();            hash = speciesHash.bitAnd_(number(268435455));            number(1).to_do_(stringSize, block(function (pos) {                hash = hash._plus((aString.at_(pos)).asciiValue());                low = hash.bitAnd_(number(16383));                return hash = (number(9741)._times(low)._plus(((number(9741)._times((hash.bitShift_(number(-14))))._plus((number(101)._times(low))).bitAnd_(number(16383)))._times(number(16384))))).bitAnd_(number(268435455));            }));            return hash;        },        findFirstInString_inSet_startingAt_: function (aString, inclusionMap, start) {            primitiveDeclaration();            primitiveDeclaration();            primitiveDeclaration();            var i; var stringSize;            inclusionMap.size()._tilde_equals(number(256)).ifTrue_(block(function () {                nonLocalReturn(number(0));            }));            i = start;            stringSize = aString.size();            block(function () {                return i._less_equals(stringSize).and_(block(function () {                    return (inclusionMap.at_((aString.at_(i)).asciiValue()._plus(number(1))))._equals(number(0));                }));            }).whileTrue_(block(function () {                return i = i._plus(number(1));            }));            i._greater(stringSize).ifTrue_(block(function () {                nonLocalReturn(number(0));            }));            return i;        },        translate_from_to_table_: function (aString, start, stop, table) {            primitiveDeclaration();            primitiveDeclaration();            primitiveDeclaration();            start.to_do_(stop, block(function (i) {                return aString.at_put_(i, (table.at_((aString.at_(i)).asciiValue()._plus(number(1)))));            }));            return this;        },        compare_with_collated_: function (string1, string2, order) {            primitiveDeclaration();            primitiveDeclaration();            primitiveDeclaration();            primitiveDeclaration();            var len1; var len2; var c1; var c2;            len1 = string1.size();            len2 = string2.size();            number(1).to_do_((len1.min_(len2)), block(function (i) {                c1 = order.at_((string1.basicAt_(i))._plus(number(1)));                c2 = order.at_((string2.basicAt_(i))._plus(number(1)));                return c1._equals(c2).ifFalse_(block(function () {                    return c1._less(c2).ifTrue_ifFalse_(block(function () {                        nonLocalReturn(number(1));                    }), block(function () {                        nonLocalReturn(number(3));                    }));                }));            }));            len1._equals(len2).ifTrue_(block(function () {                nonLocalReturn(number(2));            }));            len1._less(len2).ifTrue_ifFalse_(block(function () {                nonLocalReturn(number(1));            }), block(function () {                nonLocalReturn(number(3));            }));            return this;        },        indexOfAscii_inString_startingAt_: function (anInteger, aString, start) {            primitiveDeclaration();            primitiveDeclaration();            primitiveDeclaration();            var stringSize;            stringSize = aString.size();            start.to_do_(stringSize, block(function (pos) {                return (aString.at_(pos)).asciiValue()._equals(anInteger).ifTrue_(block(function () {                    nonLocalReturn(pos);                }));            }));            return number(0);        }    },    instanceMethods: {        findSubstring_in_startingAt_matchTable_: function (key, body, start, matchTable) {            primitiveDeclaration();            primitiveDeclaration();            primitiveDeclaration();            primitiveDeclaration();            var index;            key.size()._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(number(0));            }));            start.to_do_(body.size()._minus(key.size())._plus(number(1)), block(function (startIndex) {                index = number(1);                return block(function () {                    return (matchTable.at_((body.at_(startIndex._plus(index)._minus(number(1)))).asciiValue()._plus(number(1))))._equals((matchTable.at_((key.at_(index)).asciiValue()._plus(number(1)))));                }).whileTrue_(block(function () {                    index._equals(key.size()).ifTrue_(block(function () {                        nonLocalReturn(startIndex);                    }));                    return index = index._plus(number(1));                }));            }));            return number(0);        },        isByteString: function () {            return _true;        },        beginsWith_: function (prefix) {            prefix._class().isBytes().ifFalse_(block(function () {                nonLocalReturn(this._super.beginsWith_(prefix));            }));            this.size()._less(prefix.size()).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            return (this.findSubstring_in_startingAt_matchTable_(prefix, this, number(1), CaseSensitiveOrder))._equals(number(1));        },        byteAt_: function (index) {            primitiveDeclaration();            return (this.at_(index)).asciiValue();        },        utf8ToSqueak: function () {            return UTF8TextConverter.decodeByteString_(this);        },        destroy: function () {            number(1).to_do_(this.size(), block(function (i) {                return this.at_put_(i, character(" "));            }));            return this;        },        unsignedLongAt_bigEndian_: function (index, aBool) {            var b0; var b1; var b2; var w;            aBool.ifTrue_ifFalse_(block(function () {                b0 = this.byteAt_(index);                b1 = this.byteAt_(index._plus(number(1)));                b2 = this.byteAt_(index._plus(number(2)));                return w = this.byteAt_(index._plus(number(3)));            }), block(function () {                w = this.byteAt_(index);                b2 = this.byteAt_(index._plus(number(1)));                b1 = this.byteAt_(index._plus(number(2)));                return b0 = this.byteAt_(index._plus(number(3)));            }));            b2._equals(number(0)).ifFalse_(block(function () {                return w = (b2.bitShift_(number(8)))._plus(w);            }));            b1._equals(number(0)).ifFalse_(block(function () {                return w = (b1.bitShift_(number(16)))._plus(w);            }));            b0._equals(number(0)).ifFalse_(block(function () {                return w = (b0.bitShift_(number(24)))._plus(w);            }));            return w;        },        byteSize: function () {            return this.size();        },        convertFromSystemString: function () {            var readStream; var writeStream; var converter;            readStream = this.readStream();            writeStream = String._new().writeStream();            converter = LanguageEnvironment.defaultSystemConverter();            converter.ifNil_(block(function () {                nonLocalReturn(this);            }));            block(function () {                return readStream.atEnd();            }).whileFalse_(block(function () {                return writeStream.nextPut_((converter.nextFromStream_(readStream)));            }));            return writeStream.contents();        },        byteAt_put_: function (index, value) {            primitiveDeclaration();            this.at_put_(index, value.asCharacter());            return value;        },        substrings: function () {            var result; var end; var beginning;            result = WriteStream.on_((_Array.new_(number(10))));            end = number(0);            block(function () {                beginning = this.indexOfAnyOf_startingAt_ifAbsent_(CSNonSeparators, end._plus(number(1)), block(function () {                    return nil;                }));                return beginning._tilde_tilde(nil);            }).whileTrue_(block(function () {                end = this.indexOfAnyOf_startingAt_ifAbsent_(CSSeparators, beginning, block(function () {                    return this.size()._plus(number(1));                }));                end = end._minus(number(1));                return result.nextPut_((this.copyFrom_to_(beginning, end)));            }));            return result.contents();        },        squeakToUtf8: function () {            return UTF8TextConverter.encodeByteString_(this);        },        convertFromCompoundText: function () {            var readStream; var writeStream; var converter;            readStream = this.readStream();            writeStream = String._new().writeStream();            converter = CompoundTextConverter._new();            converter.ifNil_(block(function () {                nonLocalReturn(this);            }));            block(function () {                return readStream.atEnd();            }).whileFalse_(block(function () {                return writeStream.nextPut_((converter.nextFromStream_(readStream)));            }));            return writeStream.contents();        },        at_put_: function (index, aCharacter) {            primitiveDeclaration();            aCharacter.isCharacter().ifFalse_(block(function () {                nonLocalReturn(this.errorImproperStore());            }));            aCharacter.isOctetCharacter().ifFalse_(block(function () {                this.becomeForward_((WideString.from_(this)));                nonLocalReturn(this.at_put_(index, aCharacter));            }));            index.isInteger().ifTrue_ifFalse_(block(function () {                return this.errorSubscriptBounds_(index);            }), block(function () {                return this.errorNonIntegerIndex();            }));            return this;        },        at_: function (index) {            primitiveDeclaration();            return Character.value_((this._super.at_(index)));        },        indexOfAnyOf_startingAt_ifAbsent_: function (aCollection, start, aBlock) {            var index;            return (index = aCollection.findFirstInByteString_startingAt_(this, start))._equals(number(0)).ifTrue_ifFalse_(block(function () {                return aBlock.value();            }), block(function () {                return index;            }));        },        unsignedLongAt_put_bigEndian_: function (index, value, aBool) {            var b0; var b1; var b2; var b3;            b0 = value.bitShift_(number(-24));            b1 = (value.bitShift_(number(-16))).bitAnd_(number(255));            b2 = (value.bitShift_(number(-8))).bitAnd_(number(255));            b3 = value.bitAnd_(number(255));            aBool.ifTrue_ifFalse_(block(function () {                this.byteAt_put_(index, b0);                this.byteAt_put_(index._plus(number(1)), b1);                this.byteAt_put_(index._plus(number(2)), b2);                return this.byteAt_put_(index._plus(number(3)), b3);            }), block(function () {                this.byteAt_put_(index, b3);                this.byteAt_put_(index._plus(number(1)), b2);                this.byteAt_put_(index._plus(number(2)), b1);                return this.byteAt_put_(index._plus(number(3)), b0);            }));            return value;        },        isOctetString: function () {            return _true;        },        asOctetString: function () {            return this;        },        replaceFrom_to_with_startingAt_: function (start, stop, replacement, repStart) {            replacement._class()._equals_equals(WideString).ifTrue_(block(function () {                return this.becomeForward_((WideString.from_(this)));            }));            this._super.replaceFrom_to_with_startingAt_(start, stop, replacement, repStart);            return this;        },        indexOfAnyOf_startingAt_: function (aCollection, start) {            return aCollection.findFirstInByteString_startingAt_(this, start);        },        applyLanguageInfomation_: function (languageEnvironment) {            return this;        },        asByteArray: function () {            var ba; var sz;            sz = this.byteSize();            ba = ByteArray.new_(sz);            ba.replaceFrom_to_with_startingAt_(number(1), sz, this, number(1));            return ba;        }    }});Class("OrderedCollection", {    superclass: SequenceableCollection,    instanceVariables: [ "$array", "$firstIndex", "$lastIndex" ],    classMethods: {        new_: function (anInteger) {            return this.basicNew().setCollection_((this.arrayType().new_(anInteger)));        },        arrayType: function () {            return _Array;        },        _new: function () {            return this.new_(number(10));        },        newFrom_: function (aCollection) {            return (function () {                var cascadeReceiver$ = (this.new_(aCollection.size()));                cascadeReceiver$.resetTo_(number(1));                cascadeReceiver$.addAll_(aCollection);                return cascadeReceiver$.yourself();            }).apply(this);        },        new_withAll_: function (anInteger, anObject) {            return this.basicNew().setContents_((this.arrayType().new_withAll_(anInteger, anObject)));        },        ofSize_: function (n) {            var collection;            collection = this.new_(n);            collection.setContents_((collection.collector()));            return collection;        }    },    instanceMethods: {        copyFrom_to_: function (startIndex, endIndex) {            return this.shallowCopy().postCopyFrom_to_(startIndex, endIndex);        },        with_collect_: function (otherCollection, twoArgBlock) {            var result;            otherCollection.size()._equals(this.size()).ifFalse_(block(function () {                return this.error_(string("otherCollection must be the same size"));            }));            result = this.species().new_(this.size());            number(1).to_do_(this.size(), block(function (index) {                return result.addLast_((twoArgBlock.value_value_((this.at_(index)), (otherCollection.at_(index)))));            }));            return result;        },        snapshotCopy: function () {            return this.copy();        },        addAll_: function (aCollection) {            return this.addAllLast_(aCollection);        },        addAllFirstUnlessAlreadyPresent_: function (anOrderedCollection) {            anOrderedCollection.reverseDo_(block(function (each) {                return (this.includes_(each)).ifFalse_(block(function () {                    return this.addFirst_(each);                }));            }));            return anOrderedCollection;        },        find_: function (oldObject) {            var index;            index = this.$firstIndex;            block(function () {                return index._less_equals(this.$lastIndex);            }).whileTrue_(block(function () {                (this.$array.at_(index))._equals(oldObject).ifTrue_(block(function () {                    nonLocalReturn(index);                }));                return index = index._plus(number(1));            }));            this.errorNotFound_(oldObject);            return this;        },        add_beforeIndex_: function (newObject, index) {            (index.between_and_(number(1), this.size()._plus(number(1)))).ifFalse_(block(function () {                nonLocalReturn(this.errorSubscriptBounds_(index));            }));            this.insert_before_(newObject, this.$firstIndex._plus(index)._minus(number(1)));            return newObject;        },        addLast_: function (newObject) {            this.$lastIndex._equals(this.$array.size()).ifTrue_(block(function () {                return this.makeRoomAtLast();            }));            this.$lastIndex = this.$lastIndex._plus(number(1));            this.$array.at_put_(this.$lastIndex, newObject);            return newObject;        },        removeAt_: function (index) {            var removed;            removed = this.at_(index);            this.removeIndex_(index._plus(this.$firstIndex)._minus(number(1)));            return removed;        },        postCopyFrom_to_: function (startIndex, endIndex) {            endIndex._less(startIndex).ifFalse_(block(function () {                (startIndex.between_and_(number(1), this.size())).ifFalse_(block(function () {                    nonLocalReturn(this.error_(string("startIndex is out of bounds")));                }));                return (endIndex.between_and_(number(1), this.size())).ifFalse_(block(function () {                    nonLocalReturn(this.error_(string("endIndex is out of bounds")));                }));            }));            this.$array = this.$array.copyFrom_to_(startIndex._plus(this.$firstIndex)._minus(number(1)), (endIndex.max_(startIndex._minus(number(1))))._plus(this.$firstIndex)._minus(number(1)));            this.$firstIndex = number(1);            this.$lastIndex = this.$array.size();            return this;        },        addAllLast_: function (aCollection) {            aCollection.do_(block(function (each) {                return this.addLast_(each);            }));            return aCollection;        },        sorted_: function (aSortBlockOrNil) {            return this.copy().sort_(aSortBlockOrNil);        },        unsafeRemoveFirst: function () {            var firstObject;            firstObject = this.$array.at_(this.$firstIndex);            this.$array.at_put_(this.$firstIndex, nil);            this.$firstIndex = this.$firstIndex._plus(number(1));            return firstObject;        },        at_ifAbsentPut_: function (index, block) {            var v;            index._less_equals(this.size()).ifTrue_(block(function () {                nonLocalReturn((v = this.at_(index)).ifNotNil_ifNil_(block(function () {                    return v;                }), block(function () {                    return this.at_put_(index, block.value());                })));            }));            block(function () {                return this.size()._less(index);            }).whileTrue_(block(function () {                return this.add_(nil);            }));            return this.at_put_(index, block.value());        },        restoreFromSnapshot_: function (anObject) {            this._super.restoreFromSnapshot_(anObject.snapshotCopy());            return this;        },        asArray: function () {            return this.$array.copyFrom_to_(this.$firstIndex, this.$lastIndex);        },        capacity: function () {            return this.$array.size();        },        removeFirst: function () {            var firstObject;            this.emptyCheck();            firstObject = this.$array.at_(this.$firstIndex);            this.$array.at_put_(this.$firstIndex, nil);            this.$firstIndex = this.$firstIndex._plus(number(1));            return firstObject;        },        copyReplaceFrom_to_with_: function (start, stop, replacementCollection) {            var newOrderedCollection; var delta; var startIndex; var stopIndex;            delta = number(0);            startIndex = start;            stopIndex = stop;            start._less(number(1)).ifTrue_ifFalse_(block(function () {                return startIndex = stopIndex = number(0);            }), block(function () {                return startIndex._greater(this.size()).ifTrue_ifFalse_(block(function () {                    return startIndex = stopIndex = this.size()._plus(number(1));                }), block(function () {                    (stopIndex._less((startIndex._minus(number(1)))).or_(block(function () {                        return stopIndex._greater(this.size());                    }))).ifTrue_(block(function () {                        return this.errorOutOfBounds();                    }));                    return delta = stopIndex._minus(startIndex)._plus(number(1));                }));            }));            newOrderedCollection = this.species().new_(this.size()._plus(replacementCollection.size())._minus(delta));            number(1).to_do_(startIndex._minus(number(1)), block(function (index) {                return newOrderedCollection.add_((this.at_(index)));            }));            number(1).to_do_(replacementCollection.size(), block(function (index) {                return newOrderedCollection.add_((replacementCollection.at_(index)));            }));            stopIndex._plus(number(1)).to_do_(this.size(), block(function (index) {                return newOrderedCollection.add_((this.at_(index)));            }));            return newOrderedCollection;        },        setContents_: function (anArray) {            this.$array = anArray;            this.$firstIndex = number(1);            this.$lastIndex = this.$array.size();            return this;        },        reset: function () {            this.resetTo_(number(1));            return this;        },        addFirst_: function (newObject) {            this.$firstIndex._equals(number(1)).ifTrue_(block(function () {                return this.makeRoomAtFirst();            }));            this.$firstIndex = this.$firstIndex._minus(number(1));            this.$array.at_put_(this.$firstIndex, newObject);            return newObject;        },        makeRoomAtLast: function () {            var tally; var newFirstIndex; var newLastIndex;            tally = this.size();            tally._times(number(2))._greater_equals(this.$lastIndex).ifTrue_(block(function () {                nonLocalReturn(this.growAtLast());            }));            tally._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(this.resetTo_(number(1)));            }));            newLastIndex = this.$lastIndex._slash_slash(number(2));            newFirstIndex = newLastIndex._minus(this.$lastIndex)._plus(this.$firstIndex);            this.$array.replaceFrom_to_with_startingAt_(newFirstIndex, newLastIndex, this.$array, this.$firstIndex);            this.$array.from_to_put_(newLastIndex._plus(number(1)), this.$lastIndex, nil);            this.$firstIndex = newFirstIndex;            this.$lastIndex = newLastIndex;            return this;        },        growAtLast: function () {            var newArray;            newArray = this._class().arrayType().new_((this.$array.size()._times(number(2)).max_(number(1))));            newArray.replaceFrom_to_with_startingAt_(this.$firstIndex, this.$lastIndex, this.$array, this.$firstIndex);            this.$array = newArray;            return this;        },        errorConditionNotSatisfied: function () {            this.error_(string("no element satisfies condition"));            return this;        },        setCollection_: function (anArray) {            this.$array = anArray;            this.reset();            return this;        },        hasContentsInExplorer: function () {            return this.isEmpty().not();        },        add_afterIndex_: function (newObject, index) {            (index.between_and_(number(0), this.size())).ifFalse_(block(function () {                nonLocalReturn(this.errorSubscriptBounds_(index));            }));            this.insert_before_(newObject, this.$firstIndex._plus(index));            return newObject;        },        at_put_: function (anInteger, anObject) {            var index;            index = anInteger.asInteger();            (index._less(number(1)).or_(block(function () {                return index._plus(this.$firstIndex)._minus(number(1))._greater(this.$lastIndex);            }))).ifTrue_ifFalse_(block(function () {                return this.errorNoSuchElement();            }), block(function () {                nonLocalReturn(this.$array.at_put_(index._plus(this.$firstIndex)._minus(number(1)), anObject));            }));            return this;        },        collect_: function (aBlock) {            var newCollection;            newCollection = this.species().new_(this.size());            this.$firstIndex.to_do_(this.$lastIndex, block(function (index) {                return newCollection.addLast_((aBlock.value_((this.$array.at_(index)))));            }));            return newCollection;        },        postCopy: function () {            this.$array = this.$array.copy();            return this;        },        reverseDo_: function (aBlock) {            var index;            index = this.$lastIndex;            block(function () {                return index._greater_equals(this.$firstIndex);            }).whileTrue_(block(function () {                aBlock.value_((this.$array.at_(index)));                return index = index._minus(number(1));            }));            return this;        },        sort_: function (aSortBlock) {            this.ifNotEmpty_(block(function () {                return this.$array.mergeSortFrom_to_by_(this.$firstIndex, this.$lastIndex, aSortBlock);            }));            return this;        },        removeIndex_: function (removedIndex) {            this.$array.replaceFrom_to_with_startingAt_(removedIndex, this.$lastIndex._minus(number(1)), this.$array, removedIndex._plus(number(1)));            this.$array.at_put_(this.$lastIndex, nil);            this.$lastIndex = this.$lastIndex._minus(number(1));            return this;        },        removeAll: function () {            this.setCollection_((this._class().arrayType().new_(this.$array.size())));            return this;        },        resetTo_: function (index) {            this.$firstIndex = index;            this.$lastIndex = this.$firstIndex._minus(number(1));            return this;        },        sort: function () {            this.sort_(nil);            return this;        },        growAtFirst: function () {            var newArray; var newFirstIndex; var newLastIndex;            newArray = this._class().arrayType().new_((this.$array.size()._times(number(2)).max_(number(1))));            newFirstIndex = newArray.size()._minus(this.$array.size())._plus(this.$firstIndex);            newLastIndex = newFirstIndex._plus(this.$lastIndex)._minus(this.$firstIndex);            newArray.replaceFrom_to_with_startingAt_(newFirstIndex, newLastIndex, this.$array, this.$firstIndex);            this.$array = newArray;            this.$firstIndex = newFirstIndex;            this.$lastIndex = newLastIndex;            return this;        },        reversed: function () {            var newCol;            newCol = this.species()._new();            this.reverseDo_(block(function (elem) {                return newCol.addLast_(elem);            }));            return newCol;        },        add_after_: function (newObject, oldObject) {            var index;            index = this.find_(oldObject);            this.insert_before_(newObject, index._plus(number(1)));            return newObject;        },        at_: function (anInteger) {            (anInteger._less(number(1)).or_(block(function () {                return anInteger._plus(this.$firstIndex)._minus(number(1))._greater(this.$lastIndex);            }))).ifTrue_ifFalse_(block(function () {                return this.errorNoSuchElement();            }), block(function () {                nonLocalReturn(this.$array.at_(anInteger._plus(this.$firstIndex)._minus(number(1))));            }));            return this;        },        add_: function (newObject) {            return this.addLast_(newObject);        },        withIndexCollect_: function (elementAndIndexBlock) {            var newCollection;            newCollection = this.species().new_(this.size());            this.$firstIndex.to_do_(this.$lastIndex, block(function (index) {                return newCollection.addLast_((elementAndIndexBlock.value_value_((this.$array.at_(index)), index._minus(this.$firstIndex)._plus(number(1)))));            }));            return newCollection;        },        add_before_: function (newObject, oldObject) {            var index;            index = this.find_(oldObject);            this.insert_before_(newObject, index);            return newObject;        },        makeRoomAtFirst: function () {            var tally; var newFirstIndex; var newLastIndex;            tally = this.size();            tally._times(number(2))._greater_equals(this.$array.size()).ifTrue_(block(function () {                nonLocalReturn(this.growAtFirst());            }));            tally._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(this.resetTo_(this.$array.size()._plus(number(1))));            }));            newFirstIndex = this.$array.size()._slash_slash(number(2))._plus(number(1));            newLastIndex = newFirstIndex._minus(this.$firstIndex)._plus(this.$lastIndex);            number(0).to_do_(tally._minus(number(1)), block(function (offset) {                return this.$array.at_put_(newLastIndex._minus(offset), (this.$array.at_(this.$lastIndex._minus(offset))));            }));            this.$array.from_to_put_(this.$firstIndex, newFirstIndex._minus(number(1)), nil);            this.$firstIndex = newFirstIndex;            this.$lastIndex = newLastIndex;            return this;        },        collector: function () {            return this.$array;        },        copyWith_: function (newElement) {            var newCollection;            newCollection = this.copy();            newCollection.add_(newElement);            return newCollection;        },        size: function () {            return this.$lastIndex._minus(this.$firstIndex)._plus(number(1));        },        copyEmpty: function () {            return this.species()._new();        },        remove_ifAbsent_: function (oldObject, absentBlock) {            var index;            index = this.$firstIndex;            block(function () {                return index._less_equals(this.$lastIndex);            }).whileTrue_(block(function () {                return oldObject._equals((this.$array.at_(index))).ifTrue_ifFalse_(block(function () {                    this.removeIndex_(index);                    nonLocalReturn(oldObject);                }), block(function () {                    return index = index._plus(number(1));                }));            }));            return absentBlock.value();        },        insert_before_: function (anObject, spot) {            var delta; var spotIndex;            spotIndex = spot;            delta = spotIndex._minus(this.$firstIndex);            this.$firstIndex._equals(number(1)).ifTrue_(block(function () {                this.makeRoomAtFirst();                return spotIndex = this.$firstIndex._plus(delta);            }));            this.$firstIndex = this.$firstIndex._minus(number(1));            this.$array.replaceFrom_to_with_startingAt_(this.$firstIndex, spotIndex._minus(number(2)), this.$array, this.$firstIndex._plus(number(1)));            this.$array.at_put_(spotIndex._minus(number(1)), anObject);            return anObject;        },        inspectorClass: function () {            return OrderedCollectionInspector;        },        errorNoSuchElement: function () {            this.error_(string("attempt to index non-existent element in an ordered collection"));            return this;        },        addAllFirst_: function (anOrderedCollection) {            anOrderedCollection.reverseDo_(block(function (each) {                return this.addFirst_(each);            }));            return anOrderedCollection;        },        collect_from_to_: function (aBlock, fromIndex, toIndex) {            var result;            (fromIndex._less(number(1)).or_(block(function () {                return toIndex._plus(this.$firstIndex)._minus(number(1))._greater(this.$lastIndex);            }))).ifTrue_(block(function () {                nonLocalReturn(this.errorNoSuchElement());            }));            result = this.species().new_(toIndex._minus(fromIndex)._plus(number(1)));            this.$firstIndex._plus(fromIndex)._minus(number(1)).to_do_(this.$firstIndex._plus(toIndex)._minus(number(1)), block(function (index) {                return result.addLast_((aBlock.value_((this.$array.at_(index)))));            }));            return result;        },        removeFirst_: function (n) {            var list;            list = this._class().arrayType().new_(n);            number(1).to_do_(n, block(function (i) {                return list.at_put_(i, this.removeFirst());            }));            return list;        },        select_: function (aBlock) {            var newCollection; var element;            newCollection = this.copyEmpty();            this.$firstIndex.to_do_(this.$lastIndex, block(function (index) {                return (aBlock.value_((element = this.$array.at_(index)))).ifTrue_(block(function () {                    return newCollection.addLast_(element);                }));            }));            return newCollection;        },        do_: function (aBlock) {            var index;            index = this.$firstIndex;            block(function () {                return index._less_equals(this.$lastIndex);            }).whileTrue_(block(function () {                aBlock.value_((this.$array.at_(index)));                return index = index._plus(number(1));            }));            return this;        },        removeLast: function () {            var lastObject;            this.emptyCheck();            lastObject = this.$array.at_(this.$lastIndex);            this.$array.at_put_(this.$lastIndex, nil);            this.$lastIndex = this.$lastIndex._minus(number(1));            return lastObject;        },        removeLast_: function (n) {            var list;            list = this._class().arrayType().new_(n);            n.to_by_do_(number(1), number(-1), block(function (i) {                return list.at_put_(i, this.removeLast());            }));            return list;        },        removeAllSuchThat_: function (aBlock) {            var n;            n = this.$firstIndex;            this.$firstIndex.to_do_(this.$lastIndex, block(function (index) {                return (aBlock.value_((this.$array.at_(index)))).ifFalse_(block(function () {                    this.$array.at_put_(n, (this.$array.at_(index)));                    return n = n._plus(number(1));                }));            }));            this.$array.from_to_put_(n, this.$lastIndex, nil);            this.$lastIndex = n._minus(number(1));            return this;        }    }});Class("Character", {    superclass: Magnitude,    instanceVariables: [ "$value" ],    classVariables: [ "$CharacterTable", "$ClassificationTable", "$DigitValues", "$LetterBits", "$LowercaseBit", "$UppercaseBit" ],    classMethods: {        initializeClassificationTable: function () {            var ch1;            LowercaseBit = number(1).bitShift_(number(16));            UppercaseBit = number(1).bitShift_(number(17));            LetterBits = LowercaseBit.bitOr_(UppercaseBit);            ClassificationTable = _Array.new_(number(256));            number(0).to_do_(number(255), block(function (i) {                return ClassificationTable.at_put_(i._plus(number(1)), (i.bitShift_(number(8)))._plus(i));            }));            array([array([character("A"), character("a")]), array([character("B"), character("b")]), array([character("C"), character("c")]), array([character("D"), character("d")]), array([character("E"), character("e")]), array([character("F"), character("f")]), array([character("G"), character("g")]), array([character("H"), character("h")]), array([character("I"), character("i")]), array([character("J"), character("j")]), array([character("K"), character("k")]), array([character("L"), character("l")]), array([character("M"), character("m")]), array([character("N"), character("n")]), array([character("O"), character("o")]), array([character("P"), character("p")]), array([character("Q"), character("q")]), array([character("R"), character("r")]), array([character("S"), character("s")]), array([character("T"), character("t")]), array([character("U"), character("u")]), array([character("V"), character("v")]), array([character("W"), character("w")]), array([character("X"), character("x")]), array([character("Y"), character("y")]), array([character("Z"), character("z")]), array([character("Ã"), character("Ã¤")]), array([character("Ã"), character("Ã¥")]), array([character("Ã"), character("Ã§")]), array([character("Ã"), character("Ã©")]), array([character("Ã"), character("Ã±")]), array([character("Ã"), character("Ã¶")]), array([character("Ã"), character("Ã¼")]), array([character("Ã"), character("Ã ")]), array([character("Ã"), character("Ã£")]), array([character("Ã"), character("Ãµ")]), array([character("Â"), character("Â")]), array([character("Ã"), character("Ã¦")]), array([character("Ã"), character("Ã¡")]), array([character("Ã"), character("Ã­")]), array([character("Ã"), character("Ã³")]), array([character("Ã"), character("Ãº")]), array([character("Ã"), character("Ã¨")]), array([character("Ã"), character("Ã¬")]), array([character("Ã"), character("Ã²")]), array([character("Ã"), character("Ã¹")]), array([character("Ã"), character("Ã«")]), array([character("Ã"), character("Ã¯")]), array([character("Ã"), character("Ã¢")]), array([character("Ã"), character("Ãª")]), array([character("Ã"), character("Ã®")]), array([character("Ã"), character("Ã´")]), array([character("Ã"), character("Ã»")])]).do_(block(function (pair) {                var ch2;                ch1 = pair.first().asciiValue();                ch2 = pair.last().asciiValue();                ClassificationTable.at_put_(ch1._plus(number(1)), (ch1.bitShift_(number(8)))._plus(ch2)._plus(UppercaseBit));                return ClassificationTable.at_put_(ch2._plus(number(1)), (ch1.bitShift_(number(8)))._plus(ch2)._plus(LowercaseBit));            }));            array([character("Ã"), character("Ã"), character("Ã¸"), character("Ã¿")]).do_(block(function (_char) {                ch1 = _char.asciiValue();                return ClassificationTable.at_put_(ch1._plus(number(1)), (ch1.bitShift_(number(8)))._plus(ch1)._plus(LowercaseBit));            }));            return this;        },        escape: function () {            return this.value_(number(27));        },        insert: function () {            return this.value_(number(5));        },        initializeDigitValues: function () {            DigitValues = _Array.new_withAll_(number(256), number(-1));            number(0).to_do_(number(9), block(function (i) {                return DigitValues.at_put_(number(48)._plus(i)._plus(number(1)), i);            }));            number(10).to_do_(number(35), block(function (i) {                return DigitValues.at_put_(number(55)._plus(i)._plus(number(1)), i);            }));            number(10).to_do_(number(35), block(function (i) {                return DigitValues.at_put_(number(87)._plus(i)._plus(number(1)), i);            }));            return this;        },        initialize: function () {            CharacterTable.ifNil_(block(function () {                CharacterTable = _Array.new_(number(256));                return number(1).to_do_(number(256), block(function (i) {                    return CharacterTable.at_put_(i, (this.basicNew().setValue_(i._minus(number(1)))));                }));            }));            this.initializeDigitValues();            return this;        },        value_: function (anInteger) {            anInteger._greater(number(255)).ifTrue_(block(function () {                nonLocalReturn(this.basicNew().setValue_(anInteger));            }));            return CharacterTable.at_(anInteger._plus(number(1)));        },        linefeed: function () {            return this.value_(number(10));        },        home: function () {            return this.value_(number(1));        },        allCharacters: function () {            return this.allByteCharacters();        },        allByteCharacters: function () {            return (number(0).to_(number(255))).collect_as_(block(function (v) {                return Character.value_(v);            }), String);        },        pageDown: function () {            return this.value_(number(12));        },        leadingChar_code_: function (leadChar, code) {            code._greater_equals(number(4194304)).ifTrue_(block(function () {                return this.error_(string("code is out of range"));            }));            leadChar._greater_equals(number(256)).ifTrue_(block(function () {                return this.error_(string("lead is out of range"));            }));            return this.value_((leadChar.bitShift_(number(22)))._plus(code));        },        nbsp: function () {            return Character.value_(number(160));        },        newPage: function () {            return this.value_(number(12));        },        cr: function () {            return this.value_(number(13));        },        tab: function () {            return this.value_(number(9));        },        separators: function () {            return array([number(32), number(13), number(9), number(10), number(12)]).collect_as_(block(function (v) {                return Character.value_(v);            }), String);        },        arrowRight: function () {            return this.value_(number(29));        },        lf: function () {            return this.value_(number(10));        },        euro: function () {            return Unicode.value_(number(8364));        },        constantNames: function () {            return array([string("backspace"), string("cr"), string("delete"), string("escape"), string("lf"), string("newPage"), string("space"), string("tab")]);        },        arrowDown: function () {            return this.value_(number(31));        },        alphabet: function () {            return string("abcdefghijklmnopqrstuvwxyz").copy();        },        end: function () {            return this.value_(number(4));        },        space: function () {            return this.value_(number(32));        },        pageUp: function () {            return this.value_(number(11));        },        characterTable: function () {            return CharacterTable;        },        arrowLeft: function () {            return this.value_(number(28));        },        codePoint_: function (integer) {            return this.value_(integer);        },        constantNameFor_: function (aCharacter) {            return this.constantNames().detect_ifNone_(block(function (each) {                return (this.perform_(each))._equals(aCharacter);            }), block(function () {                return nil;            }));        },        _new: function () {            this.error_(string("cannot create new characters"));            return this;        },        digitValue_: function (x) {            var index;            index = x.asInteger();            return CharacterTable.at_((index._less(number(10)).ifTrue_ifFalse_(block(function () {                return number(48)._plus(index);            }), block(function () {                return number(55)._plus(index);            })))._plus(number(1)));        },        arrowUp: function () {            return this.value_(number(30));        },        _delete: function () {            return this.value_(number(127));        },        backspace: function () {            return this.value_(number(8));        },        enter: function () {            return this.value_(number(3));        }    },    instanceMethods: {        isDigit: function () {            return (EncodedCharSet.charsetAt_(this.leadingChar())).isDigit_(this);        },        asUppercase: function () {            var v;            v = this.charCode();            (((number(97)._less_equals(v).and_(block(function () {                return v._less_equals(number(122));            }))).or_(block(function () {                return number(224)._less_equals(v).and_(block(function () {                    return v._less_equals(number(246));                }));            }))).or_(block(function () {                return number(248)._less_equals(v).and_(block(function () {                    return v._less_equals(number(254));                }));            }))).ifTrue_ifFalse_(block(function () {                nonLocalReturn(Character.value_(this.$value._minus(number(32))));            }), block(function () {                nonLocalReturn(this);            }));            return this;        },        _less: function (aCharacter) {            return this.asciiValue()._less(aCharacter.asciiValue());        },        isSpecial: function () {            return string("+-/\\*~<>=@,%|&?!").includes_(this);        },        asText: function () {            return this.asString().asText();        },        isLowercase: function () {            return (EncodedCharSet.charsetAt_(this.leadingChar())).isLowercase_(this);        },        asString: function () {            return String.with_(this);        },        asCharacter: function () {            return this;        },        to_: function (other) {            return (this.asciiValue().to_(other.asciiValue())).collect_(block(function (ascii) {                return Character.value_(ascii);            }));        },        comeFullyUpOnReload_: function (smartRefStream) {            return this._class().value_(this.$value);        },        clone: function () {            return this;        },        greaseInteger: function () {            return this.charCode();        },        jsonOn_: function (aStream) {            this.javascriptOn_(aStream);            return this;        },        asSymbol: function () {            return Symbol.internCharacter_(this);        },        objectForDataStream_: function (refStrm) {            refStrm.insideASegment().ifFalse_ifTrue_(block(function () {                nonLocalReturn(this);            }), block(function () {                refStrm.references().removeKey_ifAbsent_(this, block(function () {;                }));                nonLocalReturn(nil);            }));            return this;        },        macToSqueak: function () {            var asciiValue;            this.$value._less(number(128)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            this.$value._greater(number(255)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            asciiValue = array([number(196), number(197), number(199), number(201), number(209), number(214), number(220), number(225), number(224), number(226), number(228), number(227), number(229), number(231), number(233), number(232), number(234), number(235), number(237), number(236), number(238), number(239), number(241), number(243), number(242), number(244), number(246), number(245), number(250), number(249), number(251), number(252), number(134), number(176), number(162), number(163), number(167), number(149), number(182), number(223), number(174), number(169), number(153), number(180), number(168), number(128), number(198), number(216), number(129), number(177), number(138), number(141), number(165), number(181), number(142), number(143), number(144), number(154), number(157), number(170), number(186), number(158), number(230), number(248), number(191), number(161), number(172), number(166), number(131), number(173), number(178), number(171), number(187), number(133), number(160), number(192), number(195), number(213), number(140), number(156), number(150), number(151), number(147), number(148), number(145), number(146), number(247), number(179), number(255), number(159), number(185), number(164), number(139), number(155), number(188), number(189), number(135), number(183), number(130), number(132), number(137), number(194), number(202), number(193), number(203), number(200), number(205), number(206), number(207), number(204), number(211), number(212), number(190), number(210), number(218), number(219), number(217), number(208), number(136), number(152), number(175), number(215), number(221), number(222), number(184), number(240), number(253), number(254)]).at_(this.asciiValue()._minus(number(127)));            return Character.value_(asciiValue);        },        printOnStream_: function (aStream) {            aStream.print_(string("$")._comma((String.with_(this))));            return this;        },        isOctetCharacter: function () {            return this.$value._less(number(256));        },        squeakToIso: function () {            return this;        },        canBeGlobalVarInitial: function () {            return (EncodedCharSet.charsetAt_(this.leadingChar())).canBeGlobalVarInitial_(this);        },        hex: function () {            return this.$value.printStringBase_(number(16));        },        asUnicode: function () {            var table; var charset; var v;            this.leadingChar()._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(this.$value);            }));            (charset = EncodedCharSet.charsetAt_(this.leadingChar())).isCharset().ifFalse_(block(function () {                nonLocalReturn(this.charCode());            }));            (table = charset.ucsTable()).ifNil_(block(function () {                nonLocalReturn(number(65533));            }));            (v = table.at_(number(1)._plus(this.charCode())))._equals(number(-1)).ifTrue_(block(function () {                nonLocalReturn(number(65533));            }));            return v;        },        isTraditionalDomestic: function () {            return ((EncodedCharSet.charsetAt_(this.leadingChar())).isKindOf_(LanguageEnvironment._class())).not();        },        isoToSqueak: function () {            return this;        },        canBeNonGlobalVarInitial: function () {            return (EncodedCharSet.charsetAt_(this.leadingChar())).canBeNonGlobalVarInitial_(this);        },        javascriptOn_: function (aStream) {            (String.with_(this)).javascriptOn_(aStream);            return this;        },        isCharacter: function () {            return _true;        },        asInteger: function () {            return this.$value;        },        isUppercase: function () {            return (EncodedCharSet.charsetAt_(this.leadingChar())).isUppercase_(this);        },        charCode: function () {            return (this.$value.bitAnd_(number(4194303)));        },        printOn_: function (aStream) {            var name;            this.$value._greater(number(32)).ifTrue_ifFalse_(block(function () {                return (function () {                    var cascadeReceiver$ = aStream;                    cascadeReceiver$.nextPut_(character("$"));                    return cascadeReceiver$.nextPut_(this);                }).apply(this);            }), block(function () {                name = this._class().constantNameFor_(this);                return name.notNil().ifTrue_ifFalse_(block(function () {                    return (function () {                        var cascadeReceiver$ = aStream;                        cascadeReceiver$.nextPutAll_(this._class().name());                        cascadeReceiver$.space();                        return cascadeReceiver$.nextPutAll_(name);                    }).apply(this);                }), block(function () {                    return (function () {                        var cascadeReceiver$ = aStream;                        cascadeReceiver$.nextPutAll_(this._class().name());                        cascadeReceiver$.nextPutAll_(string(" value: "));                        return cascadeReceiver$.print_(this.$value);                    }).apply(this);                }));            }));            return this;        },        isLetter: function () {            return (EncodedCharSet.charsetAt_(this.leadingChar())).isLetter_(this);        },        veryDeepCopyWith_: function (deepCopier) {            return this;        },        isSafeForHTTP: function () {            return this.charCode()._less(number(128)).and_(block(function () {                return this.isAlphaNumeric().or_(block(function () {                    return string(".-_").includes_((Character.value_(this.charCode())));                }));            }));        },        codePoint: function () {            string("Fundmntl");            return this.asciiValue();        },        basicSqueakToIso: function () {            var asciiValue;            this.$value._less(number(128)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            this.$value._greater(number(255)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            asciiValue = array([number(196), number(197), number(199), number(201), number(209), number(214), number(220), number(225), number(224), number(226), number(228), number(227), number(229), number(231), number(233), number(232), number(234), number(235), number(237), number(236), number(238), number(239), number(241), number(243), number(242), number(244), number(246), number(245), number(250), number(249), number(251), number(252), number(134), number(176), number(162), number(163), number(167), number(149), number(182), number(223), number(174), number(169), number(153), number(180), number(168), number(128), number(198), number(216), number(129), number(177), number(138), number(141), number(165), number(181), number(142), number(143), number(144), number(154), number(157), number(170), number(186), number(158), number(230), number(248), number(191), number(161), number(172), number(166), number(131), number(173), number(178), number(171), number(187), number(133), number(160), number(192), number(195), number(213), number(140), number(156), number(150), number(151), number(147), number(148), number(145), number(146), number(247), number(179), number(253), number(159), number(185), number(164), number(139), number(155), number(188), number(189), number(135), number(183), number(130), number(132), number(137), number(194), number(202), number(193), number(203), number(200), number(205), number(206), number(207), number(204), number(211), number(212), number(190), number(210), number(218), number(219), number(217), number(208), number(136), number(152), number(175), number(215), number(221), number(222), number(184), number(240), number(254), number(255), number(256)]).at_(this.asciiValue()._minus(number(127)));            return Character.value_(asciiValue);        },        print_on_: function (anObject, aStream) {            aStream.nextPut_(this);            return this;        },        asLowercase: function () {            var v;            v = this.charCode();            (((number(65)._less_equals(v).and_(block(function () {                return v._less_equals(number(90));            }))).or_(block(function () {                return number(192)._less_equals(v).and_(block(function () {                    return v._less_equals(number(214));                }));            }))).or_(block(function () {                return number(216)._less_equals(v).and_(block(function () {                    return v._less_equals(number(222));                }));            }))).ifTrue_ifFalse_(block(function () {                nonLocalReturn(Character.value_(this.$value._plus(number(32))));            }), block(function () {                nonLocalReturn(this);            }));            return this;        },        hash: function () {            return this.$value;        },        _greater: function (aCharacter) {            return this.asciiValue()._greater(aCharacter.asciiValue());        },        deepCopy: function () {            return this;        },        isLiteral: function () {            return _true;        },        storeOn_: function (aStream) {            var name;            (this.$value.between_and_(number(33), number(255))).ifTrue_ifFalse_(block(function () {                return (function () {                    var cascadeReceiver$ = aStream;                    cascadeReceiver$.nextPut_(character("$"));                    return cascadeReceiver$.nextPut_(this);                }).apply(this);            }), block(function () {                name = this._class().constantNameFor_(this);                return name.notNil().ifTrue_ifFalse_(block(function () {                    return (function () {                        var cascadeReceiver$ = aStream;                        cascadeReceiver$.nextPutAll_(this._class().name());                        cascadeReceiver$.space();                        return cascadeReceiver$.nextPutAll_(name);                    }).apply(this);                }), block(function () {                    return (function () {                        var cascadeReceiver$ = aStream;                        cascadeReceiver$.nextPut_(character("("));                        cascadeReceiver$.nextPutAll_(this._class().name());                        cascadeReceiver$.nextPutAll_(string(" value: "));                        cascadeReceiver$.print_(this.$value);                        return cascadeReceiver$.nextPut_(character(")"));                    }).apply(this);                }));            }));            return this;        },        asciiValue: function () {            return this.$value;        },        copy: function () {            return this;        },        leadingChar: function () {            return (this.$value.bitAnd_((number(1069547520)))).bitShift_(number(-22));        },        tokenish: function () {            return this.isLetter().or_(block(function () {                return this.isDigit().or_(block(function () {                    return this._equals(character(":"));                }));            }));        },        storeBinaryOn_: function (aStream) {            this.$value._less(number(256)).ifTrue_ifFalse_(block(function () {                return aStream.basicNextPut_(this);            }), block(function () {                return aStream.nextInt32Put_(this.$value);            }));            return this;        },        isAlphaNumeric: function () {            return this.isLetter().or_(block(function () {                return this.isDigit();            }));        },        _equals: function (aCharacter) {            return this._equals_equals(aCharacter).or_(block(function () {                return aCharacter.isCharacter().and_(block(function () {                    return this.asciiValue()._equals(aCharacter.asciiValue());                }));            }));        },        escapeEntities: function () {            array([character("<"), string("&lt;"), character(">"), string("&gt;"), character("&"), string("&amp;")]).pairsDo_(block(function (k, v) {                return this._equals(k).ifTrue_(block(function () {                    nonLocalReturn(v);                }));            }));            return String.with_(this);        },        digitValue: function () {            this.$value._greater(number(255)).ifTrue_(block(function () {                nonLocalReturn((EncodedCharSet.charsetAt_(this.leadingChar())).digitValueOf_(this));            }));            return DigitValues.at_(number(1)._plus(this.$value));        },        isVowel: function () {            return string("AEIOU").includes_(this.asUppercase());        },        sameAs_: function (aCharacter) {            return (this.asLowercase()._equals(aCharacter.asLowercase()));        },        isSeparator: function () {            this.$value._equals(number(32)).ifTrue_(block(function () {                nonLocalReturn(_true);            }));            this.$value._equals(number(13)).ifTrue_(block(function () {                nonLocalReturn(_true);            }));            this.$value._equals(number(9)).ifTrue_(block(function () {                nonLocalReturn(_true);            }));            this.$value._equals(number(10)).ifTrue_(block(function () {                nonLocalReturn(_true);            }));            this.$value._equals(number(12)).ifTrue_(block(function () {                nonLocalReturn(_true);            }));            return _false;        },        setValue_: function (newValue) {            this.$value.ifNotNil_(block(function () {                nonLocalReturn(this.error_(string("Characters are immutable")));            }));            this.$value = newValue;            return this;        },        squeakToMac: function () {            this.$value._less(number(128)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            this.$value._greater(number(255)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            return Character.value_((array([number(173), number(176), number(226), number(196), number(227), number(201), number(160), number(224), number(246), number(228), number(178), number(220), number(206), number(179), number(182), number(183), number(184), number(212), number(213), number(210), number(211), number(165), number(208), number(209), number(247), number(170), number(185), number(221), number(207), number(186), number(189), number(217), number(202), number(193), number(162), number(163), number(219), number(180), number(195), number(164), number(172), number(169), number(187), number(199), number(194), number(197), number(168), number(248), number(161), number(177), number(198), number(215), number(171), number(181), number(166), number(225), number(252), number(218), number(188), number(200), number(222), number(223), number(240), number(192), number(203), number(231), number(229), number(204), number(128), number(129), number(174), number(130), number(233), number(131), number(230), number(232), number(237), number(234), number(235), number(236), number(245), number(132), number(241), number(238), number(239), number(205), number(133), number(249), number(175), number(244), number(242), number(243), number(134), number(250), number(251), number(167), number(136), number(135), number(137), number(139), number(138), number(140), number(190), number(141), number(143), number(142), number(144), number(145), number(147), number(146), number(148), number(149), number(253), number(150), number(152), number(151), number(153), number(155), number(154), number(214), number(191), number(157), number(156), number(158), number(159), number(254), number(255), number(216)]).at_(this.$value._minus(number(127)))));        }    }});Class("_Array", {    superclass: ArrayedCollection,    classMethods: {        braceWith_with_with_with_: function (a, b, c, d) {            var array;            array = this.new_(number(4));            array.at_put_(number(1), a);            array.at_put_(number(2), b);            array.at_put_(number(3), c);            array.at_put_(number(4), d);            return array;        },        braceWith_: function (a) {            var array;            array = this.new_(number(1));            array.at_put_(number(1), a);            return array;        },        new_: function (sizeRequested) {            primitiveDeclaration();            return this.basicNew_(sizeRequested);        },        braceStream_: function (nElements) {            return WriteStream.basicNew().braceArray_((this.new_(nElements)));        },        empty: function () {            return array([]);        },        braceWith_with_with_: function (a, b, c) {            var array;            array = this.new_(number(3));            array.at_put_(number(1), a);            array.at_put_(number(2), b);            array.at_put_(number(3), c);            return array;        },        braceWithNone: function () {            return this.new_(number(0));        },        braceWith_with_: function (a, b) {            var array;            array = this.new_(number(2));            array.at_put_(number(1), a);            array.at_put_(number(2), b);            return array;        }    },    instanceMethods: {        isArray: function () {            return _true;        },        hasLiteral_: function (literal) {            var lit;            number(1).to_do_(this.size(), block(function (index) {                (lit = this.at_(index))._equals_equals(literal).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));                return (lit._class()._equals_equals(_Array).and_(block(function () {                    return lit.hasLiteral_(literal);                }))).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            return _false;        },        printAsLiteralFormOn_: function (aStream) {            aStream.nextPut_(character("#"));            this.printElementsOn_(aStream);            return this;        },        byteEncode_: function (aStream) {            aStream.writeArray_(this);            return this;        },        _plus_times: function (aCollection) {            return aCollection.preMultiplyByArray_(this);        },        sorted_: function (aSortBlockOrNil) {            return this.copy().sort_(aSortBlockOrNil);        },        printOn_: function (aStream) {            this.isLiteral().ifTrue_(block(function () {                nonLocalReturn(this.printAsLiteralFormOn_(aStream));            }));            this._class()._equals(_Array).ifTrue_(block(function () {                nonLocalReturn(this.printAsBraceFormOn_(aStream));            }));            return this._super.printOn_(aStream);        },        atWrap_put_: function (index, anObject) {            primitiveDeclaration();            return this.at_put_(index._minus(number(1))._backslash_backslash(this.size())._plus(number(1)), anObject);        },        elementsExchangeIdentityWith_: function (otherArray) {            primitiveDeclaration();            otherArray._class()._equals_equals(_Array).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("arg must be array")));            }));            this.size()._equals(otherArray.size()).ifFalse_(block(function () {                nonLocalReturn(this.error_(string("arrays must be same size")));            }));            (this.anySatisfy_(block(function (obj) {                return obj._class()._equals_equals(SmallInteger);            }))).ifTrue_(block(function () {                nonLocalReturn(this.error_(string("can't become SmallIntegers")));            }));            (otherArray.anySatisfy_(block(function (obj) {                return obj._class()._equals_equals(SmallInteger);            }))).ifTrue_(block(function () {                nonLocalReturn(this.error_(string("can't become SmallIntegers")));            }));            this.with_do_(otherArray, block(function (a, b) {                return a._equals_equals(b).ifTrue_(block(function () {                    nonLocalReturn(this.error_(string("can't become yourself")));                }));            }));            (Smalltalk.bytesLeft_(_true))._equals(Smalltalk.primitiveGarbageCollect()).ifTrue_(block(function () {                nonLocalReturn(this.primitiveFailed());            }));            return this.elementsExchangeIdentityWith_(otherArray);        },        printAsBraceFormOn_: function (aStream) {            aStream.nextPut_(character("{"));            this.do_separatedBy_(block(function (el) {                return aStream.print_(el);            }), block(function () {                return aStream.nextPutAll_(string(" . "));            }));            aStream.nextPut_(character("}"));            return this;        },        asArray: function () {            return this;        },        storeOn_: function (aStream) {            this.isLiteral().ifTrue_ifFalse_(block(function () {                (function () {                    var cascadeReceiver$ = aStream;                    cascadeReceiver$.nextPut_(character("#"));                    return cascadeReceiver$.nextPut_(character("("));                }).apply(this);                this.do_(block(function (element) {                    element.storeOn_(aStream);                    return aStream.space();                }));                return aStream.nextPut_(character(")"));            }), block(function () {                return this._super.storeOn_(aStream);            }));            return this;        },        isLiteral: function () {            return this._class()._equals_equals(_Array).and_(block(function () {                return this.allSatisfy_(block(function (each) {                    return each.isLiteral();                }));            }));        },        literalEqual_: function (other) {            this._class()._equals_equals(other._class()).ifFalse_(block(function () {                nonLocalReturn(_false);            }));            this.size()._equals(other.size()).ifFalse_(block(function () {                nonLocalReturn(_false);            }));            this.with_do_(other, block(function (e1, e2) {                return (e1.literalEqual_(e2)).ifFalse_(block(function () {                    nonLocalReturn(_false);                }));            }));            return _true;        },        preMultiplyByMatrix_: function (m) {            m.columnCount()._equals(this.size()).ifFalse_(block(function () {                return this.error_(string("dimensions do not conform"));            }));            return (number(1).to_(m.rowCount())).collect_(block(function (row) {                var s;                s = number(0);                number(1).to_do_(this.size(), block(function (k) {                    return s = (m.at_at_(row, k))._times((this.at_(k)))._plus(s);                }));                return s;            }));        },        copyWithDependent_: function (newElement) {            this.size()._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(DependentsArray.with_(newElement));            }));            return this.copyWith_(newElement);        },        storeOnStream_: function (aStream) {            this.isLiteral().ifTrue_ifFalse_(block(function () {                return this._super.storeOnStream_(aStream);            }), block(function () {                return aStream.writeCollection_(this);            }));            return this;        },        preMultiplyByArray_: function (a) {            this.size()._equals(number(1)).ifFalse_(block(function () {                return this.error_(string("dimensions do not conform"));            }));            return a._times(this.first());        },        elementsForwardIdentityTo_copyHash_: function (otherArray, copyHash) {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        objectForDataStream_: function (refStrm) {            var dp;            this._equals_equals((TextConstants.at_(string("DefaultTabsArray")))).ifTrue_(block(function () {                dp = DiskProxy.global_selector_args_(string("TextConstants"), string("at:"), array([string("DefaultTabsArray")]));                refStrm.replace_with_(this, dp);                nonLocalReturn(dp);            }));            this._equals_equals((TextConstants.at_(string("DefaultMarginTabsArray")))).ifTrue_(block(function () {                dp = DiskProxy.global_selector_args_(string("TextConstants"), string("at:"), array([string("DefaultMarginTabsArray")]));                refStrm.replace_with_(this, dp);                nonLocalReturn(dp);            }));            return this._super.objectForDataStream_(refStrm);        },        elementsForwardIdentityTo_: function (otherArray) {            primitiveDeclaration();            this.primitiveFailed();            return this;        },        replaceFrom_to_with_startingAt_: function (start, stop, replacement, repStart) {            this._super.replaceFrom_to_with_startingAt_(start, stop, replacement, repStart);            return this;        },        atWrap_: function (index) {            primitiveDeclaration();            return this.at_(index._minus(number(1))._backslash_backslash(this.size())._plus(number(1)));        },        hasLiteralThorough_: function (literal) {            var lit;            number(1).to_do_(this.size(), block(function (index) {                (lit = this.at_(index))._equals_equals(literal).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));                return (lit.hasLiteralThorough_(literal)).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            return _false;        },        evalStrings: function () {            return this.collect_(block(function (each) {                var it;                it = each;                each._equals_equals(string("true")).ifTrue_(block(function () {                    return it = _true;                }));                each._equals_equals(string("false")).ifTrue_(block(function () {                    return it = _false;                }));                each._equals_equals(string("nil")).ifTrue_(block(function () {                    return it = nil;                }));                (each.isString().and_(block(function () {                    return each.isSymbol().not();                }))).ifTrue_(block(function () {                    return it = Compiler.evaluate_(each);                }));                each._class()._equals_equals(_Array).ifTrue_(block(function () {                    return it = it.evalStrings();                }));                return it;            }));        },        hasLiteralSuchThat_: function (testBlock) {            var lit;            number(1).to_do_(this.size(), block(function (index) {                (testBlock.value_((lit = this.at_(index)))).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));                return (lit.hasLiteralSuchThat_(testBlock)).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            return _false;        }    }});Class("UndefinedObject", {    superclass: _Object,    classMethods: {        initializedInstance: function () {            return nil;        },        allInstancesDo_: function (aBlock) {            aBlock.value_(nil);            return this;        },        _new: function () {            this.error_(string("You may not create any more undefined objects--use nil"));            return this;        }    },    instanceMethods: {        seasideUrl: function () {            return this;        },        asHttpResponseTo_: function (request) {            return HttpResponse.status_contents_(string("notFound"), string("The object you requested was not found on this server."));        },        setDescriptionInMetacelloVersion_: function (aMetacelloVersionSpec) {            aMetacelloVersionSpec.setDescription_(this);            return this;        },        initialize: function () {            ScriptingSystem.addCustomEventFor_named_help_targetMorphClass_(this, string("scrolledIntoView"), string("when I am scrolled into view in a GeeMailMorph"), Morph);            ScriptingSystem.addCustomEventFor_named_help_targetMorphClass_(this, string("scrolledOutOfView"), string("when I am scrolled out of view in a GeeMailMorph"), Morph);            return this;        },        asMetacelloVersionNumber: function () {            return MetacelloVersionNumber.fromString_(string(""));        },        ifNotNil_: function (aBlock) {            return this;        },        ifNil_ifNotNil_: function (nilBlock, ifNotNilBlock) {            return nilBlock.value();        },        subclassesDoGently_: function (aBlock) {            return Class.subclassesDoGently_(block(function (cl) {                return cl.isMeta().ifTrue_(block(function () {                    return aBlock.value_(cl.soleInstance());                }));            }));        },        ifNotNilDo_: function (aBlock) {            return this;        },        ifNotNilDo_ifNil_: function (ifNotNilBlock, nilBlock) {            return nilBlock.value();        },        release: function () {            return this;        },        removeObsoleteSubclass_: function (aClass) {            return this;        },        addSubclass_: function (aClass) {            return this;        },        asn1Tag: function () {            return number(5);        },        clone: function () {            return this;        },        jsonOn_: function (aStream) {            this.javascriptOn_(aStream);            return this;        },        isNil: function () {            return _true;        },        haltIfNil: function () {            this.halt();            return this;        },        ifNil_ifNotNilDo_: function (nilBlock, ifNotNilBlock) {            return nilBlock.value();        },        subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_: function (nameOfClass, instVarNames, classVarNames, poolDictnames, category) {            (function () {                var cascadeReceiver$ = Transcript;                cascadeReceiver$.show_((string("Attempt to create ")._comma(nameOfClass)._comma(string(" as a subclass of nil.  Possibly a class is being loaded before its superclass."))));                return cascadeReceiver$.cr();            }).apply(this);            return ProtoObject.subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(nameOfClass, instVarNames, classVarNames, poolDictnames, category);        },        handleSignal_: function (exception) {            return exception.resumeUnchecked_(exception.defaultAction());        },        newTileMorphRepresentative: function () {            return UndescribedTile._new();        },        setProject_withInMetacelloConfig_: function (aString, aMetacelloConfig) {            aMetacelloConfig.setProject_withString_(aString, this);            return this;        },        setAuthorInMetacelloVersion_: function (aMetacelloVersionSpec) {            aMetacelloVersionSpec.setAuthor_(this);            return this;        },        asAsn1Bytes: function () {            return ASN1Stream.encode_(this);        },        removeSubclass_: function (aClass) {            return this;        },        javascriptOn_: function (aStream) {            aStream.nextPutAll_(string("null"));            return this;        },        ifNotNil_ifNil_: function (ifNotNilBlock, nilBlock) {            return nilBlock.value();        },        environment: function () {            return this._class().environment();        },        renderOn_: function (html) {            return this;        },        allSuperclassesDo_: function (aBlockContext) {            this.shouldBeImplemented();            return this;        },        printOn_: function (aStream) {            aStream.nextPutAll_(string("nil"));            return this;        },        ifNil_: function (aBlock) {            return aBlock.value();        },        veryDeepCopyWith_: function (deepCopier) {            return this;        },        parserClass: function () {            return Compiler.parserClass();        },        asSetElement: function () {            return SetElement.withNil();        },        canHandleSignal_: function (exception) {            return _false;        },        print_on_: function (anObject, aStream) {            return this;        },        subclassesDo_: function (aBlock) {            return Class.subclassesDo_(block(function (cl) {                return cl.isMeta().ifTrue_(block(function () {                    return aBlock.value_(cl.soleInstance());                }));            }));        },        storeOn_: function (aStream) {            aStream.nextPutAll_(string("nil"));            return this;        },        deepCopy: function () {            return this;        },        subclassDefinerClass: function () {            return Compiler;        },        isLiteral: function () {            return _true;        },        addDependent_: function (ignored) {            this.error_(string("Nil should not have dependents"));            return this;        },        notNil: function () {            return _false;        },        from3DS_: function (aDictionary) {            return aDictionary;        },        shallowCopy: function () {            return this;        },        setBlessingInMetacelloVersion_: function (aMetacelloVersionSpec) {            aMetacelloVersionSpec.setBlessing_(this);            return this;        },        setTimestampInMetacelloVersion_: function (aMetacelloVersionSpec) {            aMetacelloVersionSpec.setTimestamp_(this);            return this;        },        isClassBrowser: function () {            return _false;        },        suspend: function () {            Processor.terminateActive();            return this;        },        encodeOn_: function (aDocument) {            return this;        },        literalScannedAs_notifying_: function (scannedLiteral, requestor) {            return scannedLiteral;        },        isEmptyOrNil: function () {            return _true;        },        typeOfClass: function () {            return string("normal");        },        subclasses: function () {            var classList;            classList = WriteStream.on_(_Array._new());            this.subclassesDo_(block(function (_class) {                return classList.nextPut_(_class);            }));            return classList.contents();        }    }});Class("Point", {    superclass: _Object,    instanceVariables: [ "$x", "$y" ],    classMethods: {        fromUserWithCursor_: function (aCursor) {            Sensor.waitNoButton();            aCursor.showWhile_(block(function () {                return Sensor.waitButton();            }));            return Sensor.cursorPoint();        },        x_y_: function (xInteger, yInteger) {            return this.basicNew().setX_setY_(xInteger, yInteger);        },        fromUser: function () {            Sensor.waitNoButton();            Cursor.crossHair().show();            Sensor.waitButton();            Cursor.normal().show();            return Sensor.cursorPoint();        },        r_degrees_: function (rho, degrees) {            return this.basicNew().setR_degrees_(rho, degrees);        }    },    instanceMethods: {        _less_equals: function (aPoint) {            return this.$x._less_equals(aPoint.x()).and_(block(function () {                return this.$y._less_equals(aPoint.y());            }));        },        to_intersects_to_: function (end1, start2, end2) {            var start1; var sideStart; var sideEnd;            start1 = this;            (((start1._equals(start2).or_(block(function () {                return end1._equals(end2);            }))).or_(block(function () {                return start1._equals(end2);            }))).or_(block(function () {                return start2._equals(end1);            }))).ifTrue_(block(function () {                nonLocalReturn(_true);            }));            sideStart = start1.to_sideOf_(end1, start2);            sideEnd = start1.to_sideOf_(end1, end2);            sideStart._equals(sideEnd).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            sideStart = start2.to_sideOf_(end2, start1);            sideEnd = start2.to_sideOf_(end2, end1);            sideStart._equals(sideEnd).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            return _true;        },        x: function () {            return this.$x;        },        adaptToCollection_andSend_: function (rcvr, selector) {            return rcvr.collect_(block(function (element) {                return element.perform_with_(selector, this);            }));        },        transformedBy_: function (aTransform) {            return aTransform.transformPoint_(this);        },        theta: function () {            var tan; var theta;            this.$x._equals(number(0)).ifTrue_ifFalse_(block(function () {                return this.$y._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                    nonLocalReturn(number(1.570796326794897));                }), block(function () {                    nonLocalReturn(number(4.71238898038469));                }));            }), block(function () {                tan = this.$y.asFloat()._slash(this.$x.asFloat());                theta = tan.arcTan();                return this.$x._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                    return this.$y._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                        nonLocalReturn(theta);                    }), block(function () {                        nonLocalReturn(number(6.283185307179586)._plus(theta));                    }));                }), block(function () {                    nonLocalReturn(number(3.141592653589793)._plus(theta));                }));            }));            return this;        },        quadrantOf_: function (otherPoint) {            return this.$x._less_equals(otherPoint.x()).ifTrue_ifFalse_(block(function () {                return this.$y._less(otherPoint.y()).ifTrue_ifFalse_(block(function () {                    return number(1);                }), block(function () {                    return number(4);                }));            }), block(function () {                return this.$y._less_equals(otherPoint.y()).ifTrue_ifFalse_(block(function () {                    return number(2);                }), block(function () {                    return number(3);                }));            }));        },        setR_degrees_: function (rho, degrees) {            var radians;            radians = degrees.asFloat().degreesToRadians();            this.$x = rho.asFloat()._times(radians.cos());            this.$y = rho.asFloat()._times(radians.sin());            return this;        },        onLineFrom_to_within_: function (p1, p2, epsilon) {            p1.x()._less(p2.x()).ifTrue_ifFalse_(block(function () {                return ((this.$x._less((p1.x()._minus(epsilon)))).or_(block(function () {                    return this.$x._greater((p2.x()._plus(epsilon)));                }))).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));            }), block(function () {                return ((this.$x._less((p2.x()._minus(epsilon)))).or_(block(function () {                    return this.$x._greater((p1.x()._plus(epsilon)));                }))).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));            }));            p1.y()._less(p2.y()).ifTrue_ifFalse_(block(function () {                return ((this.$y._less((p1.y()._minus(epsilon)))).or_(block(function () {                    return this.$y._greater((p2.y()._plus(epsilon)));                }))).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));            }), block(function () {                return ((this.$y._less((p2.y()._minus(epsilon)))).or_(block(function () {                    return this.$y._greater((p1.y()._plus(epsilon)));                }))).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));            }));            return (this.dist_((this.nearestPointAlongLineFrom_to_(p1, p2))))._less_equals(epsilon);        },        _less: function (aPoint) {            return this.$x._less(aPoint.x()).and_(block(function () {                return this.$y._less(aPoint.y());            }));        },        normal: function () {            var n; var d;            n = this.$y.negated()._at(this.$x);            (d = (n.x()._times(n.x())._plus((n.y()._times(n.y())))))._equals(number(0)).ifTrue_(block(function () {                nonLocalReturn(number(-1)._at(number(0)));            }));            return n._slash(d.sqrt());        },        asPoint: function () {            return this;        },        scaleFrom_to_: function (rect1, rect2) {            return rect2.topLeft()._plus((((this.$x._minus(rect1.left()))._times(rect2.width())._slash_slash(rect1.width()))._at(((this.$y._minus(rect1.top()))._times(rect2.height())._slash_slash(rect1.height())))));        },        y: function () {            return this.$y;        },        nearestPointOnLineFrom_to_: function (p1, p2) {            return (this.nearestPointAlongLineFrom_to_(p1, p2)).adhereTo_((p1.rect_(p2)));        },        _backslash_backslash: function (arg) {            arg.isPoint().ifTrue_(block(function () {                nonLocalReturn((this.$x._backslash_backslash(arg.x()))._at((this.$y._backslash_backslash(arg.y()))));            }));            return arg.adaptToPoint_andSend_(this, string("\\\\"));        },        bitShiftPoint_: function (bits) {            this.$x = this.$x.bitShift_(bits);            this.$y = this.$y.bitShift_(bits);            return this;        },        sideOf_: function (otherPoint) {            var side;            side = (this.crossProduct_(otherPoint)).sign();            return array([string("right"), string("center"), string("left")]).at_(side._plus(number(2)));        },        ceiling: function () {            (this.$x.isInteger().and_(block(function () {                return this.$y.isInteger();            }))).ifTrue_(block(function () {                nonLocalReturn(this);            }));            return this.$x.ceiling()._at(this.$y.ceiling());        },        scaleTo_: function (anExtent) {            var factor; var sX; var sY;            factor = number(3.0).reciprocal();            sX = anExtent.x()._slash(this.x().asFloat());            sY = anExtent.y()._slash(this.y().asFloat());            sX._equals(sY).ifTrue_(block(function () {                nonLocalReturn(sX._at(sY));            }));            return sX._less(sY).ifTrue_ifFalse_(block(function () {                return sX._at((sX.max_(sY._times(factor))));            }), block(function () {                return (sY.max_(sX._times(factor)))._at(sY);            }));        },        grid_: function (aPoint) {            var newX; var newY;            newX = this.$x._plus((aPoint.x()._slash_slash(number(2)))).truncateTo_(aPoint.x());            newY = this.$y._plus((aPoint.y()._slash_slash(number(2)))).truncateTo_(aPoint.y());            return newX._at(newY);        },        _slash_slash: function (arg) {            arg.isPoint().ifTrue_(block(function () {                nonLocalReturn((this.$x._slash_slash(arg.x()))._at((this.$y._slash_slash(arg.y()))));            }));            return arg.adaptToPoint_andSend_(this, string("//"));        },        asIntegerPoint: function () {            return this.$x.asInteger()._at(this.$y.asInteger());        },        abs: function () {            return this.$x.abs()._at(this.$y.abs());        },        roundDownTo_: function (grid) {            var gridPoint;            gridPoint = grid.asPoint();            return (this.$x.roundDownTo_(gridPoint.x()))._at((this.$y.roundDownTo_(gridPoint.y())));        },        leftRotated: function () {            return this.$y._at(this.$x.negated());        },        isPoint: function () {            return _true;        },        encodePostscriptOn_: function (aStream) {            aStream.writePoint_(this);            return this;        },        r: function () {            return (this.dotProduct_(this)).sqrt();        },        isInsideCircle_with_with_: function (a, b, c) {            return (a.dotProduct_(a))._times((b.triangleArea_with_(c, this)))._minus(((b.dotProduct_(b))._times((a.triangleArea_with_(c, this)))))._plus(((c.dotProduct_(c))._times((a.triangleArea_with_(b, this)))))._minus(((this.dotProduct_(this))._times((a.triangleArea_with_(b, c)))))._greater(number(0.0));        },        transposed: function () {            return this.$y._at(this.$x);        },        basicType: function () {            return string("Point");        },        _greater_equals: function (aPoint) {            return this.$x._greater_equals(aPoint.x()).and_(block(function () {                return this.$y._greater_equals(aPoint.y());            }));        },        negated: function () {            return (number(0)._minus(this.$x))._at((number(0)._minus(this.$y)));        },        translateBy_: function (delta) {            return (delta.x()._plus(this.$x))._at((delta.y()._plus(this.$y)));        },        rotateBy_centerAt_: function (direction, c) {            var offset;            offset = this._minus(c);            direction._equals_equals(string("right")).ifTrue_(block(function () {                nonLocalReturn((offset.y().negated()._at(offset.x()))._plus(c));            }));            direction._equals_equals(string("left")).ifTrue_(block(function () {                nonLocalReturn((offset.y()._at(offset.x().negated()))._plus(c));            }));            direction._equals_equals(string("pi")).ifTrue_(block(function () {                nonLocalReturn(c._minus(offset));            }));            this.error_(string("unrecognizable direction"));            return this;        },        squaredDistanceTo_: function (aPoint) {            var delta;            delta = aPoint._minus(this);            return delta.dotProduct_(delta);        },        reciprocal: function () {            return this.$x.reciprocal()._at(this.$y.reciprocal());        },        flipBy_centerAt_: function (direction, c) {            direction._equals_equals(string("vertical")).ifTrue_(block(function () {                nonLocalReturn(this.$x._at((c.y()._times(number(2))._minus(this.$y))));            }));            direction._equals_equals(string("horizontal")).ifTrue_(block(function () {                nonLocalReturn((c.x()._times(number(2))._minus(this.$x))._at(this.$y));            }));            this.error_(string("unrecognizable direction"));            return this;        },        rightRotated: function () {            return this.$y.negated()._at(this.$x);        },        corner_: function (aPoint) {            return Rectangle.origin_corner_(this, aPoint);        },        octantOf_: function (otherPoint) {            var quad; var moreHoriz;            (this.$x._equals(otherPoint.x()).and_(block(function () {                return this.$y._greater(otherPoint.y());            }))).ifTrue_(block(function () {                nonLocalReturn(number(6));            }));            (this.$y._equals(otherPoint.y()).and_(block(function () {                return this.$x._less(otherPoint.x());            }))).ifTrue_(block(function () {                nonLocalReturn(number(8));            }));            quad = this.quadrantOf_(otherPoint);            moreHoriz = (this.$x._minus(otherPoint.x())).abs()._greater_equals((this.$y._minus(otherPoint.y())).abs());            (quad.even().eqv_(moreHoriz)).ifTrue_ifFalse_(block(function () {                nonLocalReturn(quad._times(number(2)));            }), block(function () {                nonLocalReturn(quad._times(number(2))._minus(number(1)));            }));            return this;        },        scaleBy_: function (factor) {            return (factor.x()._times(this.$x))._at((factor.y()._times(this.$y)));        },        asFloatPoint: function () {            return this.$x.asFloat()._at(this.$y.asFloat());        },        normalized: function () {            var r;            r = ((this.$x._times(this.$x))._plus((this.$y._times(this.$y)))).sqrt();            return (this.$x._slash(r))._at((this.$y._slash(r)));        },        adaptToNumber_andSend_: function (rcvr, selector) {            return rcvr._at(rcvr).perform_with_(selector, this);        },        asNonFractionalPoint: function () {            (this.$x.isFraction().or_(block(function () {                return this.$y.isFraction();            }))).ifTrue_(block(function () {                nonLocalReturn(this.$x.asFloat()._at(this.$y.asFloat()));            }));            return this;        },        rounded: function () {            (this.$x.isInteger().and_(block(function () {                return this.$y.isInteger();            }))).ifTrue_(block(function () {                nonLocalReturn(this);            }));            return this.$x.rounded()._at(this.$y.rounded());        },        _slash: function (arg) {            arg.isPoint().ifTrue_(block(function () {                nonLocalReturn((this.$x._slash(arg.x()))._at((this.$y._slash(arg.y()))));            }));            return arg.adaptToPoint_andSend_(this, string("/"));        },        rotateBy_about_: function (angle, center) {            var p; var r; var theta;            p = this._minus(center);            r = p.r();            theta = angle.asFloat()._minus(p.theta());            return (center.x().asFloat()._plus((r._times(theta.cos()))))._at((center.y().asFloat()._minus((r._times(theta.sin())))));        },        onLineFrom_to_: function (p1, p2) {            return this.onLineFrom_to_within_(p1, p2, number(2));        },        adaptToString_andSend_: function (rcvr, selector) {            return rcvr.asNumber().perform_with_(selector, this);        },        bearingToPoint_: function (anotherPoint) {            var deltaX; var deltaY;            deltaX = anotherPoint.x()._minus(this.$x);            deltaY = anotherPoint.y()._minus(this.$y);            deltaX.abs()._less(number(0.001)).ifTrue_(block(function () {                nonLocalReturn(deltaY._greater(number(0)).ifTrue_ifFalse_(block(function () {                    return number(180);                }), block(function () {                    return number(0);                })));            }));            return ((deltaX._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                return number(90);            }), block(function () {                return number(270);            })))._minus(((deltaY._slash(deltaX)).arcTan().negated().radiansToDegrees()))).rounded();        },        sortsBefore_: function (otherPoint) {            return this.$y._equals(otherPoint.y()).ifTrue_ifFalse_(block(function () {                return this.$x._less_equals(otherPoint.x());            }), block(function () {                return this.$y._less_equals(otherPoint.y());            }));        },        dist_: function (aPoint) {            var dx; var dy;            dx = aPoint.x()._minus(this.$x);            dy = aPoint.y()._minus(this.$y);            return ((dx._times(dx))._plus((dy._times(dy)))).sqrt();        },        closeTo_: function (aPoint) {            return (this.$x.closeTo_(aPoint.x())).and_(block(function () {                return this.$y.closeTo_(aPoint.y());            }));        },        sign: function () {            return (this.$x.sign()._at(this.$y.sign()));        },        javascriptOn_: function (aStream) {            (function () {                var cascadeReceiver$ = aStream;                cascadeReceiver$.nextPut_(character("["));                cascadeReceiver$.javascript_(this.x());                cascadeReceiver$.nextPut_(character(","));                cascadeReceiver$.javascript_(this.y());                return cascadeReceiver$.nextPut_(character("]"));            }).apply(this);            return this;        },        _plus: function (arg) {            arg.isPoint().ifTrue_(block(function () {                nonLocalReturn((this.$x._plus(arg.x()))._at((this.$y._plus(arg.y()))));            }));            return arg.adaptToPoint_andSend_(this, string("+"));        },        _minus: function (arg) {            arg.isPoint().ifTrue_(block(function () {                nonLocalReturn((this.$x._minus(arg.x()))._at((this.$y._minus(arg.y()))));            }));            return arg.adaptToPoint_andSend_(this, string("-"));        },        min_max_: function (aMin, aMax) {            return (this.min_(aMin)).max_(aMax);        },        degrees: function () {            var tan; var theta;            this.$x._equals(number(0)).ifTrue_ifFalse_(block(function () {                return this.$y._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                    nonLocalReturn(number(90.0));                }), block(function () {                    nonLocalReturn(number(270.0));                }));            }), block(function () {                tan = this.$y.asFloat()._slash(this.$x.asFloat());                theta = tan.arcTan();                return this.$x._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                    return this.$y._greater_equals(number(0)).ifTrue_ifFalse_(block(function () {                        nonLocalReturn(theta.radiansToDegrees());                    }), block(function () {                        nonLocalReturn(number(360.0)._plus(theta.radiansToDegrees()));                    }));                }), block(function () {                    nonLocalReturn(number(180.0)._plus(theta.radiansToDegrees()));                }));            }));            return this;        },        floor: function () {            (this.$x.isInteger().and_(block(function () {                return this.$y.isInteger();            }))).ifTrue_(block(function () {                nonLocalReturn(this);            }));            return this.$x.floor()._at(this.$y.floor());        },        printOn_: function (aStream) {            this.$x.printOn_(aStream);            aStream.nextPut_(character("@"));            this.$y.negative().ifTrue_(block(function () {                return aStream.space();            }));            this.$y.printOn_(aStream);            return this;        },        veryDeepCopyWith_: function (deepCopier) {            return this;        },        truncated: function () {            (this.$x.isInteger().and_(block(function () {                return this.$y.isInteger();            }))).ifTrue_(block(function () {                nonLocalReturn(this);            }));            return this.$x.truncated()._at(this.$y.truncated());        },        isIntegerPoint: function () {            return this.$x.isInteger().and_(block(function () {                return this.$y.isInteger();            }));        },        guarded: function () {            this.max_(number(1)._at(number(1)));            return this;        },        nearestPointAlongLineFrom_to_: function (p1, p2) {            var x21; var y21; var t; var x1; var y1;            p1.x()._equals(p2.x()).ifTrue_(block(function () {                nonLocalReturn(p1.x()._at(this.$y));            }));            p1.y()._equals(p2.y()).ifTrue_(block(function () {                nonLocalReturn(this.$x._at(p1.y()));            }));            x1 = p1.x().asFloat();            y1 = p1.y().asFloat();            x21 = p2.x().asFloat()._minus(x1);            y21 = p2.y().asFloat()._minus(y1);            t = ((this.$y.asFloat()._minus(y1)._slash(x21))._plus((this.$x.asFloat()._minus(x1)._slash(y21))))._slash(((x21._slash(y21))._plus((y21._slash(x21)))));            return (x1._plus((t._times(x21))))._at((y1._plus((t._times(y21)))));        },        truncateTo_: function (grid) {            var gridPoint;            gridPoint = grid.asPoint();            return (this.$x.truncateTo_(gridPoint.x()))._at((this.$y.truncateTo_(gridPoint.y())));        },        fourNeighbors: function () {            return _Array.with_with_with_with_(this._plus((number(1)._at(number(0)))), this._plus((number(0)._at(number(1)))), this._plus((number(-1)._at(number(0)))), this._plus((number(0)._at(number(-1)))));        },        eightNeighbors: function () {            return (_Array.with_with_with_with_(this._plus((number(1)._at(number(0)))), this._plus((number(1)._at(number(1)))), this._plus((number(0)._at(number(1)))), this._plus((number(-1)._at(number(1))))))._comma((_Array.with_with_with_with_(this._plus((number(-1)._at(number(0)))), this._plus((number(-1)._at(number(-1)))), this._plus((number(0)._at(number(-1)))), this._plus((number(1)._at(number(-1)))))));        },        hash: function () {            return (this.$x.hash().hashMultiply()._plus(this.$y.hash())).hashMultiply();        },        _greater: function (aPoint) {            return this.$x._greater(aPoint.x()).and_(block(function () {                return this.$y._greater(aPoint.y());            }));        },        extent_: function (aPoint) {            return Rectangle.origin_extent_(this, aPoint);        },        deepCopy: function () {            return this.$x.deepCopy()._at(this.$y.deepCopy());        },        storeOn_: function (aStream) {            aStream.nextPut_(character("("));            this.printOn_(aStream);            aStream.nextPut_(character(")"));            return this;        },        setX_setY_: function (xValue, yValue) {            this.$x = xValue;            this.$y = yValue;            return this;        },        min_: function (aPoint) {            return (this.$x.min_(aPoint.x()))._at((this.$y.min_(aPoint.y())));        },        rect_: function (aPoint) {            return Rectangle.origin_corner_((this.min_(aPoint)), (this.max_(aPoint)));        },        roundTo_: function (grid) {            var gridPoint;            gridPoint = grid.asPoint();            return (this.$x.roundTo_(gridPoint.x()))._at((this.$y.roundTo_(gridPoint.y())));        },        max_: function (aPoint) {            return (this.$x.max_(aPoint.x()))._at((this.$y.max_(aPoint.y())));        },        roundUpTo_: function (grid) {            var gridPoint;            gridPoint = grid.asPoint();            return (this.$x.roundUpTo_(gridPoint.x()))._at((this.$y.roundUpTo_(gridPoint.y())));        },        adhereTo_: function (aRectangle) {            (aRectangle.containsPoint_(this)).ifTrue_(block(function () {                nonLocalReturn(this);            }));            return ((this.$x.max_(aRectangle.left())).min_(aRectangle.right()))._at(((this.$y.max_(aRectangle.top())).min_(aRectangle.bottom())));        },        crossProduct_: function (aPoint) {            return (this.$x._times(aPoint.y()))._minus((this.$y._times(aPoint.x())));        },        interpolateTo_at_: function (end, amountDone) {            return this._plus(((end._minus(this))._times(amountDone)));        },        _equals: function (aPoint) {            this.species()._equals(aPoint.species()).ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.$x._equals(aPoint.x()).and_(block(function () {                    return this.$y._equals(aPoint.y());                })));            }), block(function () {                nonLocalReturn(_false);            }));            return this;        },        triangleArea_with_: function (b, c) {            return b.x()._minus(this.x())._times((c.y()._minus(this.y())))._minus((b.y()._minus(this.y())._times((c.x()._minus(this.x())))));        },        dotProduct_: function (aPoint) {            return (this.$x._times(aPoint.x()))._plus((this.$y._times(aPoint.y())));        },        encodeForRemoteCanvas: function () {            var encoded;            CanvasEncoder.at_count_(number(3), number(1));            encoded = String.new_(number(8));            encoded.putInteger32_at_(this.$x.asInteger(), number(1));            encoded.putInteger32_at_(this.$y.asInteger(), number(5));            return encoded;        },        insideTriangle_with_with_: function (p1, p2, p3) {            var p0; var b0; var b1; var b2; var b3;            p0 = this;            b0 = ((p2.x()._minus(p1.x()))._times((p3.y()._minus(p1.y()))))._minus(((p3.x()._minus(p1.x()))._times((p2.y()._minus(p1.y())))));            b0.isZero().ifTrue_(block(function () {                nonLocalReturn(_false);            }));            b0 = number(1.0)._slash(b0);            b1 = (((p2.x()._minus(p0.x()))._times((p3.y()._minus(p0.y()))))._minus(((p3.x()._minus(p0.x()))._times((p2.y()._minus(p0.y()))))))._times(b0);            b2 = (((p3.x()._minus(p0.x()))._times((p1.y()._minus(p0.y()))))._minus(((p1.x()._minus(p0.x()))._times((p3.y()._minus(p0.y()))))))._times(b0);            b3 = (((p1.x()._minus(p0.x()))._times((p2.y()._minus(p0.y()))))._minus(((p2.x()._minus(p0.x()))._times((p1.y()._minus(p0.y()))))))._times(b0);            b1._less(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            b2._less(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            b3._less(number(0.0)).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            return _true;        },        fourDirections: function () {            return _Array.with_with_with_with_(this.leftRotated(), this.negated(), this.rightRotated(), this);        },        _times: function (arg) {            arg.isPoint().ifTrue_(block(function () {                nonLocalReturn((this.$x._times(arg.x()))._at((this.$y._times(arg.y()))));            }));            return arg.adaptToPoint_andSend_(this, string("*"));        },        isZero: function () {            return this.$x.isZero().and_(block(function () {                return this.$y.isZero();            }));        },        to_sideOf_: function (end, otherPoint) {            return end._minus(this).sideOf_(otherPoint._minus(this));        }    }});Class("Stream", {    superclass: _Object,    classMethods: {        _new: function () {            this.error_(string("Streams are created with on: and with:"));            return this;        }    },    instanceMethods: {        next_put_: function (anInteger, anObject) {            anInteger.timesRepeat_(block(function () {                return this.nextPut_(anObject);            }));            return anObject;        },        printHtml_: function (anObject) {            anObject.printHtmlOn_(this);            return this;        },        write_: function (encodedObject) {            return encodedObject.putOn_(this);        },        close: function () {            return this;        },        binary: function () {            return this;        },        print_: function (anObject) {            anObject.printOn_(this);            return this;        },        next: function () {            this.subclassResponsibility();            return this;        },        basicNextPut_: function (anObject) {            return this.nextPut_(anObject);        },        asHttpResponseTo_: function (request) {            return HttpResponse.fromStream_(this);        },        isMessageStream: function () {            return _false;        },        _less_less: function (items) {            items.putOn_(this);            return this;        },        javascript_: function (anObject) {            anObject.javascriptOn_(this);            return this;        },        isStream: function () {            return _true;        },        printOn_: function (stream) {            this._super.printOn_(stream);            stream.space();            this.contents().printOn_(stream);            return this;        },        nextPutAll_: function (aCollection) {            aCollection.do_(block(function (v) {                return this.nextPut_(v);            }));            return aCollection;        },        isTypeHTTP: function () {            return _false;        },        sleep: function () {            return this;        },        basicNextPutAll_: function (aCollection) {            return this.nextPutAll_(aCollection);        },        isTranscriptStream: function () {            return _false;        },        openReadOnly: function () {            return this;        },        nextMatchFor_: function (anObject) {            return anObject._equals(this.next());        },        localName: function () {            return string("a stream");        },        atEnd: function () {            this.subclassResponsibility();            return this;        },        nextPut_: function (anObject) {            this.subclassResponsibility();            return this;        },        next_: function (anInteger) {            var aCollection;            aCollection = OrderedCollection._new();            anInteger.timesRepeat_(block(function () {                return aCollection.addLast_(this.next());            }));            return aCollection;        },        json_: function (anObject) {            anObject.jsonOn_(this);            return this;        },        basicNext: function () {            return this.next();        },        nextMatchAll_: function (aColl) {            var save;            save = this.position();            aColl.do_(block(function (each) {                return (this.next())._equals(each).ifFalse_(block(function () {                    this.position_(save);                    nonLocalReturn(_false);                }));            }));            return _true;        },        nextWordsPutAll_: function (aCollection) {            aCollection._class().isPointers()._pipe(aCollection._class().isWords().not()).ifTrue_(block(function () {                nonLocalReturn(this.error_(aCollection._class().name()._comma(string(" is not word-like"))));            }));            number(1).to_do_(aCollection.basicSize(), block(function (i) {                return this.nextNumber_put_(number(4), (aCollection.basicAt_(i)));            }));            return aCollection;        },        do_: function (aBlock) {            block(function () {                return this.atEnd();            }).whileFalse_(block(function () {                return aBlock.value_(this.next());            }));            return this;        },        flush: function () {            return this;        },        readOnly: function () {            return this;        },        upToEnd: function () {            var elements;            elements = OrderedCollection._new();            block(function () {                return this.atEnd();            }).whileFalse_(block(function () {                return elements.add_(this.next());            }));            return elements;        },        contents: function () {            this.subclassResponsibility();            return this;        },        closed: function () {            return _false;        }    }});Class("PositionableStream", {    superclass: Stream,    instanceVariables: [ "$collection", "$position", "$readLimit" ],    classMethods: {        on_from_to_: function (aCollection, firstIndex, lastIndex) {            return this.basicNew().on_((aCollection.copyFrom_to_(firstIndex, lastIndex)));        },        on_: function (aCollection) {            return this.basicNew().on_(aCollection);        }    },    instanceMethods: {        uint16: function () {            var n;            n = this.next();            n = (n.bitShift_(number(8)))._plus((this.next()));            return n;        },        upToAnyOf_: function (aCollection) {            return this.upToAnyOf_do_(aCollection, block(function (matchingObject) {;            }));        },        last: function () {            return this.$collection.at_(this.$position);        },        trailer: function () {            return this;        },        nextLine: function () {            this.atEnd().ifTrue_(block(function () {                nonLocalReturn(nil);            }));            return this.upToAnyOf_do_(CharacterSet.crlf(), block(function (_char) {                return _char._equals(Character.cr()).ifTrue_(block(function () {                    return this.peekFor_(Character.lf());                }));            }));        },        untilEnd_displayingProgress_: function (aBlock, aString) {            aString.displayProgressAt_from_to_during_(Sensor.cursorPoint(), number(0), this.size(), block(function (bar) {                return block(function () {                    return this.atEnd();                }).whileFalse_(block(function () {                    bar.value_(this.position());                    return aBlock.value();                }));            }));            return this;        },        nextStringOld: function () {            var aString; var length;            length = this.next();            length._greater_equals(number(192)).ifTrue_(block(function () {                return length = (length._minus(number(192)))._times(number(256))._plus(this.next());            }));            aString = String.new_(length);            number(1).to_do_(length, block(function (ii) {                return aString.at_put_(ii, this.next().asCharacter());            }));            return aString;        },        next_into_: function (n, aCollection) {            return this.next_into_startingAt_(n, aCollection, number(1));        },        isBinary: function () {            return this.$collection._class()._equals_equals(ByteArray);        },        peekFor_: function (anObject) {            var nextObject;            this.atEnd().ifTrue_(block(function () {                nonLocalReturn(_false);            }));            nextObject = this.next();            anObject._equals(nextObject).ifTrue_(block(function () {                nonLocalReturn(_true);            }));            this.$position = this.$position._minus(number(1));            return _false;        },        backUpTo_: function (subCollection) {            var pattern; var startMatch;            pattern = ReadStream.on_(subCollection.reversed());            startMatch = nil;            block(function () {                return pattern.atEnd();            }).whileFalse_(block(function () {                this.position()._equals(number(0)).ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                this.skip_(number(-1));                (this.next())._equals((pattern.next())).ifTrue_ifFalse_(block(function () {                    return pattern.position()._equals(number(1)).ifTrue_(block(function () {                        return startMatch = this.position();                    }));                }), block(function () {                    pattern.position_(number(0));                    return startMatch.ifNotNil_(block(function () {                        this.position_(startMatch._minus(number(1)));                        return startMatch = nil;                    }));                }));                return this.skip_(number(-1));            }));            this.position_(startMatch);            return _true;        },        contentsOfEntireFile: function () {            return this.contents();        },        match_: function (subCollection) {            var pattern; var startMatch;            pattern = ReadStream.on_(subCollection);            startMatch = nil;            block(function () {                return pattern.atEnd();            }).whileFalse_(block(function () {                this.atEnd().ifTrue_(block(function () {                    nonLocalReturn(_false);                }));                return (this.next())._equals((pattern.next())).ifTrue_ifFalse_(block(function () {                    return pattern.position()._equals(number(1)).ifTrue_(block(function () {                        return startMatch = this.position();                    }));                }), block(function () {                    pattern.position_(number(0));                    return startMatch.ifNotNil_(block(function () {                        this.position_(startMatch);                        return startMatch = nil;                    }));                }));            }));            return _true;        },        fileInSilentlyAnnouncing_: function (announcement) {            var val; var chunk;            block(function () {                return this.atEnd();            }).whileFalse_(block(function () {                this.skipSeparators();                block(function () {                    return val = (this.peekFor_(character("!"))).ifTrue_ifFalse_(block(function () {                        return (Compiler.evaluate_logged_(this.nextChunk(), _false)).scanFrom_(this);                    }), block(function () {                        chunk = this.nextChunk();                        this.checkForPreamble_(chunk);                        return Compiler.evaluate_logged_(chunk, _true);                    }));                }).on_do_(InMidstOfFileinNotification, block(function (ex) {                    return ex.resume_(_true);                }));                return this.skipStyleChunk();            }));            this.close();            SmalltalkImage.current().logChange_(string("----End fileIn of ")._comma(this.name())._comma(string("----")));            this.flag_(string("ThisMethodShouldNotBeThere"));            SystemNavigation._new().allBehaviorsDo_(block(function (cl) {                return (function () {                    var cascadeReceiver$ = cl;                    cascadeReceiver$.removeSelectorSimply_(string("DoIt"));                    return cascadeReceiver$.removeSelectorSimply_(string("DoItIn:"));                }).apply(this);            }));            return val;        },        verbatim_: function (aString) {            return this.nextPutAll_(aString);        },        uint32_: function (anInteger) {            (anInteger._less(number(0)))._pipe((anInteger._greater_equals(number(4294967296)))).ifTrue_(block(function () {                return this.error_(string("outside unsigned 32-bit integer range"));            }));            this.nextPut_((anInteger.digitAt_(number(4))));            this.nextPut_((anInteger.digitAt_(number(3))));            this.nextPut_((anInteger.digitAt_(number(2))));            this.nextPut_((anInteger.digitAt_(number(1))));            return this;        },        int16_: function (anInteger) {            var n;            (anInteger._less(number(-32768)))._pipe((anInteger._greater_equals(number(32768)))).ifTrue_(block(function () {                return this.error_(string("outside 16-bit integer range"));            }));            anInteger._less(number(0)).ifTrue_ifFalse_(block(function () {                return n = number(65536)._plus(anInteger);            }), block(function () {                return n = anInteger;            }));            this.nextPut_((n.digitAt_(number(2))));            this.nextPut_((n.digitAt_(number(1))));            return this;        },        nextUtfString: function () {            return (this.next_(this.uint16())).asString();        },        nextNumber_put_: function (n, v) {            number(1).to_do_(n, block(function (i) {                return this.nextPut_((v.digitAt_(n._plus(number(1))._minus(i))));            }));            return v;        },        next_putAll_: function (anInteger, aCollection) {            return this.next_putAll_startingAt_(anInteger, aCollection, number(1));        },        reset: function () {            this.$position = number(0);            return this;        },        next_: function (anInteger) {            var newArray;            newArray = this.collectionSpecies().new_(anInteger);            number(1).to_do_(anInteger, block(function (index) {                return newArray.at_put_(index, this.next());            }));            return newArray;        },        resetContents: function () {            this.$position = number(0);            this.$readLimit = number(0);            return this;        },        nextWordsInto_: function (aBitmap) {            var blt; var pos; var source; var byteSize;            this.$collection._class().isBytes().ifFalse_(block(function () {                nonLocalReturn(this.next_into_startingAt_(aBitmap.size(), aBitmap, number(1)));            }));            byteSize = aBitmap.byteSize();            ((this.position().bitAnd_(number(3)))._equals(number(0)).and_(block(function () {                return (this.$collection.basicSize().bitAnd_(number(3)))._equals(number(0));            }))).ifTrue_ifFalse_(block(function () {                source = this.$collection;                pos = this.position();                return this.skip_(byteSize);            }), block(function () {                source = this.next_(byteSize);                return pos = number(0);            }));            blt = (BitBlt.current().toForm_((Form._new().hackBits_(aBitmap)))).sourceForm_((Form._new().hackBits_(source)));            blt.combinationRule_(Form.over());            (function () {                var cascadeReceiver$ = blt;                cascadeReceiver$.sourceX_(number(0));                cascadeReceiver$.sourceY_(pos._slash_slash(number(4)));                cascadeReceiver$.height_(byteSize._slash_slash(number(4)));                return cascadeReceiver$.width_(number(4));            }).apply(this);            (function () {                var cascadeReceiver$ = blt;                cascadeReceiver$.destX_(number(0));                return cascadeReceiver$.destY_(number(0));            }).apply(this);            blt.copyBits();            aBitmap.restoreEndianness();            return aBitmap;        },        fileInFor_announcing_: function (client, announcement) {            var val;            announcement.displayProgressAt_from_to_during_(Sensor.cursorPoint(), number(0), this.size(), block(function (bar) {                block(function () {                    return this.atEnd();                }).whileFalse_(block(function () {                    bar.value_(this.position());                    this.skipSeparators();                    block(function () {                        var chunk;                        return val = (this.peekFor_(character("!"))).ifTrue_ifFalse_(block(function () {                            return (Compiler.evaluate_for_logged_(this.nextChunk(), client, _false)).scanFrom_(this);                        }), block(function () {                            chunk = this.nextChunk();                            this.checkForPreamble_(chunk);                            return Compiler.evaluate_for_logged_(chunk, client, _true);                        }));                    }).on_do_(InMidstOfFileinNotification, block(function (ex) {                        return ex.resume_(_true);                    }));                    return this.atEnd().ifFalse_(block(function () {                        return this.skipStyleChunk();                    }));                }));                return this.close();            }));            SmalltalkImage.current().logChange_(string("----End fileIn of ")._comma(this.name())._comma(string("----")));            Smalltalk.forgetDoIts();            return val;        },        uint24_: function (anInteger) {            (anInteger._less(number(0)))._pipe((anInteger._greater_equals(number(16777216)))).ifTrue_(block(function () {                return this.error_(string("outside unsigned 24-bit integer range"));            }));            this.nextPut_((anInteger.digitAt_(number(3))));            this.nextPut_((anInteger.digitAt_(number(2))));            this.nextPut_((anInteger.digitAt_(number(1))));            return this;        },        fileIn: function () {            return this.fileInAnnouncing_(string("Reading ")._comma(this.name()));        },        parseLangTagFor_: function (aString) {            var string; var peek; var runsRaw; var pos;            string = aString;            pos = this.position();            peek = this.skipSeparatorsAndPeekNext();            peek._equals(character("]")).ifFalse_(block(function () {                this.position_(pos);                nonLocalReturn(string);            }));            (this.upTo_(character("[")))._equals(string("]lang")).ifTrue_ifFalse_(block(function () {                runsRaw = this.basicNextChunk();                return string = this.decodeString_andRuns_(aString, runsRaw);            }), block(function () {                return this.position_(pos);            }));            return string;        },        skip_: function (anInteger) {            this.position_(this.$position._plus(anInteger));            return this;        },        checkForPreamble_: function (chunk) {            ((chunk.beginsWith_(string("\"Change Set:"))).and_(block(function () {                return ChangeSet.current().preambleString()._equals_equals(nil);            }))).ifTrue_(block(function () {                return ChangeSet.current().preambleString_(chunk);            }));            ((chunk.beginsWith_(string("\"Postscript:"))).and_(block(function () {                return ChangeSet.current().postscriptString()._equals_equals(nil);            }))).ifTrue_(block(function () {                return ChangeSet.current().postscriptString_(chunk);            }));            return this;        },        string: function () {            var size;            size = this.uint16();            return (this.next_(size)).asString();        },        errorCantGoBack: function () {            this.error_(string(" CantGoBack "));            return this;        },        uint32: function () {            var n;            n = this.next();            n = (n.bitShift_(number(8)))._plus(this.next());            n = (n.bitShift_(number(8)))._plus(this.next());            n = (n.bitShift_(number(8)))._plus(this.next());            return n;        },        nextNumber_: function (n) {            var s;            s = number(0);            number(1).to_do_(n, block(function (i) {                return s = (s.bitShift_(number(8))).bitOr_(this.next().asInteger());            }));            return s.normalize();        },        nextLittleEndianNumber_: function (n) {            var bytes; var s;            bytes = this.next_(n);            s = number(0);            n.to_by_do_(number(1), number(-1), block(function (i) {                return s = (s.bitShift_(number(8))).bitOr_((bytes.at_(i)));            }));            return s;        },        padToNextLongPut_: function (_char) {            block(function () {                return this.position()._backslash_backslash(number(4))._equals(number(0));            }).whileFalse_(block(function () {                return this.nextPut_(_char);            }));            return this;        },        nextStringPut_: function (s) {            var length;            (length = s.size())._less(number(192)).ifTrue_ifFalse_(block(function () {                return this.nextPut_(length);            }), block(function () {                this.nextPut_((length.digitAt_(number(4)))._plus(number(192)));                this.nextPut_((length.digitAt_(number(3))));                this.nextPut_((length.digitAt_(number(2))));                return this.nextPut_((length.digitAt_(number(1))));            }));            this.nextPutAll_(s.asByteArray());            return s;        },        nextDelimited_: function (terminator) {            var out; var ch;            out = WriteStream.on_((String.new_(number(1000))));            this.atEnd().ifTrue_(block(function () {                nonLocalReturn(string(""));            }));            this.next()._equals_equals(terminator).ifFalse_(block(function () {                return this.skip_(number(-1));            }));            block(function () {                return (ch = this.next())._equals_equals(nil);            }).whileFalse_(block(function () {                (ch._equals_equals(terminator)).ifTrue_(block(function () {                    return this.peek()._equals_equals(terminator).ifTrue_ifFalse_(block(function () {                        return this.next();                    }), block(function () {                        nonLocalReturn(out.contents());                    }));                }));                return out.nextPut_(ch);            }));            return out.contents();        },        positionOfSubCollection_ifAbsent_: function (subCollection, exceptionBlock) {            var pattern; var startPosition; var currentPosition;            pattern = ReadStream.on_(subCollection);            startPosition = this.position();            block(function () {                return pattern.atEnd();            }).whileFalse_(block(function () {                this.atEnd().ifTrue_(block(function () {                    nonLocalReturn(exceptionBlock.value());                }));                return this.next()._equals(pattern.next()).ifFalse_(block(function () {                    this.position_(this.position()._minus(pattern.position())._plus(number(1)));                    return pattern.reset();                }));            }));            currentPosition = this.position();            this.position_(startPosition);            return pattern.atEnd().ifTrue_ifFalse_(block(function () {                return currentPosition._plus(number(1))._minus(subCollection.size());            }), block(function () {                return exceptionBlock.value();            }));        },        copyPreamble_from_at_: function (preamble, aStream, pos) {            var terminator; var last50; var stamp; var i;            terminator = character("!");            aStream.position_(pos);            aStream.backChunk();            last50 = aStream.backChunk();            aStream.position_(pos);            stamp = String._new();            (i = last50.findLastOccurrenceOfString_startingAt_(string("stamp:"), number(1)))._greater(number(0)).ifTrue_(block(function () {                return stamp = (last50.copyFrom_to_(i._plus(number(8)), last50.size())).copyUpTo_(character("'"));            }));            (function () {                var cascadeReceiver$ = this;                cascadeReceiver$.cr();                return cascadeReceiver$.nextPut_(terminator);            }).apply(this);            this.nextChunkPut_((String.streamContents_(block(function (strm) {                strm.nextPutAll_(preamble);                return stamp.size()._greater(number(0)).ifTrue_(block(function () {                    return (function () {                        var cascadeReceiver$ = strm;                        cascadeReceiver$.nextPutAll_(string(" stamp: "));                        return cascadeReceiver$.print_(stamp);                    }).apply(this);                }));            }))));            this.cr();            return this;        },        pushBack_: function (aString) {            this.skip_(aString.size().negated());            return this;        },        atEnd: function () {            primitiveDeclaration();            return this.$position._greater_equals(this.$readLimit);        },        nextChunk: function () {            var terminator; var out; var ch;            terminator = character("!");            out = WriteStream.on_((String.new_(number(1000))));            this.skipSeparators();            block(function () {                return (ch = this.next())._equals_equals(nil);            }).whileFalse_(block(function () {                (ch._equals_equals(terminator)).ifTrue_(block(function () {                    return this.peek()._equals_equals(terminator).ifTrue_ifFalse_(block(function () {                        return this.next();                    }), block(function () {                        nonLocalReturn(this.parseLangTagFor_(out.contents()));                    }));                }));                return out.nextPut_(ch);            }));            return this.parseLangTagFor_(out.contents());        },        padTo_put_: function (nBytes, aCharacter) {            var rem;            rem = nBytes._minus((this.position()._backslash_backslash(nBytes)));            rem._equals(nBytes).ifTrue_(block(function () {                nonLocalReturn(number(0));            }));            this.next_put_(rem, aCharacter);            return this;        },        seasideMimeDocument: function () {            return this.contents().seasideMimeDocument();        },        upTo_: function (anObject) {            var newStream; var element;            newStream = WriteStream.on_((this.collectionSpecies().new_(number(100))));            block(function () {                return this.atEnd().or_(block(function () {                    return (element = this.next())._equals(anObject);                }));            }).whileFalse_(block(function () {                return newStream.nextPut_(element);            }));            return newStream.contents();        },        greaseUpToAll_: function (aCollection) {            return this.upToAll_(aCollection);        },        nextWordPut_: function (aWord) {            this.nextPut_(((aWord.bitShift_(number(-8))).bitAnd_(number(255))));            this.nextPut_((aWord.bitAnd_(number(255))));            return aWord;        },        originalContents: function () {            return this.$collection;        },        skipStyleChunk: function () {            var pos;            pos = this.position();            this.skipSeparators();            this.peek()._equals_equals(character("]")).ifTrue_ifFalse_(block(function () {                return (this.upTo_(character("[")))._equals(string("]text")).ifFalse_(block(function () {                    return this.nextChunk();                }));            }), block(function () {                return this.position_(pos);            }));            return this;        },        nextInto_: function (aCollection) {            return this.next_into_startingAt_(aCollection.size(), aCollection, number(1));        },        nextUtfStringPut_: function (s) {            this.uint16_(s.size());            this.nextPutAll_(s.asByteArray());            return this;        },        fileInAnnouncing_: function (announcement) {            var val;            announcement.displayProgressAt_from_to_during_(Sensor.cursorPoint(), number(0), this.size(), block(function (bar) {                block(function () {                    return this.atEnd();                }).whileFalse_(block(function () {                    bar.value_(this.position());                    this.skipSeparators();                    block(function () {                        var chunk;                        return val = (this.peekFor_(character("!"))).ifTrue_ifFalse_(block(function () {                            return (Compiler.evaluate_logged_(this.nextChunk(), _false)).scanFrom_(this);                        }), block(function () {                            chunk = this.nextChunk();                            this.checkForPreamble_(chunk);                            return Compiler.evaluate_logged_(chunk, _true);                        }));                    }).on_do_(InMidstOfFileinNotification, block(function (ex) {                        return ex.resume_(_true);                    }));                    return this.skipStyleChunk();                }));                return this.close();            }));            SmalltalkImage.current().logChange_(string("----End fileIn of ")._comma(this.name())._comma(string("----")));            this.flag_(string("ThisMethodShouldNotBeThere"));            Smalltalk.forgetDoIts();            return val;        },        position_: function (anInteger) {            (anInteger._greater_equals(number(0)).and_(block(function () {                return anInteger._less_equals(this.$readLimit);            }))).ifTrue_ifFalse_(block(function () {                return this.$position = anInteger;            }), block(function () {                return this.positionError();            }));            return this;        },        copyMethodChunkFrom_at_: function (aStream, pos) {            var chunk;            aStream.position_(pos);            chunk = aStream.nextChunkText();            chunk.runs().values().size()._equals(number(1)).ifTrue_ifFalse_(block(function () {                return this.nextChunkPut_(chunk.asString());            }), block(function () {                return this.nextChunkPutWithStyle_(chunk);            }));            return this;        },        nextLittleEndianNumber_put_: function (n, value) {            var bytes;            bytes = ByteArray.new_(n);            number(1).to_do_(n, block(function (i) {                return bytes.at_put_(i, (value.digitAt_(i)));            }));            this.nextPutAll_(bytes);            return this;        },        on_: function (aCollection) {            this.$collection = aCollection;            this.$readLimit = aCollection.size();            this.$position = number(0);            this.reset();            return this;        },        backChunk: function () {            var output; var character;            output = WriteStream.on_((String.new_(number(1000))));            this.back();            block(function () {                return (character = this.back())._equals_equals(nil);            }).whileFalse_(block(function () {                character._equals_equals(character("!")).ifTrue_(block(function () {                    return this.back()._equals_equals(character("!")).ifFalse_(block(function () {                        this.skip_(number(2));                        nonLocalReturn(output.contents().reversed());                    }));                }));                return output.nextPut_(character);            }));            this.skip_(number(1));            return output.contents().reversed();        },        peek: function () {            var nextObject;            this.atEnd().ifTrue_(block(function () {                nonLocalReturn(nil);            }));            nextObject = this.next();            this.$position = this.$position._minus(number(1));            return nextObject;        },        decodeString_andRuns_: function (string, runsRaw) {            var strm; var runLength; var runValues; var newString; var index;            strm = ReadStream.on_from_to_(runsRaw, number(1), runsRaw.size());            (strm.peekFor_(character("("))).ifFalse_(block(function () {                nonLocalReturn(nil);            }));            runLength = OrderedCollection._new();            block(function () {                strm.skipSeparators();                return strm.peekFor_(character(")"));            }).whileFalse_(block(function () {                return runLength.add_((_Number.readFrom_(strm)));            }));            runValues = OrderedCollection._new();            block(function () {                return strm.atEnd().not();            }).whileTrue_(block(function () {                runValues.add_((_Number.readFrom_(strm)));                return strm.next();            }));            newString = WideString.new_(string.size());            index = number(1);            runLength.with_do_(runValues, block(function (length, leadingChar) {                index.to_do_(index._plus(length)._minus(number(1)), block(function (pos) {                    return newString.at_put_(pos, (Character.leadingChar_code_(leadingChar, (string.at_(pos)).charCode())));                }));                return index = index._plus(length);            }));            return newString;        },        string_: function (aString) {            aString.size()._greater(number(65535)).ifTrue_(block(function () {                return this.error_(string("string too long for this format"));            }));            this.uint16_(aString.size());            this.nextPutAll_(aString.asByteArray());            return this;        },        isEmpty: function () {            return this.atEnd().and_(block(function () {                return this.$position._equals(number(0));            }));        },        nextChunkText: function () {            var string; var runsRaw; var strm; var runs; var peek; var pos;            string = this.nextChunk();            pos = this.position();            peek = this.skipSeparatorsAndPeekNext();            peek._equals(character("]")).ifFalse_(block(function () {                this.position_(pos);                nonLocalReturn(string.asText());            }));            (this.upTo_(character("[")))._equals(string("]style")).ifFalse_(block(function () {                this.position_(pos);                nonLocalReturn(string.asText());            }));            runsRaw = this.basicNextChunk();            strm = ReadStream.on_from_to_(runsRaw, number(1), runsRaw.size());            runs = RunArray.scanFrom_(strm);            return Text.basicNew().setString_setRunsChecking_(string, runs);        },        back: function () {            this.position()._equals(number(0)).ifTrue_(block(function () {                return this.errorCantGoBack();            }));            this.skip_(number(-1));            return this.peek();        },        upToAnyOf_do_: function (subcollection, aBlock) {            return this.collectionSpecies().new_streamContents_(number(1000), block(function (stream) {                var ch;                return block(function () {                    return this.atEnd().or_(block(function () {                        return (subcollection.includes_((ch = this.next()))).and_(block(function () {                            aBlock.value_(ch);                            return _true;                        }));                    }));                }).whileFalse_(block(function () {                    return stream.nextPut_(ch);                }));            }));        },        nextWord: function () {            var high; var low;            high = this.next();            high._equals_equals(nil).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            low = this.next();            low._equals_equals(nil).ifTrue_(block(function () {                nonLocalReturn(_false);            }));            return (high.asInteger().bitShift_(number(8)))._plus(low.asInteger());        },        setFrom_to_: function (newStart, newStop) {            this.$position = newStart._minus(number(1));            this.$readLimit = newStop;            return this;        },        position: function () {            return this.$position;        },        command_: function (aString) {            return this;        },        positionError: function () {            this.error_(string("Attempt to set the position of a PositionableStream out of bounds"));            return this;        },        copyMethodChunkFrom_: function (aStream) {            var chunk;            chunk = aStream.nextChunkText();            chunk.runs().values().size()._equals(number(1)).ifTrue_ifFalse_(block(function () {                return this.nextChunkPut_(chunk.asString());            }), block(function () {                return this.nextChunkPutWithStyle_(chunk);            }));            return this;        },        next_putAll_startingAt_: function (anInteger, aCollection, startIndex) {            (startIndex._equals(number(1)).and_(block(function () {                return anInteger._equals(aCollection.size());            }))).ifTrue_(block(function () {                nonLocalReturn(this.nextPutAll_(aCollection));            }));            return this.nextPutAll_((aCollection.copyFrom_to_(startIndex, startIndex._plus(anInteger)._minus(number(1)))));        },        asBinaryOrTextStream: function () {            return (RWBinaryOrTextStream.with_(this.contentsOfEntireFile())).reset();        },        boolean_: function (aBoolean) {            this.nextPut_((aBoolean.ifTrue_ifFalse_(block(function () {                return number(1);            }), block(function () {                return number(0);            }))));            return this;        },        upToAll_: function (aCollection) {            var startPos; var endMatch; var result;            startPos = this.position();            (this.match_(aCollection)).ifTrue_ifFalse_(block(function () {                endMatch = this.position();                this.position_(startPos);                result = this.next_(endMatch._minus(startPos)._minus(aCollection.size()));                this.position_(endMatch);                nonLocalReturn(result);            }), block(function () {                this.position_(startPos);                nonLocalReturn(this.upToEnd());            }));            return this;        },        peekBack: function () {            var element;            element = this.oldBack();            this.skip_(number(1));            return element;        },        int16: function () {            var n;            n = this.next();            n = (n.bitShift_(number(8)))._plus((this.next()));            n._greater_equals(number(32768)).ifTrue_(block(function () {                return n = n._minus(number(65536));            }));            return n;        },        skipTo_: function (anObject) {            block(function () {                return this.atEnd();            }).whileFalse_(block(function () {                return this.next()._equals(anObject).ifTrue_(block(function () {                    nonLocalReturn(_true);                }));            }));            return _false;        },        header: function () {            return this;        },        untilEndWithFork_displayingProgress_: function (aBlock, aString) {            var sem; var done; var result;            sem = Semaphore._new();            done = _false;            block(function () {                return block(function () {                    return result = aBlock.value();                }).ensure_(block(function () {                    done = _true;                    return sem.signal();                }));            }).fork();            this.untilEnd_displayingProgress_(block(function () {                done.ifTrue_(block(function () {                    nonLocalReturn(result);                }));                return (Delay.forSeconds_(number(0.2))).wait();            }), aString);            sem.wait();            return result;        },        nextInto_startingAt_: function (aCollection, startIndex) {            return this.next_into_startingAt_((aCollection.size()._minus(startIndex)._plus(number(1))), aCollection, startIndex);        },        decodeStyle_version_: function (runsObjData, styleVersion) {            var structureInfo;            styleVersion._equals(RemoteString.currentTextAttVersion()).ifTrue_(block(function () {                nonLocalReturn((ReferenceStream.on_(runsObjData)).next());            }));            structureInfo = RemoteString.structureAt_(styleVersion);            return SmartRefStream.read_withClasses_(runsObjData, structureInfo);        },        int32_: function (anInteger) {            var n;            (anInteger._less(number(-2147483648)))._pipe((anInteger._greater_equals(number(2147483648)))).ifTrue_(block(function () {                return this.error_(string("outside 32-bit integer range"));            }));            anInteger._less(number(0)).ifTrue_ifFalse_(block(function () {                return n = number(4294967296)._plus(anInteger);            }), block(function () {                return n = anInteger;            }));            this.nextPut_((n.digitAt_(number(4))));            this.nextPut_((n.digitAt_(number(3))));            this.nextPut_((n.digitAt_(number(2))));            this.nextPut_((n.digitAt_(number(1))));            return this;        },        basicNextChunk: function () {            var terminator; var out; var ch;            terminator = character("!");            out = WriteStream.on_((String.new_(number(1000))));            this.skipSeparators();            block(function () {                return (ch = this.next())._equals_equals(nil);            }).whileFalse_(block(function () {                (ch._equals_equals(terminator)).ifTrue_(block(function () {                    return this.peek()._equals_equals(terminator).ifTrue_ifFalse_(block(function () {                        return this.next();                    }), block(function () {                        nonLocalReturn(out.contents());                    }));                }));                return out.nextPut_(ch);            }));            return out.contents();        },        skipSeparators: function () {            block(function () {                return this.atEnd();            }).whileFalse_(block(function () {                return this.next().isSeparator().ifFalse_(block(function () {                    nonLocalReturn(this.position_(this.position()._minus(number(1))));                }));            }));            return this;        },        skipSeparatorsAndPeekNext: function () {            var peek;            block(function () {                return this.atEnd();            }).whileFalse_(block(function () {                return (peek = this.next()).isSeparator().ifFalse_(block(function () {                    this.position_(this.position()._minus(number(1)));                    nonLocalReturn(peek);                }));            }));            return this;        },        _boolean: function () {            return this.next()._tilde_equals(number(0));        },        uint24: function () {            var n;            n = this.next();            n = (n.bitShift_(number(8)))._plus(this.next());            n = (n.bitShift_(number(8)))._plus(this.next());            return n;        },        seasideMimeDocumentType_: function (aMimetype) {            return (function () {                var cascadeReceiver$ = this.seasideMimeDocument();                cascadeReceiver$.mimeType_(aMimetype);                return cascadeReceiver$.yourself();            }).apply(this);        },        setToEnd: function () {            this.$position = this.$readLimit;            return this;        },        nextString: function () {            var length; var aByteArray;            this.binary();            length = this.next();            length._greater_equals(number(192)).ifTrue_(block(function () {                length = length._minus(number(192));                return number(1).to_do_(number(3), block(function (ii) {                    return length = length._times(number(256))._plus(this.next());                }));            }));            aByteArray = ByteArray.new_(length);            this.nextInto_(aByteArray);            return aByteArray.asString();        },        positionOfSubCollection_: function (subCollection) {            return this.positionOfSubCollection_ifAbsent_(subCollection, block(function () {                return number(0);            }));        },        oldBack: function () {            this.position()._equals(number(0)).ifTrue_(block(function () {                return this.errorCantGoBack();            }));            this.position()._equals(number(1)).ifTrue_(block(function () {                this.position_(number(0));                nonLocalReturn(nil);            }));            this.skip_(number(-2));            return this.next();        },        uint16_: function (anInteger) {            (anInteger._less(number(0)))._pipe((anInteger._greater_equals(number(65536)))).ifTrue_(block(function () {                return this.error_(string("outside unsigned 16-bit integer range"));            }));            this.nextPut_((anInteger.digitAt_(number(2))));            this.nextPut_((anInteger.digitAt_(number(1))));            return this;        },        collectionSpecies: function () {            return this.$collection.species();        },        nextInt32Put_: function (int32) {            var pos;            pos = int32._less(number(0)).ifTrue_ifFalse_(block(function () {                return (number(0)._minus(int32)).bitInvert32()._plus(number(1));            }), block(function () {                return int32;            }));            number(1).to_do_(number(4), block(function (i) {                return this.nextPut_((pos.digitAt_(number(5)._minus(i))));            }));            return int32;        },        nextInt32: function () {            var s;            s = number(0);            number(1).to_do_(number(4), block(function (i) {                return s = (s.bitShift_(number(8)))._plus(this.next());            }));            (s.bitAnd_(number(2147483648)))._equals(number(0)).ifTrue_ifFalse_(block(function () {                nonLocalReturn(s);            }), block(function () {                nonLocalReturn(number(-1)._minus(s.bitInvert32()));            }));            return this;        },        asZLibReadStream: function () {            return ZLibReadStream.on_from_to_(this.$collection, this.$position._plus(number(1)), this.$readLimit);        },        unCommand: function () {            var _char;            block(function () {                return this.peek()._equals(character("<"));            }).whileTrue_(block(function () {                return block(function () {                    return this.atEnd()._equals_equals(_false).and_(block(function () {                        return this.next()._tilde_equals(character(">"));                    }));                }).whileTrue();            }));            return this;        },        upToEnd: function () {            var newStream;            newStream = WriteStream.on_((this.collectionSpecies().new_(number(100))));            block(function () {                return this.atEnd();            }).whileFalse_(block(function () {                return newStream.nextPut_(this.next());            }));            return newStream.contents();        },        next_into_startingAt_: function (n, aCollection, startIndex) {            var count;            count = this.readInto_startingAt_count_(aCollection, startIndex, n);            count._equals(n).ifTrue_ifFalse_(block(function () {                nonLocalReturn(aCollection);            }), block(function () {                nonLocalReturn(aCollection.copyFrom_to_(number(1), startIndex._plus(count)._minus(number(1))));            }));            return this;        },        int32: function () {            var n; var firstDigit;            n = firstDigit = this.next();            n = (n.bitShift_(number(8)))._plus(this.next());            n = (n.bitShift_(number(8)))._plus(this.next());            n = (n.bitShift_(number(8)))._plus(this.next());            firstDigit._greater_equals(number(128)).ifTrue_(block(function () {                return n = number(-4294967296)._plus(n);            }));            return n;        },        readInto_startingAt_count_: function (aCollection, startIndex, n) {            var obj;            number(0).to_do_(n._minus(number(1)), block(function (i) {                (obj = this.next())._equals_equals(nil).ifTrue_(block(function () {                    nonLocalReturn(i);                }));                return aCollection.at_put_(startIndex._plus(i), obj);            }));            return n;        },        contents: function () {            return this.$collection.copyFrom_to_(number(1), this.$readLimit);        }    }});Class("WriteStream", {    superclass: PositionableStream,    instanceVariables: [ "$writeLimit" ],    classMethods: {        with_from_to_: function (aCollection, firstIndex, lastIndex) {            return this.basicNew().with_((aCollection.copyFrom_to_(firstIndex, lastIndex)));        },        on_from_to_: function (aCollection, firstIndex, lastIndex) {            return this.basicNew().on_from_to_(aCollection, firstIndex, lastIndex);        },        with_: function (aCollection) {            return this.basicNew().with_(aCollection);        }    },    instanceMethods: {        withAttributes_do_: function (attributes, strmBlock) {            return strmBlock.value();        },        nextChunkPut_: function (aString) {            var i; var remainder; var terminator;            terminator = character("!");            remainder = aString;            block(function () {                return (i = remainder.indexOf_(terminator))._equals(number(0));            }).whileFalse_(block(function () {                this.nextPutAll_((remainder.copyFrom_to_(number(1), i)));                this.nextPut_(terminator);                return remainder = remainder.copyFrom_to_(i._plus(number(1)), remainder.size());            }));            this.nextPutAll_(remainder);            aString.includesUnifiedCharacter().ifTrue_(block(function () {                this.nextPut_(terminator);                this.nextPutAll_(string("]lang["));                return aString.writeLeadingCharRunsOn_(this);            }));            this.nextPut_(terminator);            return this;        },        crtab_: function (anInteger) {            this.nextPut_(Character.cr());            anInteger.timesRepeat_(block(function () {                return this.nextPut_(Character.tab());            }));            return this;        },        contentType: function () {            this.flag_(string("svp"));            return string("text/html").asMIMEType();        },        crtab: function () {            this.nextPut_(Character.cr());            this.nextPut_(Character.tab());            return this;        },        crlf: function () {            (function () {                var cascadeReceiver$ = this;                cascadeReceiver$.nextPut_(Character.cr());                return cascadeReceiver$.nextPut_(Character.lf());            }).apply(this);            return this;        },        next: function () {            this.shouldNotImplement();            return this;        },        asHttpResponseTo_: function (request) {            return HttpResponse.fromMIMEDocument_((MIMEDocument.contentType_content_(this.contentType(), this.contents())));        },        nextPutKeyword_withArg_: function (keyword, argValue) {            (function () {                var cascadeReceiver$ = this;                cascadeReceiver$.nextPutAll_((keyword.copyWithout_(character(":"))));                cascadeReceiver$.nextPut_(character("("));                cascadeReceiver$.store_(argValue);                return cascadeReceiver$.nextPut_(character(")"));            }).apply(this);            return this;        },        position_: function (anInteger) {            this.$readLimit = this.$readLimit.max_(this.$position);            this._super.position_(anInteger);            return this;        },        ensureNoSpace: function () {            (this.$position._greater(number(0)).and_(block(function () {                return (this.$collection.at_(this.$position))._equals(character(" "));            }))).ifTrue_(block(function () {                return this.skip_(number(-1));            }));            return this;        },        braceArray_: function (anArray) {            this.$collection = anArray;            this.$position = number(0);            this.$readLimit = number(0);            this.$writeLimit = anArray.size();            return this;        },        _less_less: function (aCollection) {            var newEnd;            this.$collection._class()._equals_equals(aCollection._class()).ifFalse_(block(function () {                aCollection.putOn_(this);                nonLocalReturn(this);            }));            newEnd = this.$position._plus(aCollection.size());            newEnd._greater(this.$writeLimit).ifTrue_(block(function () {                return this.growTo_(newEnd._plus(number(10)));            }));            this.$collection.replaceFrom_to_with_startingAt_(this.$position._plus(number(1)), newEnd, aCollection, number(1));            this.$position = newEnd;            return this;        },        peekLast: function () {            return this.$position._greater(number(0)).ifTrue_ifFalse_(block(function () {                return this.$collection.at_(this.$position);            }), block(function () {                return nil;            }));        },        store_: function (anObject) {            anObject.storeOn_(this);            return this;        },        nextPutAll_: function (aCollection) {            var newEnd;            this.$collection._class()._equals_equals(aCollection._class()).ifFalse_(block(function () {                nonLocalReturn(this._super.nextPutAll_(aCollection));            }));            newEnd = this.$position._plus(aCollection.size());            newEnd._greater(this.$writeLimit).ifTrue_(block(function () {                return this.growTo_(newEnd._plus(number(10)));            }));            this.$collection.replaceFrom_to_with_startingAt_(this.$position._plus(number(1)), newEnd, aCollection, number(1));            this.$position = newEnd;            return aCollection;        },        tab_: function (anInteger) {            anInteger.timesRepeat_(block(function () {                return this.tab();            }));            return this;        },        on_: function (aCollection) {            this._super.on_(aCollection);            this.$readLimit = number(0);            this.$writeLimit = aCollection.size();            return this;        },        braceArray: function () {            return this.$collection;        },        timeStamp: function () {            this.nextChunkPut_((String.streamContents_(block(function (s) {                return SmalltalkImage.current().timeStamp_(s);            }))).printString());            this.cr();            return this;        },        setToEnd: function () {            this.$readLimit = this.$readLimit.max_(this.$position);            this._super.setToEnd();            return this;        },        withAttribute_do_: function (att, strmBlock) {            return strmBlock.value();        },        tab: function () {            this.nextPut_(Character.tab());            return this;        },        nextChunkPutWithStyle_: function (aStringOrText) {            aStringOrText.isString().ifTrue_(block(function () {                nonLocalReturn(this.nextChunkPut_(aStringOrText));            }));            aStringOrText.runs().coalesce();            aStringOrText.unembellished().ifTrue_(block(function () {                nonLocalReturn(this.nextChunkPut_(aStringOrText.asString()));            }));            this.nextChunkPut_(aStringOrText.asString());            (function () {                var cascadeReceiver$ = this;                cascadeReceiver$.cr();                return cascadeReceiver$.nextPutAll_(string("]style["));            }).apply(this);            this.nextChunkPut_((String.streamContents_(block(function (strm) {                return aStringOrText.runs().writeScanOn_(strm);            }))));            return this;        },        cr: function () {            this.nextPut_(Character.cr());            return this;        },        ensureCr: function () {            this.ensureEndsWith_(Character.cr());            return this;        },        size: function () {            return this.$readLimit = this.$readLimit.max_(this.$position);        },        lf: function () {            this.nextPut_(Character.lf());            return this;        },        nextPut_: function (anObject) {            primitiveDeclaration();            ((this.$collection._class()._equals_equals(ByteString)).and_(block(function () {                return anObject.isCharacter().and_(block(function () {                    return anObject.isOctetCharacter().not();                }));            }))).ifTrue_(block(function () {                this.$collection = (WideString.from_(this.$collection));                nonLocalReturn(this.nextPut_(anObject));            }));            this.$position._greater_equals(this.$writeLimit).ifTrue_ifFalse_(block(function () {                nonLocalReturn(this.pastEndPut_(anObject));            }), block(function () {                this.$position = this.$position._plus(number(1));                nonLocalReturn(this.$collection.at_put_(this.$position, anObject));            }));            return this;        },        with_: function (aCollection) {            this._super.on_(aCollection);            this.$position = this.$readLimit = this.$writeLimit = aCollection.size();            return this;        },        endEntry: function () {            return this;        },        reset: function () {            this.$readLimit = this.$readLimit.max_(this.$position);            this.$position = number(0);            return this;        },        space: function () {            this.nextPut_(character(" "));            return this;        },        ensureASpace: function () {            this.ensureEndsWith_(character(" "));            return this;        },        greaseNext_putAll_startingAt_: function (anInteger, aCollection, startIndex) {            return this.next_putAll_startingAt_(anInteger, aCollection, startIndex);        },        resetToStart: function () {            this.$readLimit = this.$position = number(0);            return this;        },        on_from_to_: function (aCollection, firstIndex, lastIndex) {            var len;            this.$collection = aCollection;            this.$readLimit = this.$writeLimit = lastIndex._greater((len = this.$collection.size())).ifTrue_ifFalse_(block(function () {                return len;            }), block(function () {                return lastIndex;            }));            this.$position = firstIndex._less_equals(number(1)).ifTrue_ifFalse_(block(function () {                return number(0);            }), block(function () {                return firstIndex._minus(number(1));            }));            return this;        },        ensureEndsWith_: function (anObject) {            (this.$position._greater(number(0)).and_(block(function () {                return (this.$collection.at_(this.$position))._equals(anObject);            }))).ifTrue_(block(function () {                nonLocalReturn(this);            }));            this.nextPut_(anObject);            return this;        },        flush: function () {            return this;        },        next_putAll_startingAt_: function (anInteger, aCollection, startIndex) {            var newEnd;            this.$collection._class()._equals_equals(aCollection._class()).ifFalse_(block(function () {                nonLocalReturn(this._super.next_putAll_startingAt_(anInteger, aCollection, startIndex));            }));            newEnd = this.$position._plus(anInteger);            newEnd._greater(this.$writeLimit).ifTrue_(block(function () {                return this.growTo_(newEnd._plus(number(10)));            }));            this.$collection.replaceFrom_to_with_startingAt_(this.$position._plus(number(1)), newEnd, aCollection, startIndex);            this.$position = newEnd;            return aCollection;        },        growTo_: function (anInteger) {            var oldSize; var grownCollection; var newSize;            oldSize = this.$collection.size();            newSize = anInteger._plus((oldSize._slash_slash(number(4)).max_(number(20))));            grownCollection = this.$collection._class().new_(newSize);            this.$collection = grownCollection.replaceFrom_to_with_startingAt_(number(1), oldSize, this.$collection, number(1));            this.$writeLimit = this.$collection.size();            return this;        },        pastEndPut_: function (anObject) {            this.$collection = this.$collection.grownBy_(((this.$collection.size().max_(number(20))).min_(number(1000000))));            this.$writeLimit = this.$collection.size();            this.$collection.at_put_((this.$position = this.$position._plus(number(1))), anObject);            return anObject;        },        space_: function (anInteger) {            anInteger.timesRepeat_(block(function () {                return this.space();            }));            return this;        },        contents: function () {            this.$readLimit = this.$readLimit.max_(this.$position);            return this.$collection.copyFrom_to_(number(1), this.$position);        }    }})