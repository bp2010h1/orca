{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red88\green85\blue88;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18040\viewh11960\viewkind1
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs34 \cf0 Implementierung Objektorientierter Konzepte in JavaScript
\fs24 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\fs28 \cf0 Einleitung
\fs24 \
\
Wenn man im Squeak-Stil in JavaScript programmieren will, so st\'f6\'dft man dabei auf viele Probleme. Das dabei wohl wichtigste ist, dass die Objektorientierung in JavaScript nicht auf Klassen basiert, sondern auf Prototypen, was jedoch sehr viele Vorz\'fcge und Flexibilit\'e4t mit sich bringt, wenn es darum geht, die Objektorientierung zu erweitern - z.B. klassenbasiert, wie bei Squeak.\
\

\fs28 Anmerkung
\fs24 \
\
In diesem Paper werde ich verh\'e4uft Begriffe, wie Klasse, Methode, Attribut und \'e4hnliche Begriffe aus der objektorientierten Programmierung im Zusammenhang mit JavaScript verwenden. Solche Dinge haben nat\'fcrlich nichts mit JavaScript zu tun. Ich will damit lediglich Wortsch\'f6pfungen wie "klassen\'e4hnliches Objekt" vermeiden um nicht f\'fcr Verwirrung zu sorgen.\
\

\fs28 Klassen und Instanziierung
\fs24 \
\
In JavaScript sind Funktionen nichts weiter als Objekte. Das hei\'dft man kann Variablen mit Funktionen belegen und diese dann sp\'e4ter aufrufen. Mit 
\i new
\i0  erstellt man ein neues Objekt aus einer Funktion. Dabei wird die Funktion im Kontext des neu erstellten Objekts aufgerufen. \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f1 \cf2 	SimpleClass = function() \{\
		this.foo = "bar";\
	\}\
\
	anObject = new SimpleClass();\
	alert(anObject.foo);\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0 \cf0 \
In dem Beispiel wird das Objekt also instanziiert und dabei wird die objekteigene Variable foo auf "bar" gesetzt. Demnach k\'f6nnte man eine Funktion als Klassenersatz verwenden. Als Konstruktor bei der Instanziierung dient dann\
die Funktion selbst.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\fs30 \cf0 Vererbung
\fs24 \
\
Bei der Vererbung kommt JavaScripts 
\i prototype
\i0  zum Einsatz. Jedes Objekt besitzt das 
\i prototype
\i0  Objekt. Alle Objekte, die darin definiert werden,  existieren dann f\'fcr alle Instanzen des Objektes und auch bei der Instanziierung neuer Objekte. Man kann also von einem anderen Objekt erben, indem man es instanziiert den Prototypen eines neuen Objektes damit definiert. Somit enth\'e4lt der Prototyp alle Funktionen, Variablen, etc... der Elternklasse, die dann bei Instanziierung der Kindklasse vererbt werden. \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f1 \cf2 	SimpleClass = function() \{ \}\
	SimpleClass.prototype.foo = function() \{ alert("bar") \};\
\
	SecondClass = function() \{ \}\
	SecondClass.prototype = new SimpleClass();\
\
	anObject = new SecondClass();\
	anObject.foo();\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs30 \cf0 \'dcberladen und Zugriff auf die Elternklasse - 
\i super
\i0\fs24 \
\
Das n\'e4chste Problem ist der Zugriff auf die Superklasse (Elternklasse). In Squeak ist das problemlos mit folgendem m\'f6glich:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f1 \cf2 	add: aNumber to: aSecondNumber\
		super add: aNumber to: aSecondNumber.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0 \cf0 Wenn man nun eine vererbte Methode in unserem JavaScript Klassenkonstrukt  \'fcberladen will, so wissen wir nicht mehr aus welcher Klasse wir den 
\i prototype
\i0  urspr\'fcnglich erzeugt haben. Daher m\'fcssen wir uns die Superklasse in unserer neuen Klasse merken.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f1 \cf2 	SimpleClass = function() \{ \}\
	SimpleClass.prototype.foo = function() \{ alert("bar") \};\
\
	SecondClass = function() \{ \}\
	SecondClass.prototype = new SimpleClass();\
	SecondClass.prototype.superClass = SimpleClass;\
	SecondClass.prototype.foo = function() \{ alert("nu bar"); \}\
\
	anObject = new SecondClass();\
	anObject.foo();\
	anObject.superClass.prototype.foo.apply(this);\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0 \cf0 Wenn wir nun \'fcber den Prototypen auf Supermethode zugreifen ist es besonders wichtig, dass diese trotzdem im Kontext unseren Objektes ausgef\'fchrt wird, da die Methode \'c4nderungen an der Klasseninstanz vornehmen k\'f6nnte, bzw. sonst weitere Methoden als Supermethoden aufrufen w\'fcrde.\
\
Eine wunderbare Abhilfe ist dabei die JavaScript native Funktion 
\i apply
\i0 . Mit 
\i apply
\i0  kann man sowohl das Objekt, in dessen Kontext die Methode ausgef\'fchrt werden soll, \'fcbergeben, als auch ein Array mit Argumenten als zweites Parameter.\
\
\
\
\
Mit diesem Wissen, k\'f6nnen wir uns jetzt eine Methode namens 
\i super
\i0  schreiben, von der jede Klasse erben soll.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f1 \cf2 	Object.prototype.super = function(method, args) \{ \
		this.superClass.prototype[method].apply(this);\
	\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0 \cf0 Die Supermethode kann nun folgenderma\'dfen aufgerufen werden:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f1 \cf2 	anObject.super('foo');\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0 \cf0 bzw. wenn man noch Parameter \'fcbergeben will so:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f1 \cf2 	anObject.super('add', [1,5]);\
}